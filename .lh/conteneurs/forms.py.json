{
    "sourceFile": "conteneurs/forms.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1734391140043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734391471866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,8 @@\n     can_delete=True\n )\n \n \n-\n class ConteneurAcconageForm(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n@@ -291,9 +290,99 @@\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n                   'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n \n \n+class IsoTankForm(forms.ModelForm):\n+    def __init__(self, *args, **kwargs):\n+        super(IsoTankForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.layout = Layout(\n+            Row(\n+                Column('reference', css_class='form-group col-md-6 mb-0'),\n+                Column('etat', css_class='form-group col-md-6 mb-0'),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('photo_devant', css_class='form-group col-md-4 mb-0'),\n+                Column('photo_lateral_droit', css_class='form-group col-md-4 mb-0'),\n+                Column('photo_derriere', css_class='form-group col-md-4 mb-0'),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('photo_lateral_gauche', css_class='form-group col-md-6 mb-0'),\n+                Column('photo_interieur', css_class='form-group col-md-6 mb-0'),\n+                css_class='form-row'\n+            ),\n+            Submit('submit', 'Enregistrer')\n+        )\n \n+    class Meta:\n+        model = Conteneur\n+        fields = ['reference', 'etat', 'photo_devant', 'photo_derriere', 'photo_interieur','photo_lateral_droit','photo_lateral_gauche']\n+        \n+# Créez un FormSet pour le modèle Conteneur\n+ConteneurFormSet = modelformset_factory(\n+    IsoTanks,\n+    form=IsoTankForm,\n+    extra=1,  # Nombre de formulaires supplémentaires à afficher\n+    can_delete=True\n+)\n+\n+\n+\n+class IsoTankAcconageForm(forms.ModelForm):\n+\n+    def __init__(self, *args, **kwargs):\n+        super(IsoTankAcconageForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.layout = Layout(\n+            # Poids brute et Poids équipements sur la même ligne\n+            Row(\n+                Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Poids net sur une ligne à part entière\n+            Row(\n+                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+                css_class='form-row'\n+            ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb1', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb1', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('numero_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('numero_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Bouton de soumission\n+            Submit('submit', 'Enregistrer')\n+        )\n+\n+    def clean(self):\n+        cleaned_data = super().clean()\n+        poids_brute = cleaned_data.get('poids_brute')\n+        poids_net = cleaned_data.get('poids_net')\n+\n+        if poids_net and poids_brute and poids_net > poids_brute:\n+            raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n+\n+        return cleaned_data\n+\n+    class Meta:\n+        model = Conteneur\n+        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n+                  'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n+\n+\n+\n class Dossiers2Form(forms.ModelForm):\n     \n     def __init__(self, *args, **kwargs):\n         super(Dossiers2Form, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1734391904350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,10 +376,9 @@\n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                  'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n+        fields = [  'poids_net', 'numero_plomb1', 'numero_plomb2', 'numero_plomb3', 'photo_plomb1', 'photo_plomb2', 'photo_plomb3']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1734392139204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,9 @@\n             Submit('submit', 'Enregistrer')\n         )\n \n     class Meta:\n-        model = Conteneur\n+        model = IsoTanks\n         fields = ['reference', 'etat', 'photo_devant', 'photo_derriere', 'photo_interieur','photo_lateral_droit','photo_lateral_gauche']\n         \n # Créez un FormSet pour le modèle Conteneur\n ConteneurFormSet = modelformset_factory(\n@@ -326,10 +326,8 @@\n     extra=1,  # Nombre de formulaires supplémentaires à afficher\n     can_delete=True\n )\n \n-\n-\n class IsoTankAcconageForm(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super(IsoTankAcconageForm, self).__init__(*args, **kwargs)\n@@ -375,9 +373,9 @@\n \n         return cleaned_data\n \n     class Meta:\n-        model = Conteneur\n+        model = IsoTanks\n         fields = [  'poids_net', 'numero_plomb1', 'numero_plomb2', 'numero_plomb3', 'photo_plomb1', 'photo_plomb2', 'photo_plomb3']\n \n \n \n"
                },
                {
                    "date": 1734426666890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,12 +326,12 @@\n     extra=1,  # Nombre de formulaires supplémentaires à afficher\n     can_delete=True\n )\n \n-class IsoTankAcconageForm(forms.ModelForm):\n+class ConteneurISO20Form(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n-        super(IsoTankAcconageForm, self).__init__(*args, **kwargs)\n+        super(ConteneurISO20Form, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n         self.helper.layout = Layout(\n             # Poids brute et Poids équipements sur la même ligne\n             Row(\n@@ -342,24 +342,9 @@\n             Row(\n                 Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                 css_class='form-row'\n             ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb1', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb1', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('numero_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('numero_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n+            \n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n@@ -373,10 +358,10 @@\n \n         return cleaned_data\n \n     class Meta:\n-        model = IsoTanks\n-        fields = [  'poids_net', 'numero_plomb1', 'numero_plomb2', 'numero_plomb3', 'photo_plomb1', 'photo_plomb2', 'photo_plomb3']\n+        model = Conteneur\n+        fields = [  'poids_net']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1734434117199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,47 +287,11 @@\n \n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                  'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n+                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n \n \n-class IsoTankForm(forms.ModelForm):\n-    def __init__(self, *args, **kwargs):\n-        super(IsoTankForm, self).__init__(*args, **kwargs)\n-        self.helper = FormHelper()\n-        self.helper.layout = Layout(\n-            Row(\n-                Column('reference', css_class='form-group col-md-6 mb-0'),\n-                Column('etat', css_class='form-group col-md-6 mb-0'),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('photo_devant', css_class='form-group col-md-4 mb-0'),\n-                Column('photo_lateral_droit', css_class='form-group col-md-4 mb-0'),\n-                Column('photo_derriere', css_class='form-group col-md-4 mb-0'),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('photo_lateral_gauche', css_class='form-group col-md-6 mb-0'),\n-                Column('photo_interieur', css_class='form-group col-md-6 mb-0'),\n-                css_class='form-row'\n-            ),\n-            Submit('submit', 'Enregistrer')\n-        )\n-\n-    class Meta:\n-        model = IsoTanks\n-        fields = ['reference', 'etat', 'photo_devant', 'photo_derriere', 'photo_interieur','photo_lateral_droit','photo_lateral_gauche']\n-        \n-# Créez un FormSet pour le modèle Conteneur\n-ConteneurFormSet = modelformset_factory(\n-    IsoTanks,\n-    form=IsoTankForm,\n-    extra=1,  # Nombre de formulaires supplémentaires à afficher\n-    can_delete=True\n-)\n-\n class ConteneurISO20Form(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super(ConteneurISO20Form, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1734434753519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n \n     def clean(self):\n         cleaned_data = super().clean()\n         poids_brute = cleaned_data.get('poids_brute')\n-        poids_net = cleaned_data.get('poids_net')\n+        poids_net = cleaned_data.get('poids_net',)\n \n         if poids_net and poids_brute and poids_net > poids_brute:\n             raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n \n"
                },
                {
                    "date": 1734434791087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,12 @@\n             Row(\n                 Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                 css_class='form-row'\n             ),\n-            \n+            Row(\n+                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+                css_class='form-row'\n+            ),\n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n"
                },
                {
                    "date": 1734434816065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n                 Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                 css_class='form-row'\n             ),\n             Row(\n-                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+                Column('numero_plomb', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                 css_class='form-row'\n             ),\n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n"
                },
                {
                    "date": 1734434831219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,9 +326,9 @@\n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net']\n+        fields = [  'poids_net','numero_plomb']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1734434884909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,10 +306,11 @@\n             Row(\n                 Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                 css_class='form-row'\n             ),\n-            Row(\n-                Column('numero_plomb', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+               Row(\n+                Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 css_class='form-row'\n             ),\n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n@@ -326,9 +327,9 @@\n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net','numero_plomb']\n+        fields = [  'poids_net','numero_plomb','photo_plomb']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1734434930669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,8 +311,13 @@\n                 Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 css_class='form-row'\n             ),\n+                Row(\n+                Column('numero_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n"
                },
                {
                    "date": 1734434949927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,8 +316,13 @@\n                 Column('numero_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('photo_plomb2', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 css_class='form-row'\n             ),\n+                Row(\n+                Column('numero_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n"
                },
                {
                    "date": 1734434976879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,9 +337,9 @@\n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net','numero_plomb','photo_plomb']\n+        fields = [  'poids_net','numero_plomb','photo_plomb','numero_plomb2','photo_plomb2','numero_plomb3','photo_plomb3']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1734435867818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n \n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n+                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb','numero_plomb2','photo_plomb2','numero_plomb3','photo_plomb3']\n \n \n class ConteneurISO20Form(forms.ModelForm):\n \n"
                },
                {
                    "date": 1734435926651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n \n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb','numero_plomb2','photo_plomb2','numero_plomb3','photo_plomb3']\n+                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n \n \n class ConteneurISO20Form(forms.ModelForm):\n \n"
                },
                {
                    "date": 1734625372486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,35 @@\n     class Meta:\n         model=Dossier\n         fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n        \n-     \n+class DossiersNigeriaForm(forms.ModelForm):\n+    \n+    \"\"\"\n+    Formulaire pour la création et la modification des dossiers.\n+    \"\"\"\n+    \n+    def __init__(self, *args, **kwargs):\n+        super(DossiersNigeriaForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.add_input(Submit('submit', 'Enregistrer'))\n+        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Gabon')\n+        self.fields['client'].queryset = Client.objects.filter(pays__nom='Gabon')\n+        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Gabon')\n+        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Gabon')\n+        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Gabon')\n+        self.fields['site'].queryset = Site.objects.filter(pays__nom='Gabon')\n+        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Gabon')\n+        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_selection')\n+        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_acconage')\n+        self.initial['pays'] = Pays.objects.get(nom='Gabon')\n+        \n+       \n+    class Meta:\n+        model=Dossier\n+        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n+       \n+       \n \n \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1734625677681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,18 +205,18 @@\n     def __init__(self, *args, **kwargs):\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n         self.helper.add_input(Submit('submit', 'Enregistrer'))\n-        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Gabon')\n-        self.fields['client'].queryset = Client.objects.filter(pays__nom='Gabon')\n-        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Gabon')\n-        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Gabon')\n-        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Gabon')\n-        self.fields['site'].queryset = Site.objects.filter(pays__nom='Gabon')\n-        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Gabon')\n-        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_selection')\n-        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_acconage')\n-        self.initial['pays'] = Pays.objects.get(nom='Gabon')\n+        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Nigeria')\n+        self.fields['client'].queryset = Client.objects.filter(pays__nom='Nigeria')\n+        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Nigeria')\n+        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Nigeria')\n+        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Nigeria')\n+        self.fields['site'].queryset = Site.objects.filter(pays__nom='Nigeria')\n+        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Nigeria')\n+        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_selection')\n+        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_acconage')\n+        self.initial['pays'] = Pays.objects.get(nom='Nigeria')\n         \n        \n     class Meta:\n         model=Dossier\n"
                },
                {
                    "date": 1734626557611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,16 +216,15 @@\n         self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_selection')\n         self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_acconage')\n         self.initial['pays'] = Pays.objects.get(nom='Nigeria')\n         \n-       \n+\n     class Meta:\n         model=Dossier\n         fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n-       \n-       \n \n \n+\n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n"
                },
                {
                    "date": 1734943442424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,63 +168,42 @@\n     class Meta:\n         model=Dossier\n         fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n        \n-\n-class DossiersGabonForm(forms.ModelForm):\n-    \n-    \"\"\"\n-    Formulaire pour la création et la modification des dossiers.\n-    \"\"\"\n-    \n+class BaseDossierForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n-        super(DossiersGabonForm, self).__init__(*args, **kwargs)\n+        country = kwargs.pop('country')\n+        super(BaseDossierForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n         self.helper.add_input(Submit('submit', 'Enregistrer'))\n-        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Gabon')\n-        self.fields['client'].queryset = Client.objects.filter(pays__nom='Gabon')\n-        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Gabon')\n-        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Gabon')\n-        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Gabon')\n-        self.fields['site'].queryset = Site.objects.filter(pays__nom='Gabon')\n-        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Gabon')\n-        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_selection')\n-        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_acconage')\n-        self.initial['pays'] = Pays.objects.get(nom='Gabon')\n-        \n-       \n+        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom=country)\n+        self.fields['client'].queryset = Client.objects.filter(pays__nom=country)\n+        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom=country)\n+        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom=country)\n+        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom=country)\n+        self.fields['site'].queryset = Site.objects.filter(pays__nom=country)\n+        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom=country)\n+        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays=country, Personnel_type='agent_selection')\n+        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays=country, Personnel_type='agent_acconage')\n+        self.initial['pays'] = Pays.objects.get(nom=country)\n+\n     class Meta:\n-        model=Dossier\n-        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n-       \n-class DossiersNigeriaForm(forms.ModelForm):\n-    \n+        model = Dossier\n+        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage', 'Site_empotage']\n+\n+class DossiersGabonForm(BaseDossierForm):\n     \"\"\"\n-    Formulaire pour la création et la modification des dossiers.\n+    Un formulaire pour gérer les dossiers spécifiques au Gabon.\n+\n+    Ce formulaire hérite de BaseDossierForm et définit le pays par défaut sur 'Gabon'.\n+\n+    Méthodes:\n+        __init__(*args, **kwargs): Initialise le formulaire avec 'Gabon' comme pays.\n     \"\"\"\n-    \n     def __init__(self, *args, **kwargs):\n-        super(DossiersNigeriaForm, self).__init__(*args, **kwargs)\n-        self.helper = FormHelper()\n-        self.helper.add_input(Submit('submit', 'Enregistrer'))\n-        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Nigeria')\n-        self.fields['client'].queryset = Client.objects.filter(pays__nom='Nigeria')\n-        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Nigeria')\n-        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Nigeria')\n-        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Nigeria')\n-        self.fields['site'].queryset = Site.objects.filter(pays__nom='Nigeria')\n-        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Nigeria')\n-        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_selection')\n-        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Nigeria',Personnel_type='agent_acconage')\n-        self.initial['pays'] = Pays.objects.get(nom='Nigeria')\n-        \n+        kwargs['country'] = 'Gabon'\n+        super(DossiersGabonForm, self).__init__(*args, **kwargs)\n \n-    class Meta:\n-        model=Dossier\n-        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n-\n-\n-\n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n"
                },
                {
                    "date": 1734943525564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,8 +201,9 @@\n     \"\"\"\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Gabon'\n         super(DossiersGabonForm, self).__init__(*args, **kwargs)\n+        \n \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1734943566705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,10 +201,15 @@\n     \"\"\"\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Gabon'\n         super(DossiersGabonForm, self).__init__(*args, **kwargs)\n-        \n \n+\n+class DossiersNigeriaForm(BaseDossierForm):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['country'] = 'Nigeria'\n+        super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n+\n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n"
                },
                {
                    "date": 1734943966628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,13 @@\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Nigeria'\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n \n+class DossiersCoteIvoireForm(BaseDossierForm):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['country'] = 'Côte d\\'Ivoire'\n+        super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n+        \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n"
                },
                {
                    "date": 1734943979556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,33 +143,8 @@\n         model=Client\n         fields='__all__'\n         \n \n-class DossiersForm(forms.ModelForm):\n-    \n-    \"\"\"\n-    Formulaire pour la création et la modification des dossiers.\n-    \"\"\"\n-    \n-    def __init__(self, *args, **kwargs):\n-        super(DossiersForm, self).__init__(*args, **kwargs)\n-        self.helper = FormHelper()\n-        self.helper.add_input(Submit('submit', 'Enregistrer'))\n-        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['client'].queryset = Client.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['site'].queryset = Site.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_selection')\n-        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_acconage')\n-        \n-       \n-    class Meta:\n-        model=Dossier\n-        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n-       \n class BaseDossierForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         country = kwargs.pop('country')\n         super(BaseDossierForm, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1734944210665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n \n class DossiersCoteIvoireForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n-        kwargs['country'] = 'Côte d\\'Ivoire'\n+        kwargs['country'] = 'côte_ivoire'\n         super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n         \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1734944272215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n \n class DossiersCoteIvoireForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n-        kwargs['country'] = 'côte_ivoire'\n+        kwargs['country'] = \"Côte d'Ivoire\"\n         super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n         \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1734944406800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,8 +143,33 @@\n         model=Client\n         fields='__all__'\n         \n \n+class DossiersForm(forms.ModelForm):\n+    \n+    \"\"\"\n+    Formulaire pour la création et la modification des dossiers.\n+    \"\"\"\n+    \n+    def __init__(self, *args, **kwargs):\n+        super(DossiersForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.add_input(Submit('submit', 'Enregistrer'))\n+        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['client'].queryset = Client.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['site'].queryset = Site.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_selection')\n+        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_acconage')\n+        \n+       \n+    class Meta:\n+        model=Dossier\n+        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n+       \n class BaseDossierForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         country = kwargs.pop('country')\n         super(BaseDossierForm, self).__init__(*args, **kwargs)\n@@ -176,18 +201,22 @@\n     \"\"\"\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Gabon'\n         super(DossiersGabonForm, self).__init__(*args, **kwargs)\n+        \n+class DossiersCoteIvoireForm(BaseDossierForm):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['country'] ='côte_ivoire'\n+        super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n \n-\n class DossiersNigeriaForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Nigeria'\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n \n class DossiersCoteIvoireForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n-        kwargs['country'] = \"Côte d'Ivoire\"\n+        kwargs['country'] = 'Côte d\\'Ivoire'\n         super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n         \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1734944432046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,33 +143,9 @@\n         model=Client\n         fields='__all__'\n         \n \n-class DossiersForm(forms.ModelForm):\n-    \n-    \"\"\"\n-    Formulaire pour la création et la modification des dossiers.\n-    \"\"\"\n-    \n-    def __init__(self, *args, **kwargs):\n-        super(DossiersForm, self).__init__(*args, **kwargs)\n-        self.helper = FormHelper()\n-        self.helper.add_input(Submit('submit', 'Enregistrer'))\n-        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['client'].queryset = Client.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['site'].queryset = Site.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Côte d\\'Ivoire')\n-        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_selection')\n-        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_acconage')\n-        \n-       \n-    class Meta:\n-        model=Dossier\n-        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n-       \n+\n class BaseDossierForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         country = kwargs.pop('country')\n         super(BaseDossierForm, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1734944595713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n         super(DossiersGabonForm, self).__init__(*args, **kwargs)\n         \n class DossiersCoteIvoireForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n-        kwargs['country'] ='côte_ivoire'\n+        kwargs['country'] ='Côte d\\'Ivoire'\n         super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n \n class DossiersNigeriaForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1734944800749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,33 @@\n         model=Client\n         fields='__all__'\n         \n \n-\n+class DossiersForm(forms.ModelForm):\n+    \n+    \"\"\"\n+    Formulaire pour la création et la modification des dossiers.\n+    \"\"\"\n+    \n+    def __init__(self, *args, **kwargs):\n+        super(DossiersForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.add_input(Submit('submit', 'Enregistrer'))\n+        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['client'].queryset = Client.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['site'].queryset = Site.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Côte d\\'Ivoire')\n+        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_selection')\n+        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_acconage')\n+        \n+       \n+    class Meta:\n+        model=Dossier\n+        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n+       \n class BaseDossierForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         country = kwargs.pop('country')\n         super(BaseDossierForm, self).__init__(*args, **kwargs)\n@@ -178,13 +202,10 @@\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Gabon'\n         super(DossiersGabonForm, self).__init__(*args, **kwargs)\n         \n-class DossiersCoteIvoireForm(BaseDossierForm):\n-    def __init__(self, *args, **kwargs):\n-        kwargs['country'] ='Côte d\\'Ivoire'\n-        super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n \n+\n class DossiersNigeriaForm(BaseDossierForm):\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Nigeria'\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n"
                },
                {
                    "date": 1734944830050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,12 +209,9 @@\n     def __init__(self, *args, **kwargs):\n         kwargs['country'] = 'Nigeria'\n         super(DossiersNigeriaForm, self).__init__(*args, **kwargs)      \n \n-class DossiersCoteIvoireForm(BaseDossierForm):\n-    def __init__(self, *args, **kwargs):\n-        kwargs['country'] = 'Côte d\\'Ivoire'\n-        super( DossiersCoteIvoireForm, self).__init__(*args, **kwargs)\n+\n         \n class ConteneurForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super(ConteneurForm, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1735895617887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,23 @@\n                 Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 css_class='form-row'\n             ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n             # Bouton de soumission\n+            \n+            # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n     def clean(self):\n@@ -300,9 +314,9 @@\n \n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n+                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n \n \n class ConteneurISO20Form(forms.ModelForm):\n \n@@ -334,8 +348,20 @@\n                 Column('numero_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('photo_plomb3', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 css_class='form-row'\n             ),\n+                Row(\n+                    Column('numero_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                    Column('photo_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                    css_class='form-row'\n+                ),\n+                Row(\n+                    Column('numero_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                    Column('photo_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                    css_class='form-row'\n+                ),\n+                \n+            \n             # Bouton de soumission\n             Submit('submit', 'Enregistrer')\n         )\n \n@@ -350,9 +376,9 @@\n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net','numero_plomb','photo_plomb','numero_plomb2','photo_plomb2','numero_plomb3','photo_plomb3']\n+        fields = [  'poids_net','numero_plomb','photo_plomb','numero_plomb2','photo_plomb2','numero_plomb3','photo_plomb3','numero_plomb4','photo_plomb4','numero_plomb5','photo_plomb5']\n \n \n \n class Dossiers2Form(forms.ModelForm):\n"
                },
                {
                    "date": 1735897630556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import random\n from django.core.exceptions import ValidationError\n from crispy_forms.helper import FormHelper\n-from crispy_forms.layout import Layout, Row,Column\n+from crispy_forms.layout import Layout, Row, Column, Submit, HTML\n+from crispy_forms.bootstrap import PrependedText\n from django.core.mail import send_mail\n from crispy_forms.helper import FormHelper\n from crispy_forms.layout import Submit\n from django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n"
                },
                {
                    "date": 1735897689961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,13 +250,81 @@\n )\n \n \n class ConteneurAcconageForm(forms.ModelForm):\n+    class Meta:\n+        model = Conteneur\n+        fields = ['numero', 'type', 'tare', 'capacite_max', 'date_derniere_inspection',\n+                 'etat', 'localisation', 'statut', 'compagnie_maritime']\n+        widgets = {\n+            'date_derniere_inspection': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n+            'numero': forms.TextInput(attrs={'placeholder': 'ABCD1234567', 'class': 'form-control'}),\n+            'tare': forms.NumberInput(attrs={'class': 'form-control'}),\n+            'capacite_max': forms.NumberInput(attrs={'class': 'form-control'}),\n+        }\n \n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n+        self.helper.form_class = 'form-horizontal'\n+        self.helper.label_class = 'col-lg-3'\n+        self.helper.field_class = 'col-lg-9'\n+        self.helper.form_method = 'post'\n+        \n         self.helper.layout = Layout(\n+            HTML(\"\"\"\n+                <h3 class=\"form-title mb-4\">Informations du Conteneur</h3>\n+            \"\"\"),\n+            Row(\n+                Column('numero', css_class='form-group col-md-6'),\n+                Column('type', css_class='form-group col-md-6'),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column(PrependedText('tare', 'kg', css_class='form-group col-md-6')),\n+                Column(PrependedText('capacite_max', 'kg', css_class='form-group col-md-6')),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('date_derniere_inspection', css_class='form-group col-md-6'),\n+                Column('etat', css_class='form-group col-md-6'),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('localisation', css_class='form-group col-md-6'),\n+                Column('statut', css_class='form-group col-md-6'),\n+                css_class='form-row'\n+            ),\n+            Row(\n+                Column('compagnie_maritime', css_class='form-group col-12'),\n+                css_class='form-row'\n+            ),\n+            HTML(\"\"\"\n+                <div class=\"form-group mt-4\">\n+                    <button type=\"submit\" class=\"btn btn-primary\">\n+                        <i class=\"fas fa-save mr-2\"></i>Enregistrer\n+                    </button>\n+                    <button type=\"reset\" class=\"btn btn-secondary ml-2\">\n+                        <i class=\"fas fa-undo mr-2\"></i>Réinitialiser\n+                    </button>\n+                </div>\n+            \"\"\")\n+        )\n+\n+    def clean_numero(self):\n+        numero = self.cleaned_data.get('numero')\n+        if not numero:\n+            raise forms.ValidationError(\"Le numéro du conteneur est obligatoire\")\n+        if len(numero) != 11:\n+            raise forms.ValidationError(\"Le numéro du conteneur doit contenir 11 caractères\")\n+        return numero.upper()\n+\n+class ConteneurAcconageForm(forms.ModelForm):\n+\n+    def __init__(self, *args, **kwargs):\n+        super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n+        self.helper = FormHelper()\n+        self.helper.layout = Layout(\n             # Poids brute et Poids équipements sur la même ligne\n             Row(\n                 Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n"
                },
                {
                    "date": 1735897733547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,11 +252,11 @@\n \n class ConteneurAcconageForm(forms.ModelForm):\n     class Meta:\n         model = Conteneur\n-        fields = ['numero', 'type', 'tare', 'capacite_max', 'date_derniere_inspection',\n-                 'etat', 'localisation', 'statut', 'compagnie_maritime']\n-        widgets = {\n+        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n+                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n+            widgets = {\n             'date_derniere_inspection': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n             'numero': forms.TextInput(attrs={'placeholder': 'ABCD1234567', 'class': 'form-control'}),\n             'tare': forms.NumberInput(attrs={'class': 'form-control'}),\n             'capacite_max': forms.NumberInput(attrs={'class': 'form-control'}),\n"
                },
                {
                    "date": 1735897754022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n                 'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n-            widgets = {\n+        widgets = {\n             'date_derniere_inspection': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n             'numero': forms.TextInput(attrs={'placeholder': 'ABCD1234567', 'class': 'form-control'}),\n             'tare': forms.NumberInput(attrs={'class': 'form-control'}),\n             'capacite_max': forms.NumberInput(attrs={'class': 'form-control'}),\n"
                },
                {
                    "date": 1735897847778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import random\n from django.core.exceptions import ValidationError\n from crispy_forms.helper import FormHelper\n-from crispy_forms.layout import Layout, Row, Column, Submit, HTML\n-from crispy_forms.bootstrap import PrependedText\n+from crispy_forms.layout import Layout, Row,Column\n from django.core.mail import send_mail\n from crispy_forms.helper import FormHelper\n from crispy_forms.layout import Submit\n from django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n@@ -250,81 +249,13 @@\n )\n \n \n class ConteneurAcconageForm(forms.ModelForm):\n-    class Meta:\n-        model = Conteneur\n-        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n-        widgets = {\n-            'date_derniere_inspection': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),\n-            'numero': forms.TextInput(attrs={'placeholder': 'ABCD1234567', 'class': 'form-control'}),\n-            'tare': forms.NumberInput(attrs={'class': 'form-control'}),\n-            'capacite_max': forms.NumberInput(attrs={'class': 'form-control'}),\n-        }\n \n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n-        self.helper.form_class = 'form-horizontal'\n-        self.helper.label_class = 'col-lg-3'\n-        self.helper.field_class = 'col-lg-9'\n-        self.helper.form_method = 'post'\n-        \n         self.helper.layout = Layout(\n-            HTML(\"\"\"\n-                <h3 class=\"form-title mb-4\">Informations du Conteneur</h3>\n-            \"\"\"),\n-            Row(\n-                Column('numero', css_class='form-group col-md-6'),\n-                Column('type', css_class='form-group col-md-6'),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column(PrependedText('tare', 'kg', css_class='form-group col-md-6')),\n-                Column(PrependedText('capacite_max', 'kg', css_class='form-group col-md-6')),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('date_derniere_inspection', css_class='form-group col-md-6'),\n-                Column('etat', css_class='form-group col-md-6'),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('localisation', css_class='form-group col-md-6'),\n-                Column('statut', css_class='form-group col-md-6'),\n-                css_class='form-row'\n-            ),\n-            Row(\n-                Column('compagnie_maritime', css_class='form-group col-12'),\n-                css_class='form-row'\n-            ),\n-            HTML(\"\"\"\n-                <div class=\"form-group mt-4\">\n-                    <button type=\"submit\" class=\"btn btn-primary\">\n-                        <i class=\"fas fa-save mr-2\"></i>Enregistrer\n-                    </button>\n-                    <button type=\"reset\" class=\"btn btn-secondary ml-2\">\n-                        <i class=\"fas fa-undo mr-2\"></i>Réinitialiser\n-                    </button>\n-                </div>\n-            \"\"\")\n-        )\n-\n-    def clean_numero(self):\n-        numero = self.cleaned_data.get('numero')\n-        if not numero:\n-            raise forms.ValidationError(\"Le numéro du conteneur est obligatoire\")\n-        if len(numero) != 11:\n-            raise forms.ValidationError(\"Le numéro du conteneur doit contenir 11 caractères\")\n-        return numero.upper()\n-\n-class ConteneurAcconageForm(forms.ModelForm):\n-\n-    def __init__(self, *args, **kwargs):\n-        super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n-        self.helper = FormHelper()\n-        self.helper.layout = Layout(\n             # Poids brute et Poids équipements sur la même ligne\n             Row(\n                 Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                 Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n"
                },
                {
                    "date": 1735898067596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from crispy_forms.layout import Submit\n from django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n from django.forms import modelformset_factory\n from django import forms\n-\n+from crispy_forms.layout import Layout, Submit, Row, Column, Fieldset\n from .models import *\n from django.forms import  DateTimeInput\n \n #formulaire de connexion\n@@ -249,70 +249,66 @@\n )\n \n \n class ConteneurAcconageForm(forms.ModelForm):\n-\n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n         self.helper.layout = Layout(\n-            # Poids brute et Poids équipements sur la même ligne\n-            Row(\n-                Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n+            # Regroupement des champs de poids\n+            Fieldset(\n+                'Informations de poids',\n+                Row(\n+                    Column('poids_brute', css_class='form-group col-md-6 mb-0'),\n+                    Column('poids_equipements', css_class='form-group col-md-6 mb-0'),\n+                    css_class='form-row'\n+                ),\n+                Row(\n+                    Column('poids_net', css_class='form-group col-md-12 mb-0'),\n+                    css_class='form-row'\n+                ),\n             ),\n-            # Poids net sur une ligne à part entière\n-            Row(\n-                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n-                css_class='form-row'\n+            # Regroupement des équipements\n+            Fieldset(\n+                'Équipements',\n+                Row(\n+                    Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),\n+                    Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),\n+                    css_class='form-row'\n+                ),\n+                Row(\n+                    Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),\n+                    Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),\n+                    css_class='form-row'\n+                ),\n             ),\n-            # Numéro Heating Pad et Photo Heating Pad sur la même ligne\n-            Row(\n-                Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n+            # Regroupement des plombs\n+            Fieldset(\n+                'Plombs de sécurité',\n+                *[Row(\n+                    Column(f'numero_plomb{i if i > 1 else \"\"}', css_class='form-group col-md-6 mb-0'),\n+                    Column(f'photo_plomb{i if i > 1 else \"\"}', css_class='form-group col-md-6 mb-0'),\n+                    css_class='form-row'\n+                ) for i in [1, 4, 5]],\n             ),\n-            # Numéro Flexitank et Photo Flexitank sur la même ligne\n-            Row(\n-                Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Bouton de soumission\n-            \n-            # Bouton de soumission\n-            Submit('submit', 'Enregistrer')\n+            Submit('submit', 'Enregistrer', css_class='btn btn-primary mt-3')\n         )\n \n     def clean(self):\n         cleaned_data = super().clean()\n         poids_brute = cleaned_data.get('poids_brute')\n         poids_net = cleaned_data.get('poids_net')\n+        poids_equipements = cleaned_data.get('poids_equipements', 0)\n \n-        if poids_net and poids_brute and poids_net > poids_brute:\n-            raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n+        if poids_net and poids_brute:\n+            if poids_net > poids_brute:\n+                raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n+            if poids_equipements and (poids_brute - poids_net) < poids_equipements:\n+                raise forms.ValidationError(\"Le poids des équipements ne peut pas être supérieur à la différence entre le poids brut et le poids net.\")\n \n         return cleaned_data\n \n+\n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n                 'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n"
                },
                {
                    "date": 1735898464420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from crispy_forms.layout import Submit\n from django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n from django.forms import modelformset_factory\n from django import forms\n-from crispy_forms.layout import Layout, Submit, Row, Column, Fieldset\n+\n from .models import *\n from django.forms import  DateTimeInput\n \n #formulaire de connexion\n@@ -249,66 +249,70 @@\n )\n \n \n class ConteneurAcconageForm(forms.ModelForm):\n+\n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n         self.helper.layout = Layout(\n-            # Regroupement des champs de poids\n-            Fieldset(\n-                'Informations de poids',\n-                Row(\n-                    Column('poids_brute', css_class='form-group col-md-6 mb-0'),\n-                    Column('poids_equipements', css_class='form-group col-md-6 mb-0'),\n-                    css_class='form-row'\n-                ),\n-                Row(\n-                    Column('poids_net', css_class='form-group col-md-12 mb-0'),\n-                    css_class='form-row'\n-                ),\n+            # Poids brute et Poids équipements sur la même ligne\n+            Row(\n+                Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n             ),\n-            # Regroupement des équipements\n-            Fieldset(\n-                'Équipements',\n-                Row(\n-                    Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),\n-                    Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),\n-                    css_class='form-row'\n-                ),\n-                Row(\n-                    Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),\n-                    Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),\n-                    css_class='form-row'\n-                ),\n+            # Poids net sur une ligne à part entière\n+            Row(\n+                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+                css_class='form-row'\n             ),\n-            # Regroupement des plombs\n-            Fieldset(\n-                'Plombs de sécurité',\n-                *[Row(\n-                    Column(f'numero_plomb{i if i > 1 else \"\"}', css_class='form-group col-md-6 mb-0'),\n-                    Column(f'photo_plomb{i if i > 1 else \"\"}', css_class='form-group col-md-6 mb-0'),\n-                    css_class='form-row'\n-                ) for i in [1, 4, 5]],\n+            # Numéro Heating Pad et Photo Heating Pad sur la même ligne\n+            Row(\n+                Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n             ),\n-            Submit('submit', 'Enregistrer', css_class='btn btn-primary mt-3')\n+            # Numéro Flexitank et Photo Flexitank sur la même ligne\n+            Row(\n+                Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Numéro Plomb et Photo Plomb sur la même ligne\n+            Row(\n+                Column('numero_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('photo_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                css_class='form-row'\n+            ),\n+            # Bouton de soumission\n+            \n+            # Bouton de soumission\n+            Submit('submit', 'Enregistrer')\n         )\n \n     def clean(self):\n         cleaned_data = super().clean()\n         poids_brute = cleaned_data.get('poids_brute')\n         poids_net = cleaned_data.get('poids_net')\n-        poids_equipements = cleaned_data.get('poids_equipements', 0)\n \n-        if poids_net and poids_brute:\n-            if poids_net > poids_brute:\n-                raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n-            if poids_equipements and (poids_brute - poids_net) < poids_equipements:\n-                raise forms.ValidationError(\"Le poids des équipements ne peut pas être supérieur à la différence entre le poids brut et le poids net.\")\n+        if poids_net and poids_brute and poids_net > poids_brute:\n+            raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n \n         return cleaned_data\n \n-\n     class Meta:\n         model = Conteneur\n         fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n                 'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n"
                },
                {
                    "date": 1735898687056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,78 +247,153 @@\n     extra=1,  # Nombre de formulaires supplémentaires à afficher\n     can_delete=True\n )\n \n+from django import forms\n+from crispy_forms.helper import FormHelper\n+from crispy_forms.layout import Layout, Row, Column, Submit, HTML, Div\n+from django.core.validators import MinValueValidator\n+from decimal import Decimal\n \n class ConteneurAcconageForm(forms.ModelForm):\n-\n     def __init__(self, *args, **kwargs):\n         super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n         self.helper = FormHelper()\n+        self.helper.form_class = 'form-horizontal'\n+        self.helper.label_class = 'col-lg-3'\n+        self.helper.field_class = 'col-lg-9'\n+        \n+        # Ajout des classes pour le style et la validation\n+        for field_name, field in self.fields.items():\n+            field.widget.attrs['class'] = 'form-control'\n+            if 'photo' in field_name:\n+                field.widget.attrs.update({\n+                    'accept': 'image/*',\n+                    'class': 'form-control-file',\n+                    'onchange': 'previewImage(this);'\n+                })\n+            if 'poids' in field_name:\n+                field.widget.attrs.update({\n+                    'step': '0.01',\n+                    'min': '0'\n+                })\n+\n+        # Layout amélioré avec des sections et des prévisualisations\n         self.helper.layout = Layout(\n-            # Poids brute et Poids équipements sur la même ligne\n+            HTML(\"\"\"\n+                <div class=\"card mb-4\">\n+                    <div class=\"card-header bg-primary text-white\">\n+                        <h4 class=\"mb-0\">Informations de poids</h4>\n+                    </div>\n+                    <div class=\"card-body\">\n+            \"\"\"),\n             Row(\n-                Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('poids_brute', css_class='form-group col-md-4 mb-3'),\n+                Column('poids_equipements', css_class='form-group col-md-4 mb-3'),\n+                Column('poids_net', css_class='form-group col-md-4 mb-3'),\n                 css_class='form-row'\n             ),\n-            # Poids net sur une ligne à part entière\n+            HTML(\"</div></div>\"),\n+\n+            HTML(\"\"\"\n+                <div class=\"card mb-4\">\n+                    <div class=\"card-header bg-primary text-white\">\n+                        <h4 class=\"mb-0\">Heating Pad</h4>\n+                    </div>\n+                    <div class=\"card-body\">\n+            \"\"\"),\n             Row(\n-                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n+                Column('numero_heating_pad', css_class='form-group col-md-6 mb-3'),\n+                Column(\n+                    Div(\n+                        'photo_heating_pad',\n+                        HTML(\"\"\"<img id=\"preview_photo_heating_pad\" class=\"img-preview mt-2 d-none\" src=\"\" alt=\"Aperçu\">\"\"\"),\n+                        css_class='form-group'\n+                    ),\n+                    css_class='col-md-6 mb-3'\n+                ),\n                 css_class='form-row'\n             ),\n-            # Numéro Heating Pad et Photo Heating Pad sur la même ligne\n+            HTML(\"</div></div>\"),\n+\n+            # Sections similaires pour Flexitank et Plombs...\n+            HTML(\"\"\"\n+                <div class=\"card mb-4\">\n+                    <div class=\"card-header bg-primary text-white\">\n+                        <h4 class=\"mb-0\">Flexitank</h4>\n+                    </div>\n+                    <div class=\"card-body\">\n+            \"\"\"),\n             Row(\n-                Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('numero_flexitank', css_class='form-group col-md-6 mb-3'),\n+                Column(\n+                    Div(\n+                        'photo_flexitank',\n+                        HTML(\"\"\"<img id=\"preview_photo_flexitank\" class=\"img-preview mt-2 d-none\" src=\"\" alt=\"Aperçu\">\"\"\"),\n+                        css_class='form-group'\n+                    ),\n+                    css_class='col-md-6 mb-3'\n+                ),\n                 css_class='form-row'\n             ),\n-            # Numéro Flexitank et Photo Flexitank sur la même ligne\n+            HTML(\"</div></div>\"),\n+\n+            # Section pour les plombs\n+            HTML(\"\"\"\n+                <div class=\"card mb-4\">\n+                    <div class=\"card-header bg-primary text-white\">\n+                        <h4 class=\"mb-0\">Plombs</h4>\n+                    </div>\n+                    <div class=\"card-body\">\n+            \"\"\"),\n             Row(\n-                Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n+                Column('numero_plomb', 'photo_plomb', css_class='form-group col-md-4 mb-3'),\n+                Column('numero_plomb4', 'photo_plomb4', css_class='form-group col-md-4 mb-3'),\n+                Column('numero_plomb5', 'photo_plomb5', css_class='form-group col-md-4 mb-3'),\n                 css_class='form-row'\n             ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n+            HTML(\"</div></div>\"),\n+\n+            Div(\n+                Submit('submit', 'Enregistrer', css_class='btn btn-primary btn-lg'),\n+                css_class='text-center mt-4'\n             ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb4', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Numéro Plomb et Photo Plomb sur la même ligne\n-            Row(\n-                Column('numero_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                Column('photo_plomb5', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n-                css_class='form-row'\n-            ),\n-            # Bouton de soumission\n-            \n-            # Bouton de soumission\n-            Submit('submit', 'Enregistrer')\n         )\n \n     def clean(self):\n         cleaned_data = super().clean()\n         poids_brute = cleaned_data.get('poids_brute')\n         poids_net = cleaned_data.get('poids_net')\n+        poids_equipements = cleaned_data.get('poids_equipements')\n \n-        if poids_net and poids_brute and poids_net > poids_brute:\n-            raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n+        if poids_net and poids_brute:\n+            if poids_net > poids_brute:\n+                raise forms.ValidationError({\n+                    'poids_net': \"Le poids net ne peut pas être supérieur au poids brut.\"\n+                })\n+            \n+            if poids_equipements and (poids_brute - poids_equipements) < poids_net:\n+                raise forms.ValidationError({\n+                    'poids_net': \"Le poids net ne peut pas être supérieur au poids brut moins le poids des équipements.\"\n+                })\n \n         return cleaned_data\n \n     class Meta:\n         model = Conteneur\n-        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n-                'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb', 'numero_plomb4','photo_plomb4', 'numero_plomb5','photo_plomb5']\n-\n-\n+        fields = [\n+            'poids_brute', 'poids_net', 'poids_equipements',\n+            'numero_heating_pad', 'photo_heating_pad',\n+            'numero_flexitank', 'photo_flexitank',\n+            'numero_plomb', 'photo_plomb',\n+            'numero_plomb4', 'photo_plomb4',\n+            'numero_plomb5', 'photo_plomb5'\n+        ]\n+        widgets = {\n+            'poids_brute': forms.NumberInput(attrs={'placeholder': 'Entrez le poids brut'}),\n+            'poids_net': forms.NumberInput(attrs={'placeholder': 'Entrez le poids net'}),\n+            'poids_equipements': forms.NumberInput(attrs={'placeholder': 'Entrez le poids des équipements'}),\n+        }\n class ConteneurISO20Form(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super(ConteneurISO20Form, self).__init__(*args, **kwargs)\n"
                }
            ],
            "date": 1734391140043,
            "name": "Commit-0",
            "content": "import random\nfrom django.core.exceptions import ValidationError\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Row,Column\nfrom django.core.mail import send_mail\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.forms import modelformset_factory\nfrom django import forms\n\nfrom .models import *\nfrom django.forms import  DateTimeInput\n\n#formulaire de connexion\nclass LoginForm(AuthenticationForm): \n    \n    username = forms.CharField(\n        max_length=254,\n        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Nom d\\'utilisateur ou e-mail', 'id': 'username'})\n    )\n    password = forms.CharField(\n        label=\"Mot de passe\",\n        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Mot de passe', 'id': 'password'})\n    )\n\n#formualaire de verification\nclass VerificationForm(forms.Form):\n \n    code = forms.CharField(max_length=6)\n    \n\n\n#formualire de creation de compte \nclass  PersonnelForm(UserCreationForm):\n    class Meta:\n        model = Personnel\n        fields = ('first_name','last_name','photos', 'email','Contact','username','Personnel_type','password1', 'password2')\n        \n    def clean_email(self):\n        email = self.cleaned_data.get('email')\n        if Personnel.objects.filter(email=email).exists():\n            raise ValidationError(\"Un compte avec cet e-mail existe déjà.\")\n        return email\n    \n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.is_active = False  # Désactiver le compte jusqu'à la vérification\n        if commit:\n            user.save()\n            code = str(random.randint(100000, 999999))\n            VerificationCode.objects.create(user=user, code=code)\n            send_mail(\n                'Votre code de vérification',\n                f'Votre code de vérification est {code}',\n                'kaboremessi@gmail.com',\n                [user.email],\n                fail_silently=False,\n            )\n        return user\n    \n# form de site \nclass SiteForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(SiteForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    \n    class Meta:\n        model=Site\n        fields='__all__'\n        labels={'nom_site':'Nom du Site '}\n\n\n# form de site \nclass SiteempotageForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(SiteempotageForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    \n    class Meta:\n        model=Site_empotage\n        fields='__all__'\n        labels={'nom_site':'Nom du Site '}\n\n# form de commodite\nclass CommoditeForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(CommoditeForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta :\n        model=Commodite\n        fields='__all__'\n\n#orm de Port De Dechargement \nclass PODForm(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(PODForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta:\n        model=POD\n        fields='__all__'\n        labels={'nom_POD':'Nom du Port de Dechagement'}\n\n\n\nclass POLForm(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(POLForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta:\n        model=POL\n        fields='__all__'\n        labels={'nom_POL':'Nom du Port de chagement'}\n        \n        \nclass CompagnieMaritimeForm(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(CompagnieMaritimeForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta:\n        model=CompagnieMaritime\n        fields='__all__'\n        \n\n\n\nclass ClientForm(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(ClientForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta:\n        model=Client\n        fields='__all__'\n        \n\nclass DossiersForm(forms.ModelForm):\n    \n    \"\"\"\n    Formulaire pour la création et la modification des dossiers.\n    \"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        super(DossiersForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['client'].queryset = Client.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['site'].queryset = Site.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Côte d\\'Ivoire')\n        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_selection')\n        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='côte_ivoire',Personnel_type='agent_acconage')\n        \n       \n    class Meta:\n        model=Dossier\n        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n       \n\nclass DossiersGabonForm(forms.ModelForm):\n    \n    \"\"\"\n    Formulaire pour la création et la modification des dossiers.\n    \"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        super(DossiersGabonForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n        self.fields['compagnie_maritime'].queryset = CompagnieMaritime.objects.filter(pays__nom='Gabon')\n        self.fields['client'].queryset = Client.objects.filter(pays__nom='Gabon')\n        self.fields['port_de_chargement'].queryset = POL.objects.filter(pays__nom='Gabon')\n        self.fields['commodite'].queryset = Commodite.objects.filter(pays__nom='Gabon')\n        self.fields['port_de_dechargement'].queryset = POD.objects.filter(pays__nom='Gabon')\n        self.fields['site'].queryset = Site.objects.filter(pays__nom='Gabon')\n        self.fields['Site_empotage'].queryset = Site_empotage.objects.filter(pays__nom='Gabon')\n        self.fields['agent_selection'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_selection')\n        self.fields['agent_acconage'].queryset = Personnel.objects.filter(Personnel_pays='Gabon',Personnel_type='agent_acconage')\n        self.initial['pays'] = Pays.objects.get(nom='Gabon')\n        \n       \n    class Meta:\n        model=Dossier\n        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage']\n       \n     \n\n\nclass ConteneurForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ConteneurForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            Row(\n                Column('reference', css_class='form-group col-md-6 mb-0'),\n                Column('etat', css_class='form-group col-md-6 mb-0'),\n                css_class='form-row'\n            ),\n            Row(\n                Column('photo_devant', css_class='form-group col-md-4 mb-0'),\n                Column('photo_lateral_droit', css_class='form-group col-md-4 mb-0'),\n                Column('photo_derriere', css_class='form-group col-md-4 mb-0'),\n                css_class='form-row'\n            ),\n            Row(\n                Column('photo_lateral_gauche', css_class='form-group col-md-6 mb-0'),\n                Column('photo_interieur', css_class='form-group col-md-6 mb-0'),\n                css_class='form-row'\n            ),\n            Submit('submit', 'Enregistrer')\n        )\n\n    class Meta:\n        model = Conteneur\n        fields = ['reference', 'etat', 'photo_devant', 'photo_derriere', 'photo_interieur','photo_lateral_droit','photo_lateral_gauche']\n        \n# Créez un FormSet pour le modèle Conteneur\nConteneurFormSet = modelformset_factory(\n    Conteneur,\n    form=ConteneurForm,\n    extra=1,  # Nombre de formulaires supplémentaires à afficher\n    can_delete=True\n)\n\n\n\nclass ConteneurAcconageForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ConteneurAcconageForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.layout = Layout(\n            # Poids brute et Poids équipements sur la même ligne\n            Row(\n                Column('poids_brute', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                Column('poids_equipements', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                css_class='form-row'\n            ),\n            # Poids net sur une ligne à part entière\n            Row(\n                Column('poids_net', css_class='form-group col-md-12 mb-0'),  # Pleine largeur\n                css_class='form-row'\n            ),\n            # Numéro Heating Pad et Photo Heating Pad sur la même ligne\n            Row(\n                Column('numero_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                Column('photo_heating_pad', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                css_class='form-row'\n            ),\n            # Numéro Flexitank et Photo Flexitank sur la même ligne\n            Row(\n                Column('numero_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                Column('photo_flexitank', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                css_class='form-row'\n            ),\n            # Numéro Plomb et Photo Plomb sur la même ligne\n            Row(\n                Column('numero_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                Column('photo_plomb', css_class='form-group col-md-6 mb-0'),  # 50% de la largeur\n                css_class='form-row'\n            ),\n            # Bouton de soumission\n            Submit('submit', 'Enregistrer')\n        )\n\n    def clean(self):\n        cleaned_data = super().clean()\n        poids_brute = cleaned_data.get('poids_brute')\n        poids_net = cleaned_data.get('poids_net')\n\n        if poids_net and poids_brute and poids_net > poids_brute:\n            raise forms.ValidationError(\"Le poids net ne peut pas être supérieur au poids brut.\")\n\n        return cleaned_data\n\n    class Meta:\n        model = Conteneur\n        fields = [  'poids_net', 'poids_equipements', 'numero_heating_pad', 'photo_heating_pad', \n                  'numero_flexitank', 'photo_flexitank', 'numero_plomb', 'photo_plomb']\n\n\n\nclass Dossiers2Form(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(Dossiers2Form, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n       \n    class Meta:\n        model=Dossier2\n        fields = ['projet', 'TRD', 'booking', 'type_conteneur', 'client', 'commodite', 'port_de_chargement', 'port_de_dechargement', 'compagnie_maritime', 'site', 'agent_selection', 'agent_acconage','Site_empotage','date_creation']\n       \n     \n\n \nclass AgentForm(forms.ModelForm):\n    \n    def __init__(self, *args, **kwargs):\n        super(AgentForm, self).__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('submit', 'Enregistrer'))\n    class Meta:\n        model=Agent\n        fields='__all__'\n        \n\n\nclass DocumentFactureForm(forms.ModelForm):\n    class Meta:\n        model = Document_Facture\n        fields = ['document']\n        \n\nclass AutreDocumentForm(forms.ModelForm):\n    class Meta:\n        model = AutreDocument\n        fields = ['document']\n        \n        \nclass ImagesForm(forms.ModelForm):\n    class Meta:\n        model = Images\n        fields = ['image']\n       "
        }
    ]
}