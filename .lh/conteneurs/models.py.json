{
    "sourceFile": "conteneurs/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734434010511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734435112181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,12 +354,10 @@\n         champs_requis = [\n             self.poids_brute,\n             #self.poids_equipements,\n             self.poids_net,\n-            self.numero_flexitank,\n             self.numero_plomb,\n             self.photo_plomb,\n-            self.photo_flexitank,\n         ]\n         \n         # Vérifier si tous les champs sont remplis (pas None)\n         if all(champs_requis):\n"
                },
                {
                    "date": 1734435211504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,9 +351,9 @@\n     \n     def verifier_et_changer_statut(self):\n         # Liste des champs nécessaires pour qu'un conteneur soit 'Aconer'\n         champs_requis = [\n-            self.poids_brute,\n+            \n             #self.poids_equipements,\n             self.poids_net,\n             self.numero_plomb,\n             self.photo_plomb,\n"
                },
                {
                    "date": 1734944729824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         ('secretaire', 'Secrétaire'),\n         ('chef', 'Chef'),\n     ]\n     USER_PAYS = [\n-        (\"côte_ivoire\",  \"Côte d'Ivoire\"),\n+        (\"côte_ivoire\",  \"côte_ivoire\"),\n         ('Ghana', 'Ghana'),\n         ('Nigeria', 'Nigeria'),\n         ('Benin', 'Benin'),\n         ('Gabon', 'Gabon'),\n"
                },
                {
                    "date": 1735894979320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,12 @@\n     numero_plomb2 = models.CharField(max_length=50, blank=True, null=True)\n     photo_plomb2 = models.ImageField(upload_to='photos_plomb2/', blank=True, null=True)\n     numero_plomb3 = models.CharField(max_length=50, blank=True, null=True)\n     photo_plomb3 = models.ImageField(upload_to='photos_plomb3/', blank=True, null=True)\n+    numero_plomb4 = models.CharField(max_length=50, blank=True, null=True)\n+    photo_plomb4 = models.ImageField(upload_to='photos_plomb4/', blank=True, null=True)\n+    numero_plomb5 = models.CharField(max_length=50, blank=True, null=True)\n+    photo_plomb5 = models.ImageField(upload_to='photos_plomb5/', blank=True, null=True)\n     dossier = models.ForeignKey(Dossier, related_name='conteneurs',on_delete=models.CASCADE)\n     agent_selection = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_selection'}, on_delete=models.CASCADE, related_name='conteneurs_selection')\n     agent_acconage = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_acconage'}, on_delete=models.CASCADE, related_name='conteneurs_acconage', null=True, blank=True)\n     Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n"
                }
            ],
            "date": 1734434010511,
            "name": "Commit-0",
            "content": "from email.message import EmailMessage\nfrom django.db import models\nfrom safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\nfrom django.contrib.auth.models import AbstractUser\nfrom django.core.files.storage import FileSystemStorage\nfrom django.conf import settings\nimport os.path\nimport uuid\nfrom django.utils import timezone\nimport random\nfrom django_lifecycle import LifecycleModel\nfrom django.core.mail import send_mail\nfrom reportlab.lib import colors\nimageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\n                                                 '/medias/'))\nfrom reportlab.lib import colors\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.lib.units import inch\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.pdfgen import canvas\nfrom io import BytesIO\nimport os\nfrom django.template.loader import render_to_string\nfrom weasyprint import HTML\nfrom io import BytesIO\nfrom django.http import HttpResponse\nimport os\nfrom django.conf import settings\nfrom django.templatetags.static import static\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.contrib.auth.signals import user_logged_in, user_logged_out\nfrom django.dispatch import receiver\nfrom django.core.mail import EmailMessage\n\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\nfrom weasyprint import HTML\n\nclass Pays(SafeDeleteModel,LifecycleModel):\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\n    _safedelete_policy = SOFT_DELETE_CASCADE\n    nom = models.CharField(max_length=50)\n    \n    def __str__(self):\n        return self.nom\n    \n    \nclass Personnel(AbstractUser, SafeDeleteModel):\n    _safedelete_policy = SOFT_DELETE_CASCADE\n\n    USER_TYPE_CHOICES = [\n        ('agent_selection', 'Agent de Sélection '),\n        ('agent_acconage', 'Agent Habillage & empotage'),\n        ('secretaire', 'Secrétaire'),\n        ('chef', 'Chef'),\n    ]\n    USER_PAYS = [\n        (\"côte_ivoire\",  \"Côte d'Ivoire\"),\n        ('Ghana', 'Ghana'),\n        ('Nigeria', 'Nigeria'),\n        ('Benin', 'Benin'),\n        ('Gabon', 'Gabon'),\n    ]\n    Contact = models.CharField(max_length=20)\n    photos = models.ImageField(\"Photo\", upload_to='Proprietaire_photos/', blank=True, null=True)\n    is_verified = models.BooleanField(default=False)\n    Personnel_type = models.CharField(max_length=20, choices=USER_TYPE_CHOICES)\n    Personnel_pays = models.CharField(max_length=20, choices=USER_PAYS,default='côte_ivoire')\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n \n    is_online = models.BooleanField(default=False)  # champ pour le statut en ligne\n    \n    groups = models.ManyToManyField(\n        'auth.Group',\n        related_name='personnel_set',  # Ajoutez un related_name unique\n        blank=True,\n        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\n        verbose_name='groups',\n    )\n    \n    user_permissions = models.ManyToManyField(\n        'auth.Permission',\n        related_name='personnel_permissions_set',  # Ajoutez un related_name unique\n        blank=True,\n        help_text='Specific permissions for this user.',\n        verbose_name='user permissions',\n    )\n\n    def __str__(self):\n        return f\"{self.username} -{self.Personnel_pays}\"\n\n    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\n    @receiver(user_logged_in)\n    def user_logged_in_handler(sender, request, user, **kwargs):\n        user.is_online = True\n        user.last_login = timezone.now()  # Met à jour le champ last_login\n        user.save()\n\n    @receiver(user_logged_out)\n    def user_logged_out_handler(sender, request, user, **kwargs):\n        user.is_online = False\n        user.save()\n        \n    \nclass VerificationCode(models.Model):\n    user = models.OneToOneField(Personnel, on_delete=models.CASCADE)\n    code = models.CharField(max_length=6)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.user.username} - {self.code}\"\nclass Client(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n\n    nom = models.CharField(max_length=50)\n    adresse = models.CharField(max_length=100)\n    contact = models.CharField(max_length=20)\n    email = models.EmailField(max_length=50)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    \n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return  f\"{self.nom} -{self.pays}\"\n\n\nclass Commodite(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n    nom_commodite = models.CharField(max_length=50, unique=True)\n    def __str__(self):\n        return  f\"{self.nom_commodite} -{self.pays}\"\n    \n    \n\n\nclass Site(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    nom_site = models.CharField(max_length=50, unique=True)\n    contact_site = models.CharField(max_length=20)\n    lieu_site = models.CharField(max_length=150, unique=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n    \n    def __str__(self):\n        return  f\"{self.nom_site} -{self.pays}\"\n\nclass Site_empotage(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    nom_site = models.CharField(max_length=50, unique=True)\n    contact_site = models.CharField(max_length=20)\n    lieu_site = models.CharField(max_length=150, unique=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return  f\"{self.nom_site} -{self.pays}\"\n\n\n\nclass POD(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    nom_POD = models.CharField(max_length=50, unique=True)\n    lieu_POD = models.CharField(max_length=150, unique=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return  f\"{self.nom_POD} -{self.pays}\"\n\n\nclass POL(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    nom_POL = models.CharField(max_length=50, unique=True)\n    lieu_POL = models.CharField(max_length=150, unique=True)\n\n    def __str__(self):\n        return  f\"{self.nom_POL} -{self.pays}\"\n\n\nclass CompagnieMaritime(SafeDeleteModel,LifecycleModel):\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    nom_compagnie_maritime = models.CharField(max_length=50, unique=True)\n    lieu_compagnie_maritime = models.CharField(max_length=150, unique=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return  f\"{self.nom_compagnie_maritime} -{self.pays}\"\n    \nclass FichierJoint(models.Model):\n    fichier = models.FileField(upload_to='fichiers_joints/')\n    \n    def __str__(self):\n        return self.fichier.name\n\nclass Dossier(SafeDeleteModel,LifecycleModel):\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    STATUT_CHOICES= [\n        ('en_attente', ' En Attente'),\n        ('selection_en_cours','Selection en cours'),\n        ('ACCONAGE_FAIT','empotage en cours'),\n        ('Aconage_en_cours', \"En Attente d'empotage\"),\n        ('dossier_termine', 'Termine'),\n    ]\n    TAILLE_CONTENEUR= [\n        ('10_pieds','10 Pieds'),\n        ('20_pieds','20 Pieds'),\n        ('ISO_20_pieds','ISO 20 Pieds'),\n        ('40_pieds','40 Pieds'),\n    ]\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE)\n\n    statut=models.CharField(max_length=25,choices=STATUT_CHOICES,default='en_attente')\n    date_creation = models.DateTimeField(auto_now_add=True)\n    projet = models.CharField(max_length=50, unique=True)\n    TRD = models.CharField(max_length=50)\n    booking = models.CharField(max_length=50)\n    type_conteneur = models.CharField(max_length=13,choices=TAILLE_CONTENEUR)\n    compagnie_maritime = models.ForeignKey(CompagnieMaritime, on_delete=models.CASCADE)\n    port_de_chargement = models.ForeignKey(POL, on_delete=models.CASCADE)\n    port_de_dechargement = models.ForeignKey(POD, on_delete=models.CASCADE)\n    site = models.ForeignKey(Site, on_delete=models.CASCADE)\n    Site_empotage = models.ForeignKey(Site_empotage, on_delete=models.CASCADE)\n    commodite = models.ForeignKey(Commodite, on_delete=models.CASCADE)\n    client = models.ForeignKey(Client, on_delete=models.CASCADE)\n    agent_selection = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_selection'}, on_delete=models.CASCADE, related_name='dossiers_selection')\n    agent_acconage = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_acconage'}, on_delete=models.CASCADE, related_name='dossiers_acconage', null=True, blank=True)\n    secretaire = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'secretaire'}, on_delete=models.CASCADE, null=True, blank=True)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    fichiers = models.ManyToManyField(FichierJoint, blank=True)  \n    Date_selection = models.DateTimeField(\"Date de sélection\", blank=True, null=True)\n    Date_acconage = models.DateTimeField(\"Date d'acconage\", blank=True, null=True)\n    Date_terminer = models.DateTimeField(\"Date de fin \", blank=True, null=True)\n    def __str__(self):\n        return f\"Dossier {self.TRD} - {self.projet}\"\n    \n    \n    def envoyer_pour_selection(self):\n        if self.statut == 'en_attente':\n            self.statut = 'selection_en_cours'\n            self.Date_selection = timezone.now()  # Set the selection date\n            self.save()\n\n    def finaliser_selection(self):\n        if self.statut == 'selection_en_cours':\n            self.statut = 'Aconage_en_cours'\n            self.save()\n    \n    def marquer_comme_acconage_fait(self):\n        # Logique pour mettre à jour l'état du dossier\n        self.statut = 'ACCONAGE_FAIT'\n        self.Date_acconage = timezone.now()  # Set the acconage date\n        self.save()\n\n    def terminer_dossier(self):\n        self.statut = 'dossier_termine'\n        self.Date_terminer = timezone.now()  # Set the completion date\n        self.save()\n        \n    def retrograder_en_selection(self):\n        \"\"\"\n        Change le statut du dossier en 'selection_en_cours' et envoie un e-mail à l'agent de sélection.\n        \"\"\"\n        if self.statut in 'Aconage_en_cours' or 'ACCONAGE_FAIT':\n            self.statut = 'selection_en_cours'\n            self.Date_selection = timezone.now()  # Mettre à jour la date de sélection\n            \n            # Sauvegarder les modifications du dossier\n            self.save()\n\n            # Envoyer un e-mail à l'agent de sélection\n            subject = f\"Nouveau dossier à mettre à jour : {self.projet}\"\n            message = f\"Bonjour {self.agent_selection},\\n\\n\" \\\n                    f\"Vous avez reçu un nouveau dossier à mettre à jour : {self.TRD} - {self.projet}.\\n\" \\\n                    \"Merci de votre attention.\"\n\n            send_mail(\n                subject,\n                message,\n                settings.DEFAULT_FROM_EMAIL,  # L'email de l'expéditeur\n                [self.agent_selection.email],  # L'email de l'agent de sélection\n                fail_silently=False,\n                #cc=['ibrakdev@gmail.com','trading@oils-of-africa.ci','alice.tuo@oils-of-africa.ci', 'africa@oils-of-africa.ci','ops@oils-of-africa.ci','infos@oils-of-africa.ci','fitting.loadingassistance1@oils-of-africa.ci'],\n            )\n\n    \nclass Conteneur(SafeDeleteModel,LifecycleModel):\n\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n\n    _safedelete_policy=SOFT_DELETE_CASCADE\n\n    TYPE_ETATS = [\n        ('excellent', 'Excellent'), \n        ('moyen','Moyen'),\n        ('mauvais', 'Mauvais'),\n    ]\n    \n    STATUT_CHOICES = [\n        ('Non_aconer', 'Non habillé & Non empote'),\n        ('aconer', 'empote'),\n    ]\n    reference = models.CharField(max_length=50, unique=True)\n    etat = models.CharField(max_length=10, choices=TYPE_ETATS)\n    photo_devant = models.ImageField(upload_to='photos_devant/')\n    photo_derriere = models.ImageField(upload_to='photos_derriere/')\n    photo_interieur = models.ImageField(upload_to='photos_interieur/')\n    photo_lateral_droit = models.ImageField(upload_to='photo_lateral_droit/')\n    photo_lateral_gauche = models.ImageField(upload_to='photo_lateral_gauche/')\n    poids_brute = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)\n    poids_equipements = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)\n    poids_net = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)\n    numero_heating_pad = models.CharField(max_length=50, blank=True, null=True)\n    photo_heating_pad = models.ImageField(upload_to='photos_heating_pad/', blank=True, null=True)\n    numero_flexitank = models.CharField(max_length=50, blank=True, null=True)\n    photo_flexitank = models.ImageField(upload_to='photos_flexitank/', blank=True, null=True)\n    numero_plomb = models.CharField(max_length=50, blank=True, null=True)\n    photo_plomb = models.ImageField(upload_to='photos_plomb/', blank=True, null=True)\n    numero_plomb2 = models.CharField(max_length=50, blank=True, null=True)\n    photo_plomb2 = models.ImageField(upload_to='photos_plomb2/', blank=True, null=True)\n    numero_plomb3 = models.CharField(max_length=50, blank=True, null=True)\n    photo_plomb3 = models.ImageField(upload_to='photos_plomb3/', blank=True, null=True)\n    dossier = models.ForeignKey(Dossier, related_name='conteneurs',on_delete=models.CASCADE)\n    agent_selection = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_selection'}, on_delete=models.CASCADE, related_name='conteneurs_selection')\n    agent_acconage = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_acconage'}, on_delete=models.CASCADE, related_name='conteneurs_acconage', null=True, blank=True)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    statut = models.CharField(\n        max_length=20,\n        choices=STATUT_CHOICES,\n        default='Non_aconer'\n    )\n    \n   \n    def __str__(self):\n        return self.reference\n    \n    \n    def verifier_et_changer_statut(self):\n        # Liste des champs nécessaires pour qu'un conteneur soit 'Aconer'\n        champs_requis = [\n            self.poids_brute,\n            #self.poids_equipements,\n            self.poids_net,\n            self.numero_flexitank,\n            self.numero_plomb,\n            self.photo_plomb,\n            self.photo_flexitank,\n        ]\n        \n        # Vérifier si tous les champs sont remplis (pas None)\n        if all(champs_requis):\n            self.statut = 'aconer'\n            self.save()  # Enregistrer le changement\n        else:\n            self.statut = 'Non_aconer'\n            self.save()  # Mettre à jour le statut en 'À compléter'\n    \n    def calcule_poid_brute(self):\n        # Calcul automatique du poids brut si poids net et poids équipements sont fournis\n        if self.poids_net is not None and self.poids_equipements is not None:\n            self.poids_brute = self.poids_net + self.poids_equipements\n\n    def save(self, *args, **kwargs):\n        self.calcule_poid_brute()\n        super(Conteneur, self).save(*args, **kwargs)\n\n\nclass Agent(SafeDeleteModel,LifecycleModel):\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    \n    AGENT_TYPE_CHOICES = [\n        ('selection', 'Selection'),\n        ('empotage', 'Empotage & Habillage '),\n    ]\n    Nom= models.CharField(max_length=50, unique=False)\n    Prenom= models.CharField(max_length=50, unique=False)\n    Agent_type = models.CharField(max_length=20, choices=AGENT_TYPE_CHOICES)\n\n    contact = models.CharField(max_length=20)\n    email = models.EmailField(max_length=50)\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n\n    def __str__(self):\n        return f\" {self.Nom}-{self.Prenom} {self.Agent_type} \"  \n    \nclass Dossier2(SafeDeleteModel,LifecycleModel):\n    id=models.UUIDField(\"ID\",primary_key=True,default=uuid.uuid4,editable=False)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    _safedelete_policy=SOFT_DELETE_CASCADE\n    \n    TAILLE_CONTENEUR= [\n        ('10_pieds','10 Pieds'),\n        ('20_pieds','20 Pieds'),\n        ('ISO_20_pieds','ISO 20 Pieds'),\n        ('40_pieds','40 Pieds'),\n    ]\n    date_creation = models.DateTimeField(auto_now_add=True)\n    projet = models.CharField(max_length=50, unique=True)\n    TRD = models.CharField(max_length=50)\n    booking = models.CharField(max_length=50)\n    type_conteneur = models.CharField(max_length=13,choices=TAILLE_CONTENEUR)\n    compagnie_maritime = models.ForeignKey(CompagnieMaritime, on_delete=models.CASCADE)\n    port_de_chargement = models.ForeignKey(POL, on_delete=models.CASCADE)\n    port_de_dechargement = models.ForeignKey(POD, on_delete=models.CASCADE)\n    site = models.ForeignKey(Site, on_delete=models.CASCADE)\n    Site_empotage = models.ForeignKey(Site_empotage, on_delete=models.CASCADE)\n    commodite = models.ForeignKey(Commodite, on_delete=models.CASCADE)\n    client = models.ForeignKey(Client, on_delete=models.CASCADE)\n    agent_acconage = models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_acconage'}, on_delete=models.CASCADE, related_name='dossier2_acconages', null=True, blank=True)\n   \n    agent_selection =  models.ForeignKey(Personnel, limit_choices_to={'Personnel_type': 'agent_selection'}, on_delete=models.CASCADE, related_name='dossier2_selections')\n    \n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    date_creation = models.DateTimeField(null=True, blank=True)\n    def __str__(self):\n        return f\"Dossier {self.TRD} - {self.projet}\"\n    \n    class Meta:\n        ordering = ['-date_creation']\n\nclass Document_Facture(SafeDeleteModel, LifecycleModel):\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\n    _safedelete_policy = SOFT_DELETE_CASCADE\n    dossier = models.ForeignKey(Dossier2, on_delete=models.CASCADE, related_name=\"factures\")\n    document = models.FileField(upload_to='facture/%Y/%m/%d')\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    Date_modification = models.DateTimeField(auto_now=True, editable=False)\n    Date_suppression = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return f\"Archive {self.document} - Dossier {self.dossier.TRD}\"\n\n    class Meta:\n        ordering = ['-Date_ajout']\n        verbose_name = \"Document Facture\"\n        verbose_name_plural = \"Documents Factures\"\n\nclass AutreDocument(SafeDeleteModel, LifecycleModel):\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\n    _safedelete_policy = SOFT_DELETE_CASCADE\n    dossier = models.ForeignKey(Dossier2, on_delete=models.CASCADE, related_name=\"autres_documents\")\n    document = models.FileField(upload_to='documents/%Y/%m/%d')\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    Date_modification = models.DateTimeField(auto_now=True, editable=False)\n    Date_suppression = models.DateTimeField(null=True, blank=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return f\"Document {self.document} - Dossier {self.dossier.TRD}\"\n\n    class Meta:\n        ordering = ['-Date_ajout']\n        verbose_name = \"Autre Document\"\n        verbose_name_plural = \"Autres Documents\"\n        \nclass Images(SafeDeleteModel, LifecycleModel):\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\n    _safedelete_policy = SOFT_DELETE_CASCADE\n    dossier = models.ForeignKey(Dossier2, on_delete=models.CASCADE, related_name=\"images\")\n    image = models.ImageField(upload_to='images/%Y/%m/%d')\n    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\n    Date_modification = models.DateTimeField(auto_now=True, editable=False)\n    Date_suppression = models.DateTimeField(null=True, blank=True)\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    def __str__(self):\n        return f\"Image {self.image.name} - Dossier {self.dossier.TRD}\"\n\n    class Meta:\n        ordering = ['-Date_ajout']\n        verbose_name = \"Image\"\n        verbose_name_plural = \"Images\"\n\n\nclass Notification(SafeDeleteModel,LifecycleModel):\n    pays = models.ForeignKey(Pays, on_delete=models.CASCADE, null=False, blank=False)\n\n    user=models.ForeignKey(Personnel,on_delete=models.CASCADE,related_name='notification')\n    message=models.TextField()\n    is_read=models.BooleanField(default=False)\n    created_at=models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n        return f'Notification  pour {self.user.username} - {self.message[:20]}...'"
        }
    ]
}