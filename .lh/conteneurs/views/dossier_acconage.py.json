{
    "sourceFile": "conteneurs/views/dossier_acconage.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1734425563695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734425570240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,43 +63,31 @@\n \n def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n     print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n     print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n-\n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n \n-    # Vérifie le type_conteneur du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        # Utilise un autre formulaire pour ISO 20 Pieds\n-        FormClass = ConteneurISO20Form\n-    else:\n-        # Formulaire par défaut\n-        FormClass = ConteneurAcconageForm\n-\n     if request.method == 'POST':\n-        form = FormClass(request.POST, request.FILES, instance=conteneur)\n+        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n         if form.is_valid():\n             conteneur = form.save(commit=False)\n             conteneur.agent_acconage = request.user  # Assigne l'agent d'acconage\n             conteneur.save()\n             conteneur.dossier.marquer_comme_acconage_fait()\n-\n+            \n             # Met à jour le statut du dossier si nécessaire\n             conteneur.verifier_et_changer_statut()\n             return redirect('view_conteneurs', dossier_id=dossier_id)\n         else:\n             print(form.errors)  # Affiche les erreurs de validation pour le débogage\n     else:\n-        form = FormClass(instance=conteneur)\n+        form = ConteneurAcconageForm(instance=conteneur)\n \n     return render(request, 'pages/Dossier_Acconage/conteneur_ajout.html', {\n         'form': form,\n         'conteneur': conteneur,\n         'dossier_id': dossier_id\n     })\n-ossier_id': dossier_id\n-    })\n \n \n \n def afficher_detail_conteneur(request, conteneur_id):\n"
                },
                {
                    "date": 1734425581899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,27 +61,38 @@\n \n         return context\n \n def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n+def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n     print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n     print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n+\n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n+    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n \n+    # Vérifie le type_conteneur du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        # Utilise un autre formulaire pour ISO 20 Pieds\n+        FormClass = ConteneurISO20Form\n+    else:\n+        # Formulaire par défaut\n+        FormClass = ConteneurAcconageForm\n+\n     if request.method == 'POST':\n-        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n+        form = FormClass(request.POST, request.FILES, instance=conteneur)\n         if form.is_valid():\n             conteneur = form.save(commit=False)\n             conteneur.agent_acconage = request.user  # Assigne l'agent d'acconage\n             conteneur.save()\n             conteneur.dossier.marquer_comme_acconage_fait()\n-            \n+\n             # Met à jour le statut du dossier si nécessaire\n             conteneur.verifier_et_changer_statut()\n             return redirect('view_conteneurs', dossier_id=dossier_id)\n         else:\n             print(form.errors)  # Affiche les erreurs de validation pour le débogage\n     else:\n-        form = ConteneurAcconageForm(instance=conteneur)\n+        form = FormClass(instance=conteneur)\n \n     return render(request, 'pages/Dossier_Acconage/conteneur_ajout.html', {\n         'form': form,\n         'conteneur': conteneur,\n"
                },
                {
                    "date": 1734425591484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,10 @@\n                 statut='Aconage_en_cours'\n             ).order_by('-Date_ajout')\n \n         return context\n-\n+ \n def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n-def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n     print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n     print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n \n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n"
                },
                {
                    "date": 1734426709404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #from django.http import HttpRequest, HttpResponseRedirect\n from django.db import IntegrityError\n from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n from conteneurs.models import *\n-from conteneurs.forms import ConteneurAcconageForm\n+from conteneurs.forms import ConteneurAcconageForm,ConteneurISO20Form\n from django.contrib import messages\n from django.shortcuts import render, get_object_or_404, redirect\n from django.views.generic.edit import FormView\n from django.forms import modelformset_factory\n"
                },
                {
                    "date": 1734427247476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,16 +67,12 @@\n \n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n     dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n \n-    # Vérifie le type_conteneur du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        # Utilise un autre formulaire pour ISO 20 Pieds\n-        FormClass = ConteneurISO20Form\n-    else:\n-        # Formulaire par défaut\n-        FormClass = ConteneurAcconageForm\n-\n+    \n+    FormClass = ConteneurISO20Form\n+   \n+      \n     if request.method == 'POST':\n         form = FormClass(request.POST, request.FILES, instance=conteneur)\n         if form.is_valid():\n             conteneur = form.save(commit=False)\n"
                },
                {
                    "date": 1734427272251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,385 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurAcconageForm,ConteneurISO20Form\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+from django.contrib.auth.models import User\n+\n+from django.db.models import Q\n+\n+class DossierAccoangeListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_Acconage/dossier_list_Acconage.html'  # Template to be created\n+    context_object_name = 'Dossier_list'\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Adds additional context for dossiers in acconage process and awaiting acconage.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        # Filter dossiers based on status for the current user\n+        context['dossier_acconage_en_cours'] = Dossier.objects.filter(\n+            agent_acconage=user,\n+            statut='ACCONAGE_FAIT'\n+        ).order_by('-Date_ajout')\n+        context['dossier_en_attente_acconage'] = Dossier.objects.filter(\n+            agent_acconage=user,\n+            statut='Aconage_en_cours'\n+        ).order_by('-Date_ajout')\n+\n+        # Check if the user is 'Responsable'\n+        if user.username == 'Responsable':\n+            # Add dossiers for 'Responsable'\n+            context['dossier_acconage_en_cours'] |= Dossier.objects.filter(\n+                statut='ACCONAGE_FAIT'\n+            ).order_by('-Date_ajout')\n+            context['dossier_en_attente_acconage'] |= Dossier.objects.filter(\n+                statut='Aconage_en_cours'\n+            ).order_by('-Date_ajout')\n+\n+        return context\n+ \n+def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n+    print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n+    print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n+\n+    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n+    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n+\n+    \n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        # Utilise un autre formulaire pour ISO 20 Pieds\n+        FormClass = ConteneurISO20Form\n+    else:\n+        # Formulaire par défaut\n+        FormClass = ConteneurAcconageForm\n+   \n+      \n+    if request.method == 'POST':\n+        form = FormClass(request.POST, request.FILES, instance=conteneur)\n+        if form.is_valid():\n+            conteneur = form.save(commit=False)\n+            conteneur.agent_acconage = request.user  # Assigne l'agent d'acconage\n+            conteneur.save()\n+            conteneur.dossier.marquer_comme_acconage_fait()\n+\n+            # Met à jour le statut du dossier si nécessaire\n+            conteneur.verifier_et_changer_statut()\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(form.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        form = FormClass(instance=conteneur)\n+\n+    return render(request, 'pages/Dossier_Acconage/conteneur_ajout.html', {\n+        'form': form,\n+        'conteneur': conteneur,\n+        'dossier_id': dossier_id\n+    })\n+\n+\n+\n+def afficher_detail_conteneur(request, conteneur_id):\n+    # Récupérer le conteneur ou renvoyer une erreur 404 s'il n'existe pas\n+    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n+    \n+    # Passer les détails du conteneur au template\n+    return render(request, 'pages/Dossier_Acconage/detail_conteneur.html', {'conteneur': conteneur})\n+\n+\n+\n+def modifier_conteneur(request, conteneur_id,dossier_id):\n+    # Récupérer l'objet conteneur en utilisant l'ID fourni, ou renvoyer une erreur 404 s'il n'existe pas\n+    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n+    \n+    if request.method == 'POST':\n+        # Si la méthode est POST, cela signifie que le formulaire est soumis\n+        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n+        if form.is_valid():\n+            form.save()\n+            messages.success(request, 'Conteneur mis à jour avec succès !')\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+    else:\n+        # Si la méthode est GET, afficher le formulaire avec les données du conteneur existant\n+        form = ConteneurAcconageForm(instance=conteneur)\n+\n+    context = {\n+        'form': form,\n+        'conteneur': conteneur,\n+        'dossier_id': dossier_id\n+\n+    }\n+    return render(request, 'pages/Dossier_Acconage/modifier_conteneur.html', context)\n+\n+\n+\n+\"\"\"def generate_dossier_aconage_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_Acconage/pdf_selection_aconage.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'Date_ajout': dossier.Date_ajout,\n+        'Date_selection': dossier.Date_selection,\n+        'Date_acconage': dossier.Date_acconage,\n+        'Date_terminer': dossier.Date_terminer,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n+    return response\n+    \n+\"\"\" \n+\n+\n+def format_date(date):\n+    if date:\n+        return date.strftime(\"%Y-%m-%d %A %H:%M\")\n+    return \"N/A\"\n+\n+ \n+import os\n+from django.conf import settings\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from reportlab.lib.pagesizes import landscape, letter\n+from reportlab.lib import colors\n+from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.units import inch\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+\n+def generate_dossier_aconage_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    # Styles\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    elements.append(Paragraph(f\"Rapport D'habillage & empotage Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M') if dossier.Date_selection else 'Non défini'}\",\n+        f\"Date d'acconage: {dossier.Date_acconage.strftime('%Y-%m-%d %H:%M') if dossier.Date_acconage else 'Non défini'}\",\n+        f\"Date de fin: {dossier.Date_terminer.strftime('%Y-%m-%d %H:%M') if dossier.Date_terminer else 'Non défini'}\",\n+\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"P.brute\", \"P.équipement\", \"P.net\", \"heating pad\", \"flexitank\", \"plomb\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            f\"{conteneur.poids_brute or 'N/A'} KG\",\n+            f\"{conteneur.poids_equipements or 'N/A'} KG\",\n+            f\"{conteneur.poids_net or 'N/A'} KG\",\n+            conteneur.numero_heating_pad or \"N/A\",\n+            conteneur.numero_flexitank or \"N/A\",\n+            conteneur.numero_plomb or \"N/A\"\n+        ])\n+\n+    table = Table(data)\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(table)\n+\n+    # Générer le PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+def soumettre_dossier_acconage(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier si tous les conteneurs du dossier ont le statut 'acconé'\n+    conteneurs = Conteneur.objects.filter(dossier=dossier)\n+\n+    if not conteneurs.exists():\n+        messages.error(request, \"Aucun conteneur n'est associé à ce dossier.\")\n+        return redirect('dossier_list_Accoange')\n+\n+    # Vérifier que tous les conteneurs ont le statut 'acconé'\n+    conteneurs_non_accones = conteneurs.exclude(statut='aconer')\n+    if conteneurs_non_accones.exists():\n+        messages.error(request, \"Tous les conteneurs doivent avoir le statut 'habillage et empotage' avant de soumettre le dossier.\")\n+        return redirect('view_conteneurs', dossier_id=dossier_id)\n+\n+    # Si le dossier a déjà été soumis (statut 'ACCONAGE_FAIT'), le soumettre\n+    if dossier.statut == 'ACCONAGE_FAIT':\n+        # Changer le statut du dossier\n+        dossier.terminer_dossier()\n+        dossier.Date_terminer = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les chefs\n+        chefs = Personnel.objects.filter(Personnel_type='chef')\n+        chefs_emails = [chef.email for chef in chefs]\n+\n+        # Ajouter les emails des chefs à la liste des destinataires\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'agent d'acconage connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_aconage_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Habillage & empotage Terminé\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a terminé Habillage & empotage, \"\n+                f\"transmis par l'agent de sélection {request.user.username}.</p>\"\n+                f\"<p>Veuillez trouver ci-joint le PDF avec les détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+\n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_Accoange')\n+\n+    \n+def retrograder_dossier (request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+        \n+    dossier.retrograder_en_selection()\n+    messages.success(request, f\"Le dossier {dossier.projet} a été rétrogradé avec succès.\")\n+    return redirect('dossier_list_Accoange')\n"
                },
                {
                    "date": 1734436264307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,17 @@\n     # Récupérer l'objet conteneur en utilisant l'ID fourni, ou renvoyer une erreur 404 s'il n'existe pas\n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n     \n     if request.method == 'POST':\n+        conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n+        dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n         # Si la méthode est POST, cela signifie que le formulaire est soumis\n+        if dossier.type_conteneur == 'ISO_20_pieds':\n+        # Utilise un autre formulaire pour ISO 20 Pieds\n+            FormClass = ConteneurISO20Form\n+        else:\n+            # Formulaire par défaut\n+            FormClass = ConteneurAcconageForm\n         form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n         if form.is_valid():\n             form.save()\n             messages.success(request, 'Conteneur mis à jour avec succès !')\n"
                },
                {
                    "date": 1734436298437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,41 +109,47 @@\n     return render(request, 'pages/Dossier_Acconage/detail_conteneur.html', {'conteneur': conteneur})\n \n \n \n-def modifier_conteneur(request, conteneur_id,dossier_id):\n+def modifier_conteneur(request, conteneur_id, dossier_id):\n     # Récupérer l'objet conteneur en utilisant l'ID fourni, ou renvoyer une erreur 404 s'il n'existe pas\n     conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-    \n+    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n+\n     if request.method == 'POST':\n-        conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-        dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n         # Si la méthode est POST, cela signifie que le formulaire est soumis\n         if dossier.type_conteneur == 'ISO_20_pieds':\n-        # Utilise un autre formulaire pour ISO 20 Pieds\n-            FormClass = ConteneurISO20Form\n+            # Utilise un autre formulaire pour ISO 20 Pieds\n+            form = ConteneurISO20Form(request.POST, request.FILES, instance=conteneur)\n         else:\n-            # Formulaire par défaut\n-            FormClass = ConteneurAcconageForm\n-        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n+            # Formulaire par défaut pour d'autres types\n+            form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n+\n         if form.is_valid():\n             form.save()\n             messages.success(request, 'Conteneur mis à jour avec succès !')\n             return redirect('view_conteneurs', dossier_id=dossier_id)\n+\n     else:\n         # Si la méthode est GET, afficher le formulaire avec les données du conteneur existant\n-        form = ConteneurAcconageForm(instance=conteneur)\n+        if dossier.type_conteneur == 'ISO_20_pieds':\n+            # Utilise un autre formulaire pour ISO 20 Pieds\n+            form = ConteneurISO20Form(instance=conteneur)\n+        else:\n+            # Formulaire par défaut pour d'autres types\n+            form = ConteneurAcconageForm(instance=conteneur)\n \n     context = {\n         'form': form,\n         'conteneur': conteneur,\n         'dossier_id': dossier_id\n+    }\n \n-    }\n     return render(request, 'pages/Dossier_Acconage/modifier_conteneur.html', context)\n \n \n \n+\n \"\"\"def generate_dossier_aconage_pdf(request, dossier_id):\n     dossier = Dossier.objects.get(id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n"
                },
                {
                    "date": 1734437810347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,403 +260,39 @@\n         elements.append(Spacer(1, 0.05*inch))\n \n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"P.brute\", \"P.équipement\", \"P.net\", \"heating pad\", \"flexitank\", \"plomb\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            f\"{conteneur.poids_brute or 'N/A'} KG\",\n-            f\"{conteneur.poids_equipements or 'N/A'} KG\",\n-            f\"{conteneur.poids_net or 'N/A'} KG\",\n-            conteneur.numero_heating_pad or \"N/A\",\n-            conteneur.numero_flexitank or \"N/A\",\n-            conteneur.numero_plomb or \"N/A\"\n-        ])\n-\n-    table = Table(data)\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(table)\n-\n-    # Générer le PDF\n-    doc.build(elements)\n-\n-    return response\n-\n-\n-def soumettre_dossier_acconage(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier si tous les conteneurs du dossier ont le statut 'acconé'\n-    conteneurs = Conteneur.objects.filter(dossier=dossier)\n-\n-    if not conteneurs.exists():\n-        messages.error(request, \"Aucun conteneur n'est associé à ce dossier.\")\n-        return redirect('dossier_list_Accoange')\n-\n-    # Vérifier que tous les conteneurs ont le statut 'acconé'\n-    conteneurs_non_accones = conteneurs.exclude(statut='aconer')\n-    if conteneurs_non_accones.exists():\n-        messages.error(request, \"Tous les conteneurs doivent avoir le statut 'habillage et empotage' avant de soumettre le dossier.\")\n-        return redirect('view_conteneurs', dossier_id=dossier_id)\n-\n-    # Si le dossier a déjà été soumis (statut 'ACCONAGE_FAIT'), le soumettre\n-    if dossier.statut == 'ACCONAGE_FAIT':\n-        # Changer le statut du dossier\n-        dossier.terminer_dossier()\n-        dossier.Date_terminer = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les chefs\n-        chefs = Personnel.objects.filter(Personnel_type='chef')\n-        chefs_emails = [chef.email for chef in chefs]\n-\n-        # Ajouter les emails des chefs à la liste des destinataires\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'agent d'acconage connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_aconage_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Habillage & empotage Terminé\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a terminé Habillage & empotage, \"\n-                f\"transmis par l'agent de sélection {request.user.username}.</p>\"\n-                f\"<p>Veuillez trouver ci-joint le PDF avec les détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-\n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    # Tableau des conteneurs en fonction du type de conteneur\n+    if dossier.type_conteneur == 'iso_tank_20':\n+        # Tableau spécifique pour le type 'iso_tank_20'\n+        data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"heating pad\", \"plomb\", \"numero_plomb2\", \"numero_plomb3\"]]\n+        for i, conteneur in enumerate(conteneurs, start=1):\n+            data.append([\n+                i,\n+                conteneur.reference or \"N/A\",\n+                conteneur.etat or \"N/A\",\n+                f\"{conteneur.poids_net or 'N/A'} KG\",\n+                conteneur.numero_heating_pad or \"N/A\",\n+                conteneur.numero_plomb or \"N/A\",\n+                conteneur.numero_plomb2 or \"N/A\",  # Nouvelle colonne pour numero_plomb2\n+                conteneur.numero_plomb3 or \"N/A\"   # Nouvelle colonne pour numero_plomb3\n+            ])\n     else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+        # Tableau par défaut pour d'autres types de conteneurs\n+        data = [[\"N°\", \"Réf\", \"État\", \"P.brute\", \"P.équipement\", \"P.net\", \"heating pad\", \"flexitank\", \"plomb\"]]\n+        for i, conteneur in enumerate(conteneurs, start=1):\n+            data.append([\n+                i,\n+                conteneur.reference or \"N/A\",\n+                conteneur.etat or \"N/A\",\n+                f\"{conteneur.poids_brute or 'N/A'} KG\",\n+                f\"{conteneur.poids_equipements or 'N/A'} KG\",\n+                f\"{conteneur.poids_net or 'N/A'} KG\",\n+                conteneur.numero_heating_pad or \"N/A\",\n+                conteneur.numero_flexitank or \"N/A\",\n+                conteneur.numero_plomb or \"N/A\"\n+            ])\n \n-    # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_Accoange')\n-\n-    \n-def retrograder_dossier (request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-        \n-    dossier.retrograder_en_selection()\n-    messages.success(request, f\"Le dossier {dossier.projet} a été rétrogradé avec succès.\")\n-    return redirect('dossier_list_Accoange')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurAcconageForm,ConteneurISO20Form\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-from django.contrib.auth.models import User\n-\n-from django.db.models import Q\n-\n-class DossierAccoangeListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_Acconage/dossier_list_Acconage.html'  # Template to be created\n-    context_object_name = 'Dossier_list'\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Adds additional context for dossiers in acconage process and awaiting acconage.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        # Filter dossiers based on status for the current user\n-        context['dossier_acconage_en_cours'] = Dossier.objects.filter(\n-            agent_acconage=user,\n-            statut='ACCONAGE_FAIT'\n-        ).order_by('-Date_ajout')\n-        context['dossier_en_attente_acconage'] = Dossier.objects.filter(\n-            agent_acconage=user,\n-            statut='Aconage_en_cours'\n-        ).order_by('-Date_ajout')\n-\n-        # Check if the user is 'Responsable'\n-        if user.username == 'Responsable':\n-            # Add dossiers for 'Responsable'\n-            context['dossier_acconage_en_cours'] |= Dossier.objects.filter(\n-                statut='ACCONAGE_FAIT'\n-            ).order_by('-Date_ajout')\n-            context['dossier_en_attente_acconage'] |= Dossier.objects.filter(\n-                statut='Aconage_en_cours'\n-            ).order_by('-Date_ajout')\n-\n-        return context\n- \n-def manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n-    print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n-    print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n-\n-    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n-\n-    \n-    FormClass = ConteneurISO20Form\n-   \n-      \n-    if request.method == 'POST':\n-        form = FormClass(request.POST, request.FILES, instance=conteneur)\n-        if form.is_valid():\n-            conteneur = form.save(commit=False)\n-            conteneur.agent_acconage = request.user  # Assigne l'agent d'acconage\n-            conteneur.save()\n-            conteneur.dossier.marquer_comme_acconage_fait()\n-\n-            # Met à jour le statut du dossier si nécessaire\n-            conteneur.verifier_et_changer_statut()\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(form.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        form = FormClass(instance=conteneur)\n-\n-    return render(request, 'pages/Dossier_Acconage/conteneur_ajout.html', {\n-        'form': form,\n-        'conteneur': conteneur,\n-        'dossier_id': dossier_id\n-    })\n-\n-\n-\n-def afficher_detail_conteneur(request, conteneur_id):\n-    # Récupérer le conteneur ou renvoyer une erreur 404 s'il n'existe pas\n-    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-    \n-    # Passer les détails du conteneur au template\n-    return render(request, 'pages/Dossier_Acconage/detail_conteneur.html', {'conteneur': conteneur})\n-\n-\n-\n-def modifier_conteneur(request, conteneur_id,dossier_id):\n-    # Récupérer l'objet conteneur en utilisant l'ID fourni, ou renvoyer une erreur 404 s'il n'existe pas\n-    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n-    \n-    if request.method == 'POST':\n-        # Si la méthode est POST, cela signifie que le formulaire est soumis\n-        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n-        if form.is_valid():\n-            form.save()\n-            messages.success(request, 'Conteneur mis à jour avec succès !')\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-    else:\n-        # Si la méthode est GET, afficher le formulaire avec les données du conteneur existant\n-        form = ConteneurAcconageForm(instance=conteneur)\n-\n-    context = {\n-        'form': form,\n-        'conteneur': conteneur,\n-        'dossier_id': dossier_id\n-\n-    }\n-    return render(request, 'pages/Dossier_Acconage/modifier_conteneur.html', context)\n-\n-\n-\n-\"\"\"def generate_dossier_aconage_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_Acconage/pdf_selection_aconage.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'Date_ajout': dossier.Date_ajout,\n-        'Date_selection': dossier.Date_selection,\n-        'Date_acconage': dossier.Date_acconage,\n-        'Date_terminer': dossier.Date_terminer,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n-    return response\n-    \n-\"\"\" \n-\n-\n-def format_date(date):\n-    if date:\n-        return date.strftime(\"%Y-%m-%d %A %H:%M\")\n-    return \"N/A\"\n-\n- \n-import os\n-from django.conf import settings\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from reportlab.lib.pagesizes import landscape, letter\n-from reportlab.lib import colors\n-from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.units import inch\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-\n-def generate_dossier_aconage_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    # Styles\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    # Contenu du document\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport D'habillage & empotage Du Dossier: {dossier.projet}\", title_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M') if dossier.Date_selection else 'Non défini'}\",\n-        f\"Date d'acconage: {dossier.Date_acconage.strftime('%Y-%m-%d %H:%M') if dossier.Date_acconage else 'Non défini'}\",\n-        f\"Date de fin: {dossier.Date_terminer.strftime('%Y-%m-%d %H:%M') if dossier.Date_terminer else 'Non défini'}\",\n-\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"P.brute\", \"P.équipement\", \"P.net\", \"heating pad\", \"flexitank\", \"plomb\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            f\"{conteneur.poids_brute or 'N/A'} KG\",\n-            f\"{conteneur.poids_equipements or 'N/A'} KG\",\n-            f\"{conteneur.poids_net or 'N/A'} KG\",\n-            conteneur.numero_heating_pad or \"N/A\",\n-            conteneur.numero_flexitank or \"N/A\",\n-            conteneur.numero_plomb or \"N/A\"\n-        ])\n-\n     table = Table(data)\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734437971335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n \n     elements.append(Spacer(1, 0.2*inch))\n \n     # Tableau des conteneurs en fonction du type de conteneur\n-    if dossier.type_conteneur == 'iso_tank_20':\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         # Tableau spécifique pour le type 'iso_tank_20'\n         data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"heating pad\", \"plomb\", \"numero_plomb2\", \"numero_plomb3\"]]\n         for i, conteneur in enumerate(conteneurs, start=1):\n             data.append([\n"
                },
                {
                    "date": 1734438031743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n \n     # Tableau des conteneurs en fonction du type de conteneur\n     if dossier.type_conteneur == 'ISO_20_pieds':\n         # Tableau spécifique pour le type 'iso_tank_20'\n-        data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"heating pad\", \"plomb\", \"numero_plomb2\", \"numero_plomb3\"]]\n+        data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"heating pad\", \"N°plomb 1\", \"N°plomb 2\", \"N°plomb 3\"]]\n         for i, conteneur in enumerate(conteneurs, start=1):\n             data.append([\n                 i,\n                 conteneur.reference or \"N/A\",\n"
                },
                {
                    "date": 1734438051371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,8 @@\n                 i,\n                 conteneur.reference or \"N/A\",\n                 conteneur.etat or \"N/A\",\n                 f\"{conteneur.poids_net or 'N/A'} KG\",\n-                conteneur.numero_heating_pad or \"N/A\",\n                 conteneur.numero_plomb or \"N/A\",\n                 conteneur.numero_plomb2 or \"N/A\",  # Nouvelle colonne pour numero_plomb2\n                 conteneur.numero_plomb3 or \"N/A\"   # Nouvelle colonne pour numero_plomb3\n             ])\n"
                },
                {
                    "date": 1734438080380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n \n     # Tableau des conteneurs en fonction du type de conteneur\n     if dossier.type_conteneur == 'ISO_20_pieds':\n         # Tableau spécifique pour le type 'iso_tank_20'\n-        data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"heating pad\", \"N°plomb 1\", \"N°plomb 2\", \"N°plomb 3\"]]\n+        data = [[\"N°\", \"Réf\", \"État\", \"P.net\", \"N°plomb 1\", \"N°plomb 2\", \"N°plomb 3\"]]\n         for i, conteneur in enumerate(conteneurs, start=1):\n             data.append([\n                 i,\n                 conteneur.reference or \"N/A\",\n"
                },
                {
                    "date": 1734438233786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,17 +349,17 @@\n \n         # Ajouter les emails des chefs à la liste des destinataires\n         emails += chefs_emails\n \n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n+        # # Emails à mettre en copie (CC)\n+        # cc_emails = [\n+        #     'alice.tuo@oils-of-africa.ci',\n+        #     'appro.stock@oils-of-africa.ci',\n+        #     'fitting.loadingassistance1@oils-of-africa.ci',\n+        #     'ops@africa-newportlogistics.ci',\n+        #     'import.export@africa-newportlogistics.ci',\n+        #     'stagiaireoils@gmail.com'\n+        # ]\n \n         # Utiliser l'email de l'agent d'acconage connecté comme expéditeur\n         from_email = request.user.email\n \n@@ -382,9 +382,9 @@\n                 f\"</html>\"\n             ),\n             from_email=from_email,\n             to=emails,\n-            cc=cc_emails\n+            # cc=cc_emails\n         )\n \n         # Joindre le PDF\n         email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n"
                },
                {
                    "date": 1734438340456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,10 +230,16 @@\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport D'habillage & empotage Du Dossier: {dossier.projet}\", title_style))\n+ # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        title_text = f\"Rapport d'habillage & des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n     elements.append(Spacer(1, 0.1*inch))\n \n     info_text = [\n         f\"Client: {dossier.client}\",\n"
                },
                {
                    "date": 1734438359373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n     elements.append(Spacer(1, 0.2*inch))\n \n  # Titre et informations du dossier\n     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        title_text = f\"Rapport d'habillage & des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+        title_text = f\"Rapport  D'habillage & empotage Du Dossier TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n     elements.append(Paragraph(title_text, title_style))\n"
                },
                {
                    "date": 1734438399982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n     elements.append(Spacer(1, 0.2*inch))\n \n  # Titre et informations du dossier\n     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        title_text = f\"Rapport  D'habillage & empotage Du Dossier TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+        title_text = f\"Rapport empotage Du Dossier des ISOTANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n     elements.append(Paragraph(title_text, title_style))\n"
                },
                {
                    "date": 1734438425741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n     elements.append(Spacer(1, 0.2*inch))\n \n  # Titre et informations du dossier\n     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        title_text = f\"Rapport empotage Du Dossier des ISOTANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+        title_text = f\"Rapport empotage des ISOTANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n     elements.append(Paragraph(title_text, title_style))\n"
                },
                {
                    "date": 1734438521876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,10 +256,12 @@\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M') if dossier.Date_selection else 'Non défini'}\",\n         f\"Date d'acconage: {dossier.Date_acconage.strftime('%Y-%m-%d %H:%M') if dossier.Date_acconage else 'Non défini'}\",\n         f\"Date de fin: {dossier.Date_terminer.strftime('%Y-%m-%d %H:%M') if dossier.Date_terminer else 'Non défini'}\",\n-\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+        if dossier.type_conteneur == 'ISO_20_pieds': \n+            f\"Nombre de iso tanks: {conteneurs.count()}\"\n+        else:\n+            f\"Nombre de conteneurs: {conteneurs.count()}\"\n     ]\n \n     for line in info_text:\n         elements.append(Paragraph(line, normal_style))\n"
                },
                {
                    "date": 1734438564311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,8 @@\n \n     elements.append(Paragraph(title_text, title_style))\n \n     elements.append(Spacer(1, 0.1*inch))\n-\n     info_text = [\n         f\"Client: {dossier.client}\",\n         f\"TRD: {dossier.TRD}\",\n         f\"BOOKING: {dossier.booking}\",\n@@ -256,14 +255,19 @@\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M') if dossier.Date_selection else 'Non défini'}\",\n         f\"Date d'acconage: {dossier.Date_acconage.strftime('%Y-%m-%d %H:%M') if dossier.Date_acconage else 'Non défini'}\",\n         f\"Date de fin: {dossier.Date_terminer.strftime('%Y-%m-%d %H:%M') if dossier.Date_terminer else 'Non défini'}\",\n-        if dossier.type_conteneur == 'ISO_20_pieds': \n-            f\"Nombre de iso tanks: {conteneurs.count()}\"\n-        else:\n-            f\"Nombre de conteneurs: {conteneurs.count()}\"\n     ]\n \n+    # Add a conditional check for the type of container\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        info_text.append(f\"Nombre d'iso tanks: {conteneurs.count()}\")\n+    else:\n+        info_text.append(f\"Nombre de conteneurs: {conteneurs.count()}\")\n+\n+# You can now continue with the rest of your code to generate the PDF content.\n+\n+\n     for line in info_text:\n         elements.append(Paragraph(line, normal_style))\n         elements.append(Spacer(1, 0.05*inch))\n \n"
                }
            ],
            "date": 1734425563695,
            "name": "Commit-0",
            "content": "#from django.http import HttpRequest, HttpResponseRedirect\nfrom django.db import IntegrityError\nfrom django.views.generic import ListView, CreateView,UpdateView,DeleteView\nfrom conteneurs.models import *\nfrom conteneurs.forms import ConteneurAcconageForm\nfrom django.contrib import messages\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views.generic.edit import FormView\nfrom django.forms import modelformset_factory\nfrom django.urls import reverse_lazy\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.utils import timezone\nfrom io import BytesIO\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\nfrom django.core.mail import EmailMessage\nfrom django.template.loader import render_to_string\nfrom django.conf import settings\n\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\nfrom weasyprint import HTML\nfrom django.templatetags.static import static\n\nfrom django.contrib.auth.models import User\n\nfrom django.db.models import Q\n\nclass DossierAccoangeListView(LoginRequiredMixin, ListView):\n    model = Dossier\n    template_name = 'pages/Dossier_Acconage/dossier_list_Acconage.html'  # Template to be created\n    context_object_name = 'Dossier_list'\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Adds additional context for dossiers in acconage process and awaiting acconage.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        user = self.request.user\n\n        # Filter dossiers based on status for the current user\n        context['dossier_acconage_en_cours'] = Dossier.objects.filter(\n            agent_acconage=user,\n            statut='ACCONAGE_FAIT'\n        ).order_by('-Date_ajout')\n        context['dossier_en_attente_acconage'] = Dossier.objects.filter(\n            agent_acconage=user,\n            statut='Aconage_en_cours'\n        ).order_by('-Date_ajout')\n\n        # Check if the user is 'Responsable'\n        if user.username == 'Responsable':\n            # Add dossiers for 'Responsable'\n            context['dossier_acconage_en_cours'] |= Dossier.objects.filter(\n                statut='ACCONAGE_FAIT'\n            ).order_by('-Date_ajout')\n            context['dossier_en_attente_acconage'] |= Dossier.objects.filter(\n                statut='Aconage_en_cours'\n            ).order_by('-Date_ajout')\n\n        return context\n\ndef manage_conteneurs_acconage(request, dossier_id, conteneur_id):\n    print(f\"dossier_id: {dossier_id}\")  # Instruction de débogage\n    print(f\"conteneur_id: {conteneur_id}\")  # Instruction de débogage\n\n    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n    dossier = conteneur.dossier  # Récupère le dossier associé au conteneur\n\n    # Vérifie le type_conteneur du dossier\n    if dossier.type_conteneur == 'ISO_20_pieds':\n        # Utilise un autre formulaire pour ISO 20 Pieds\n        FormClass = ConteneurISO20Form\n    else:\n        # Formulaire par défaut\n        FormClass = ConteneurAcconageForm\n\n    if request.method == 'POST':\n        form = FormClass(request.POST, request.FILES, instance=conteneur)\n        if form.is_valid():\n            conteneur = form.save(commit=False)\n            conteneur.agent_acconage = request.user  # Assigne l'agent d'acconage\n            conteneur.save()\n            conteneur.dossier.marquer_comme_acconage_fait()\n\n            # Met à jour le statut du dossier si nécessaire\n            conteneur.verifier_et_changer_statut()\n            return redirect('view_conteneurs', dossier_id=dossier_id)\n        else:\n            print(form.errors)  # Affiche les erreurs de validation pour le débogage\n    else:\n        form = FormClass(instance=conteneur)\n\n    return render(request, 'pages/Dossier_Acconage/conteneur_ajout.html', {\n        'form': form,\n        'conteneur': conteneur,\n        'dossier_id': dossier_id\n    })\nossier_id': dossier_id\n    })\n\n\n\ndef afficher_detail_conteneur(request, conteneur_id):\n    # Récupérer le conteneur ou renvoyer une erreur 404 s'il n'existe pas\n    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n    \n    # Passer les détails du conteneur au template\n    return render(request, 'pages/Dossier_Acconage/detail_conteneur.html', {'conteneur': conteneur})\n\n\n\ndef modifier_conteneur(request, conteneur_id,dossier_id):\n    # Récupérer l'objet conteneur en utilisant l'ID fourni, ou renvoyer une erreur 404 s'il n'existe pas\n    conteneur = get_object_or_404(Conteneur, id=conteneur_id)\n    \n    if request.method == 'POST':\n        # Si la méthode est POST, cela signifie que le formulaire est soumis\n        form = ConteneurAcconageForm(request.POST, request.FILES, instance=conteneur)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Conteneur mis à jour avec succès !')\n            return redirect('view_conteneurs', dossier_id=dossier_id)\n    else:\n        # Si la méthode est GET, afficher le formulaire avec les données du conteneur existant\n        form = ConteneurAcconageForm(instance=conteneur)\n\n    context = {\n        'form': form,\n        'conteneur': conteneur,\n        'dossier_id': dossier_id\n\n    }\n    return render(request, 'pages/Dossier_Acconage/modifier_conteneur.html', context)\n\n\n\n\"\"\"def generate_dossier_aconage_pdf(request, dossier_id):\n    dossier = Dossier.objects.get(id=dossier_id)\n    conteneurs = dossier.conteneurs.all()\n\n    # URL absolue du logo\n    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n\n    # Charger le template HTML\n    template = get_template('pages/Dossier_Acconage/pdf_selection_aconage.html')\n    html_content = template.render({\n        'projet': dossier.projet,\n        'client': dossier.client,\n        'TRD': dossier.TRD,\n        'compagnie_maritime': dossier.compagnie_maritime,\n        'port_de_dechargement': dossier.port_de_dechargement,\n        'port_de_chargement': dossier.port_de_chargement,\n        'commodite': dossier.commodite,\n        'conteneurs': conteneurs,\n        'site': dossier.site,\n        'Site_empotage': dossier.Site_empotage,\n        'agent_selection': dossier.agent_selection,\n        'agent_acconage': dossier.agent_acconage,\n        'Date_ajout': dossier.Date_ajout,\n        'Date_selection': dossier.Date_selection,\n        'Date_acconage': dossier.Date_acconage,\n        'Date_terminer': dossier.Date_terminer,\n        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n    })\n\n    # Convertir en PDF\n    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n\n    # Retourner le fichier PDF en réponse HTTP\n    response = HttpResponse(pdf_file, content_type='application/pdf')\n    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n    return response\n    \n\"\"\" \n\n\ndef format_date(date):\n    if date:\n        return date.strftime(\"%Y-%m-%d %A %H:%M\")\n    return \"N/A\"\n\n \nimport os\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\nfrom reportlab.lib.pagesizes import landscape, letter\nfrom reportlab.lib import colors\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.lib.units import inch\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.utils import ImageReader\n\ndef generate_dossier_aconage_pdf(request, dossier_id):\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n    conteneurs = dossier.conteneurs.all()\n\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = f'attachment; filename=\"Rapport habillage & empotage {dossier.projet}.pdf\"'\n\n    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n\n    # Styles\n    styles = getSampleStyleSheet()\n    title_style = styles['Heading1']\n    normal_style = styles['Normal']\n\n    # Contenu du document\n    elements = []\n\n    # Logo\n    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n    elements.append(Spacer(1, 0.2*inch))\n\n    # Titre et informations du dossier\n    elements.append(Paragraph(f\"Rapport D'habillage & empotage Du Dossier: {dossier.projet}\", title_style))\n    elements.append(Spacer(1, 0.1*inch))\n\n    info_text = [\n        f\"Client: {dossier.client}\",\n        f\"TRD: {dossier.TRD}\",\n        f\"BOOKING: {dossier.booking}\",\n        f\"Site de sélection: {dossier.site}\",\n        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n        f\"POD: {dossier.port_de_dechargement}\",\n        f\"POL: {dossier.port_de_chargement}\",\n        f\"Commodité: {dossier.commodite}\",\n        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M') if dossier.Date_selection else 'Non défini'}\",\n        f\"Date d'acconage: {dossier.Date_acconage.strftime('%Y-%m-%d %H:%M') if dossier.Date_acconage else 'Non défini'}\",\n        f\"Date de fin: {dossier.Date_terminer.strftime('%Y-%m-%d %H:%M') if dossier.Date_terminer else 'Non défini'}\",\n\n        f\"Nombre de conteneurs: {conteneurs.count()}\"\n    ]\n\n    for line in info_text:\n        elements.append(Paragraph(line, normal_style))\n        elements.append(Spacer(1, 0.05*inch))\n\n    elements.append(Spacer(1, 0.2*inch))\n\n    # Tableau des conteneurs\n    data = [[\"N°\", \"Réf\", \"État\", \"P.brute\", \"P.équipement\", \"P.net\", \"heating pad\", \"flexitank\", \"plomb\"]]\n    for i, conteneur in enumerate(conteneurs, start=1):\n        data.append([\n            i,\n            conteneur.reference or \"N/A\",\n            conteneur.etat or \"N/A\",\n            f\"{conteneur.poids_brute or 'N/A'} KG\",\n            f\"{conteneur.poids_equipements or 'N/A'} KG\",\n            f\"{conteneur.poids_net or 'N/A'} KG\",\n            conteneur.numero_heating_pad or \"N/A\",\n            conteneur.numero_flexitank or \"N/A\",\n            conteneur.numero_plomb or \"N/A\"\n        ])\n\n    table = Table(data)\n    table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, 0), 12),\n        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n    ]))\n\n    elements.append(table)\n\n    # Générer le PDF\n    doc.build(elements)\n\n    return response\n\n\ndef soumettre_dossier_acconage(request, dossier_id):\n    # Récupérer le dossier\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n\n    # Vérifier si tous les conteneurs du dossier ont le statut 'acconé'\n    conteneurs = Conteneur.objects.filter(dossier=dossier)\n\n    if not conteneurs.exists():\n        messages.error(request, \"Aucun conteneur n'est associé à ce dossier.\")\n        return redirect('dossier_list_Accoange')\n\n    # Vérifier que tous les conteneurs ont le statut 'acconé'\n    conteneurs_non_accones = conteneurs.exclude(statut='aconer')\n    if conteneurs_non_accones.exists():\n        messages.error(request, \"Tous les conteneurs doivent avoir le statut 'habillage et empotage' avant de soumettre le dossier.\")\n        return redirect('view_conteneurs', dossier_id=dossier_id)\n\n    # Si le dossier a déjà été soumis (statut 'ACCONAGE_FAIT'), le soumettre\n    if dossier.statut == 'ACCONAGE_FAIT':\n        # Changer le statut du dossier\n        dossier.terminer_dossier()\n        dossier.Date_terminer = timezone.now()\n        dossier.save()\n\n        # Récupérer les emails des personnes concernées\n        emails = []\n        if dossier.agent_acconage:\n            emails.append(dossier.agent_acconage.email)\n        if dossier.secretaire:\n            emails.append(dossier.secretaire.email)\n\n        # Récupérer les emails de tous les chefs\n        chefs = Personnel.objects.filter(Personnel_type='chef')\n        chefs_emails = [chef.email for chef in chefs]\n\n        # Ajouter les emails des chefs à la liste des destinataires\n        emails += chefs_emails\n\n        # Emails à mettre en copie (CC)\n        cc_emails = [\n            'alice.tuo@oils-of-africa.ci',\n            'appro.stock@oils-of-africa.ci',\n            'fitting.loadingassistance1@oils-of-africa.ci',\n            'ops@africa-newportlogistics.ci',\n            'import.export@africa-newportlogistics.ci',\n            'stagiaireoils@gmail.com'\n        ]\n\n        # Utiliser l'email de l'agent d'acconage connecté comme expéditeur\n        from_email = request.user.email\n\n        # Générer le PDF\n        pdf_response = generate_dossier_aconage_pdf(request, dossier_id)\n        pdf_content = pdf_response.content\n\n        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n        email = EmailMultiAlternatives(\n            subject=f\"Dossier {dossier.projet} - Habillage & empotage Terminé\",\n            body=(\n                f\"<html>\"\n                f\"<body>\"\n                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a terminé Habillage & empotage, \"\n                f\"transmis par l'agent de sélection {request.user.username}.</p>\"\n                f\"<p>Veuillez trouver ci-joint le PDF avec les détails du dossier et des conteneurs.</p>\"\n                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n                f\"</body>\"\n                f\"</html>\"\n            ),\n            from_email=from_email,\n            to=emails,\n            cc=cc_emails\n        )\n\n        # Joindre le PDF\n        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n\n        # Indiquer que l'email est en HTML\n        email.content_subtype = 'html'\n\n        # Envoyer l'email\n        try:\n            email.send()\n            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès.\")\n        except Exception as e:\n            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n    else:\n        # Si le dossier n'est pas dans le bon état, afficher une erreur\n        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n\n    # Redirection vers la liste des dossiers\n    return redirect('dossier_list_Accoange')\n\n    \ndef retrograder_dossier (request, dossier_id):\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n        \n    dossier.retrograder_en_selection()\n    messages.success(request, f\"Le dossier {dossier.projet} a été rétrogradé avec succès.\")\n    return redirect('dossier_list_Accoange')\n"
        }
    ]
}