{
    "sourceFile": "conteneurs/views/dossier_selection.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 98,
            "patches": [
                {
                    "date": 1734390365379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734392360526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #from django.http import HttpRequest, HttpResponseRedirect\n from django.db import IntegrityError\n from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from conteneurs.forms import *\n from django.contrib import messages\n from django.shortcuts import render, get_object_or_404, redirect\n from django.views.generic.edit import FormView\n from django.forms import modelformset_factory\n@@ -102,9 +102,44 @@\n         'dossier': dossier\n     })\n \n \n+def manage_conteneursIso(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n \n+    ConteneurFormSet = modelformset_factory(\n+        IsoTanks,\n+        form=,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n     model = Conteneur\n     form_class = ConteneurForm\n     template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n"
                },
                {
                    "date": 1734392453587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,15 +107,15 @@\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n     ConteneurFormSet = modelformset_factory(\n         IsoTanks,\n-        form=,\n+        form=IsoTankForm,\n         extra=1,\n         can_delete=True\n     )\n \n     if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=IsoTanks.objects.filter(dossier=dossier))\n         if formset.is_valid():\n             conteneurs = formset.save(commit=False)\n             for form in formset.deleted_forms:\n                 if form.instance.pk:\n@@ -129,9 +129,9 @@\n         else:\n             print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n     else:\n         # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+        formset = ConteneurFormSet(queryset=IsoTanks.objects.none())\n \n \n     return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n         'formset': formset,\n"
                },
                {
                    "date": 1734392539559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n         formset = ConteneurFormSet(queryset=IsoTanks.objects.none())\n \n \n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+    return render(request, 'pages/Dossier_selection/conteneur_create_iso.html', {\n         'formset': formset,\n         'dossier': dossier\n     })\n \n"
                },
                {
                    "date": 1734393175430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,33 +105,33 @@\n \n def manage_conteneursIso(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n-    ConteneurFormSet = modelformset_factory(\n+    iSOFormSet = modelformset_factory(\n         IsoTanks,\n         form=IsoTankForm,\n         extra=1,\n         can_delete=True\n     )\n \n     if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=IsoTanks.objects.filter(dossier=dossier))\n+        formset = iSOFormSet(request.POST, request.FILES, queryset=IsoTanks.objects.filter(dossier=dossier))\n         if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n+            Isotanks = formset.save(commit=False)\n             for form in formset.deleted_forms:\n                 if form.instance.pk:\n                     form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n+            for IsoTank in Isotanks:\n+                IsoTank.dossier = dossier\n+                IsoTank.agent_selection = request.user\n+                IsoTank.save()\n             dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n             return redirect('view_conteneurs', dossier_id=dossier_id)\n         else:\n             print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n     else:\n         # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=IsoTanks.objects.none())\n+        formset = iSOFormSet(queryset=IsoTanks.objects.none())\n \n \n     return render(request, 'pages/Dossier_selection/conteneur_create_iso.html', {\n         'formset': formset,\n"
                },
                {
                    "date": 1734393366862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,18 @@\n         'conteneurs': conteneurs,\n         'dossier': dossier\n     })\n \n+def view_iso(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    iso = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n \n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': iso,\n+        'dossier': dossier\n+    })\n+\n+\n def manage_conteneurs(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n     ConteneurFormSet = modelformset_factory(\n@@ -124,9 +133,9 @@\n                 IsoTank.dossier = dossier\n                 IsoTank.agent_selection = request.user\n                 IsoTank.save()\n             dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n+            return redirect('view_iso', dossier_id=dossier_id)\n         else:\n             print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n     else:\n         # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n"
                },
                {
                    "date": 1734393503926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n def view_iso(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     iso = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n \n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+    return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n         'conteneurs': iso,\n         'dossier': dossier\n     })\n \n"
                },
                {
                    "date": 1734393926361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,354 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import *\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+def view_iso(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    iso = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n+        'iso': iso,\n+        'dossier': dossier\n+    })\n+\n+def manage_formset(request, dossier_id, model, form, template_name, redirect_view):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    FormSet = modelformset_factory(model, form=form, extra=1, can_delete=True)\n+\n+    if request.method == 'POST':\n+        formset = FormSet(request.POST, request.FILES, queryset=model.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            instances = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for instance in instances:\n+                instance.dossier = dossier\n+                instance.agent_selection = request.user\n+                instance.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect(redirect_view, dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        formset = FormSet(queryset=model.objects.none())\n+\n+    return render(request, template_name, {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+def manage_conteneurs(request, dossier_id):\n+    return manage_formset(\n+        request, dossier_id, Conteneur, ConteneurForm,\n+        'pages/Dossier_selection/conteneur_create.html', 'view_conteneurs'\n+    )\n+\n+def manage_conteneursIso(request, dossier_id):\n+    return manage_formset(\n+        request, dossier_id, IsoTanks, IsoTankForm,\n+        'pages/Dossier_selection/conteneur_create_iso.html', 'view_iso')\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+ \n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    # Styles\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"pays: {dossier.pays}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    # Centering the table in the document\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n+    elements.append(table)\n+\n+    # Générer le PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734395628438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,12 @@\n     })\n \n def view_iso(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n-    iso = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+    isos = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n \n     return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n-        'iso': iso,\n+        'isos': isos,\n         'dossier': dossier\n     })\n \n def manage_formset(request, dossier_id, model, form, template_name, redirect_view):\n@@ -350,394 +350,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import *\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-def view_iso(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    iso = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n-        'conteneurs': iso,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneursIso(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    iSOFormSet = modelformset_factory(\n-        IsoTanks,\n-        form=IsoTankForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = iSOFormSet(request.POST, request.FILES, queryset=IsoTanks.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            Isotanks = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for IsoTank in Isotanks:\n-                IsoTank.dossier = dossier\n-                IsoTank.agent_selection = request.user\n-                IsoTank.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_iso', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = iSOFormSet(queryset=IsoTanks.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create_iso.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n- \n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    # Styles\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    # Contenu du document\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"pays: {dossier.pays}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    # Centering the table in the document\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n-    elements.append(table)\n-\n-    # Générer le PDF\n-    doc.build(elements)\n-\n-    return response\n-\n-\n-\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734396352003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,12 @@\n     })\n \n def view_iso(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n-    isos = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n+    isotanks = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+    print(isotanks)\n     return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n-        'isos': isos,\n+        'isotanks': isotanks,\n         'dossier': dossier\n     })\n \n def manage_formset(request, dossier_id, model, form, template_name, redirect_view):\n"
                },
                {
                    "date": 1734396530067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,12 @@\n     })\n \n def view_iso(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n-    isotanks = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-    print(isotanks)\n+    Iso_tanks = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+    print(Iso_tanks)\n     return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n-        'isotanks': isotanks,\n+        'Iso_tanks': Iso_tanks,\n         'dossier': dossier\n     })\n \n def manage_formset(request, dossier_id, model, form, template_name, redirect_view):\n"
                },
                {
                    "date": 1734399426650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,41 @@\n     return manage_formset(\n         request, dossier_id, IsoTanks, IsoTankForm,\n         'pages/Dossier_selection/conteneur_create_iso.html', 'view_iso')\n \n+\n+class IsoUpdateView(LoginRequiredMixin, UpdateView):\n+    model = IsoTanks\n+    form_class = IsoTankForm\n+    template_name = 'pages/Dossier_selection/modifier_iso.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n+    \n+\n+class IsoDeleteView(LoginRequiredMixin, DeleteView):\n+    model = IsoTanks\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete_iso.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+    \n class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n     model = Conteneur\n     form_class = ConteneurForm\n     template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n"
                },
                {
                    "date": 1734400019098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,10 @@\n     template_name = 'pages/Dossier_selection/modifier_iso.html'\n \n     def get_success_url(self):\n         # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n+        isotank = self.object\n+        dossier_id = isotank.dossier.id\n         # Rediriger vers la vue des conteneurs du dossier\n         return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n \n     def get_object(self, queryset=None):\n"
                },
                {
                    "date": 1734401172621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,24 +129,9 @@\n     def get_object(self, queryset=None):\n         return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n     \n \n-class IsoDeleteView(LoginRequiredMixin, DeleteView):\n-    model = IsoTanks\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete_iso.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n     \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-    \n class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n     model = Conteneur\n     form_class = ConteneurForm\n     template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n"
                },
                {
                    "date": 1734401540263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,24 @@\n     def get_object(self, queryset=None):\n         return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n     \n \n+class IsoDeleteView(LoginRequiredMixin, DeleteView):\n+    model = IsoTanks\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete_iso.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n     \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+    \n class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n     model = Conteneur\n     form_class = ConteneurForm\n     template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n"
                },
                {
                    "date": 1734401788565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         # Rediriger vers la vue des conteneurs du dossier\n         return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n \n     def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+        return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n     \n     \n class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n     model = Conteneur\n"
                },
                {
                    "date": 1734427634637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,344 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+ \n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    # Styles\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    # Centering the table in the document\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n+    elements.append(table)\n+\n+    # Générer le PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734428555061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,8 +219,9 @@\n         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n         f\"POD: {dossier.port_de_dechargement}\",\n         f\"POL: {dossier.port_de_chargement}\",\n+        f\"Pays: {dossier.pays}\",\n         f\"Commodité: {dossier.commodite}\",\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Nombre de conteneurs: {conteneurs.count()}\"\n@@ -340,392 +341,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import *\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-def view_iso(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    Iso_tanks = IsoTanks.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-    print(Iso_tanks)\n-    return render(request, 'pages/Dossier_selection/view_conteneur_iso.html', {\n-        'Iso_tanks': Iso_tanks,\n-        'dossier': dossier\n-    })\n-\n-def manage_formset(request, dossier_id, model, form, template_name, redirect_view):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    FormSet = modelformset_factory(model, form=form, extra=1, can_delete=True)\n-\n-    if request.method == 'POST':\n-        formset = FormSet(request.POST, request.FILES, queryset=model.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            instances = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for instance in instances:\n-                instance.dossier = dossier\n-                instance.agent_selection = request.user\n-                instance.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect(redirect_view, dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        formset = FormSet(queryset=model.objects.none())\n-\n-    return render(request, template_name, {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-def manage_conteneurs(request, dossier_id):\n-    return manage_formset(\n-        request, dossier_id, Conteneur, ConteneurForm,\n-        'pages/Dossier_selection/conteneur_create.html', 'view_conteneurs'\n-    )\n-\n-def manage_conteneursIso(request, dossier_id):\n-    return manage_formset(\n-        request, dossier_id, IsoTanks, IsoTankForm,\n-        'pages/Dossier_selection/conteneur_create_iso.html', 'view_iso')\n-\n-\n-class IsoUpdateView(LoginRequiredMixin, UpdateView):\n-    model = IsoTanks\n-    form_class = IsoTankForm\n-    template_name = 'pages/Dossier_selection/modifier_iso.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        isotank = self.object\n-        dossier_id = isotank.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n-    \n-\n-class IsoDeleteView(LoginRequiredMixin, DeleteView):\n-    model = IsoTanks\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete_iso.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_iso', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(IsoTanks, id=self.kwargs['pk'])\n-    \n-    \n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n- \n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    # Styles\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    # Contenu du document\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"pays: {dossier.pays}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    # Centering the table in the document\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n-    elements.append(table)\n-\n-    # Générer le PDF\n-    doc.build(elements)\n-\n-    return response\n-\n-\n-\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734431046559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,8 +180,9 @@\n from django.http import HttpResponse\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n+\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n"
                },
                {
                    "date": 1734431227683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"'\n \n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n@@ -206,9 +206,9 @@\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n     # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Paragraph(f\"Rapport de selection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n     elements.append(Spacer(1, 0.1*inch))\n \n     info_text = [\n         f\"Client: {dossier.client}\",\n"
                },
                {
                    "date": 1734431352154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,89 +186,74 @@\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"'\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport_{dossier.projet}.pdf\"'\n \n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-    # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n \n-    # Contenu du document\n     elements = []\n \n     # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    logo_path = os.path.join(settings.BASE_DIR, \"static/img/logo.jpg\")\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de selection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n+    # Titre\n+    elements.append(Paragraph(f\"Rapport de sélection des Conteneurs: {dossier.projet}\", title_style))\n     elements.append(Spacer(1, 0.1*inch))\n \n+    # Informations conditionnelles\n+    if any(c.type_conteneur == \"ISO_20_pieds\" for c in conteneurs):\n+        elements.append(Paragraph(\"Ce dossier contient des conteneurs de type ISO Tanks.\", styles['Heading2']))\n+\n+    # Infos du dossier\n     info_text = [\n         f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Pays: {dossier.pays}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+        f\"Nombre total de conteneurs: {conteneurs.count()}\",\n     ]\n \n     for line in info_text:\n         elements.append(Paragraph(line, normal_style))\n         elements.append(Spacer(1, 0.05*inch))\n \n-    elements.append(Spacer(1, 0.2*inch))\n-\n     # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-        ])\n+    if conteneurs.exists():\n+        data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+        for i, conteneur in enumerate(conteneurs, start=1):\n+            type_conteneur = \"ISO Tank\" if conteneur.type_conteneur == \"ISO_20_pieds\" else \"Standard\"\n+            data.append([\n+                i,\n+                conteneur.reference or \"N/A\",\n+                conteneur.etat or \"N/A\",\n+                type_conteneur,\n+            ])\n \n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n+        table = Table(data, colWidths=[0.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])\n+        table.setStyle(TableStyle([\n+            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ]))\n \n-    # Centering the table in the document\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n-    elements.append(table)\n+        elements.append(table)\n+    else:\n+        elements.append(Paragraph(\"Aucun conteneur n'est disponible dans ce dossier.\", normal_style))\n \n     # Générer le PDF\n     doc.build(elements)\n-\n     return response\n \n \n \n+\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734431386973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n     elements.append(Paragraph(f\"Rapport de sélection des Conteneurs: {dossier.projet}\", title_style))\n     elements.append(Spacer(1, 0.1*inch))\n \n     # Informations conditionnelles\n-    if any(c.type_conteneur == \"ISO_20_pieds\" for c in conteneurs):\n+    if any(dossier.type_conteneur == \"ISO_20_pieds\" for c in conteneurs):\n         elements.append(Paragraph(\"Ce dossier contient des conteneurs de type ISO Tanks.\", styles['Heading2']))\n \n     # Infos du dossier\n     info_text = [\n"
                },
                {
                    "date": 1734431458486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n     # Tableau des conteneurs\n     if conteneurs.exists():\n         data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n         for i, conteneur in enumerate(conteneurs, start=1):\n-            type_conteneur = \"ISO Tank\" if conteneur.type_conteneur == \"ISO_20_pieds\" else \"Standard\"\n+            type_conteneur = \"ISO Tank\" if dossier.type_conteneur == \"ISO_20_pieds\" else \"Standard\"\n             data.append([\n                 i,\n                 conteneur.reference or \"N/A\",\n                 conteneur.etat or \"N/A\",\n"
                },
                {
                    "date": 1734431593456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,346 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+ \n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    # Styles\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    elements.append(Paragraph(f\"Rapport de selection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Pays: {dossier.pays}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\",\"type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    # Centering the table in the document\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n+    elements.append(table)\n+\n+    # Générer le PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734431677025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,8 +238,9 @@\n     data = [[\"N°\", \"Réf\", \"État\",\"type\"]]\n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n+            dossier.type_conteneur,\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n         ])\n \n@@ -342,336 +343,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n- \n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport_{dossier.projet}.pdf\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.BASE_DIR, \"static/img/logo.jpg\")\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre\n-    elements.append(Paragraph(f\"Rapport de sélection des Conteneurs: {dossier.projet}\", title_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    # Informations conditionnelles\n-    if any(dossier.type_conteneur == \"ISO_20_pieds\" for c in conteneurs):\n-        elements.append(Paragraph(\"Ce dossier contient des conteneurs de type ISO Tanks.\", styles['Heading2']))\n-\n-    # Infos du dossier\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"Nombre total de conteneurs: {conteneurs.count()}\",\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    # Tableau des conteneurs\n-    if conteneurs.exists():\n-        data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-        for i, conteneur in enumerate(conteneurs, start=1):\n-            type_conteneur = \"ISO Tank\" if dossier.type_conteneur == \"ISO_20_pieds\" else \"Standard\"\n-            data.append([\n-                i,\n-                conteneur.reference or \"N/A\",\n-                conteneur.etat or \"N/A\",\n-                type_conteneur,\n-            ])\n-\n-        table = Table(data, colWidths=[0.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])\n-        table.setStyle(TableStyle([\n-            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ]))\n-\n-        elements.append(table)\n-    else:\n-        elements.append(Paragraph(\"Aucun conteneur n'est disponible dans ce dossier.\", normal_style))\n-\n-    # Générer le PDF\n-    doc.build(elements)\n-    return response\n-\n-\n-\n-\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734431829374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,11 +238,12 @@\n     data = [[\"N°\", \"Réf\", \"État\",\"type\"]]\n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n-            dossier.type_conteneur,\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n+            dossier.type_conteneur,\n+\n         ])\n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n     table.setStyle(TableStyle([\n"
                },
                {
                    "date": 1734432233913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n-            dossier.type_conteneur,\n+            dossier.get_type_conteneur,\n \n         ])\n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n"
                },
                {
                    "date": 1734432374554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur,\n+            dossier.get_type_conteneur_display,\n \n         ])\n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n"
                },
                {
                    "date": 1734432528465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,13 @@\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"'\n+    \n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Si le type de conteneur est ISO\n+        filename = f\"Rapport_de_selection_des_ISO_TANKS_Du_Dossier_{dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport_de_selection_des_Conteneurs_Du_Dossier_{dossier.projet}.pdf\"\n \n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n"
                },
                {
                    "date": 1734432565957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,13 +187,8 @@\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n     \n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Si le type de conteneur est ISO\n-        filename = f\"Rapport_de_selection_des_ISO_TANKS_Du_Dossier_{dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport_de_selection_des_Conteneurs_Du_Dossier_{dossier.projet}.pdf\"\n-\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n"
                },
                {
                    "date": 1734432579974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n from django.http import HttpResponse\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n-\n+from urllib.parse import quote\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n"
                },
                {
                    "date": 1734432601039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,19 @@\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n-    response = HttpResponse(content_type='application/pdf')\n+        # Définir un nom de fichier en fonction de la condition\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Si le type de conteneur est ISO\n+        filename = f\"Rapport_de_selection_des_ISO_TANKS_Du_Dossier_{dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport_de_selection_des_Conteneurs_Du_Dossier_{dossier.projet}.pdf\"\n+\n+# Encoder le nom de fichier pour éviter les erreurs\n+filename_encoded = quote(filename)\n+\n+# Ajouter le Content-Disposition\n+response['Content-Disposition'] = f'attachment; filename=\"{filename_encoded}\"\n     \n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n"
                },
                {
                    "date": 1734432666956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,19 +185,9 @@\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n-        # Définir un nom de fichier en fonction de la condition\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Si le type de conteneur est ISO\n-        filename = f\"Rapport_de_selection_des_ISO_TANKS_Du_Dossier_{dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport_de_selection_des_Conteneurs_Du_Dossier_{dossier.projet}.pdf\"\n-\n-# Encoder le nom de fichier pour éviter les erreurs\n-filename_encoded = quote(filename)\n-\n-# Ajouter le Content-Disposition\n-response['Content-Disposition'] = f'attachment; filename=\"{filename_encoded}\"\n+    response = HttpResponse(content_type='application/pdf')\n     \n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n"
                },
                {
                    "date": 1734432835964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,95 +181,12 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n \n-    response = HttpResponse(content_type='application/pdf')\n-    \n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-    # Styles\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n \n-    # Contenu du document\n-    elements = []\n \n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de selection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Pays: {dossier.pays}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\",\"type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display,\n-\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    # Centering the table in the document\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n-    elements.append(table)\n-\n-    # Générer le PDF\n-    doc.build(elements)\n-\n-    return response\n-\n-\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734433119269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,357 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+ \n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+from urllib.parse import quote\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    # Encodage pour éviter les erreurs avec des navigateurs\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    # Configuration du PDF\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    # Styles\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    elements.append(Paragraph(f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Pays: {dossier.pays}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    # Ajout du tableau au document\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    # Génération du PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734433339913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,15 @@\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n     # Titre et informations du dossier\n-    elements.append(Paragraph(f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}\", title_style))\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n     elements.append(Spacer(1, 0.1*inch))\n \n     info_text = [\n         f\"Client: {dossier.client}\",\n@@ -230,9 +236,8 @@\n         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n         f\"POD: {dossier.port_de_dechargement}\",\n         f\"POL: {dossier.port_de_chargement}\",\n-        f\"Pays: {dossier.pays}\",\n         f\"Commodité: {dossier.commodite}\",\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Nombre de conteneurs: {conteneurs.count()}\"\n@@ -353,269 +358,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n- \n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-from urllib.parse import quote\n-\n-\n-\n-\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734439566561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,88 +181,76 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n+def generate_dossier_pdf(request, dossier_id):\n+    # Color mapping for different countries\n+    COUNTRY_COLORS = {\n+        'France': colors.blue,\n+        'United States': colors.red,\n+        'Germany': colors.green,\n+        'China': colors.yellow,\n+        'Brazil': colors.orange,\n+        'India': colors.purple,\n+        # Add more countries and their corresponding colors as needed\n+        'default': colors.grey\n+    }\n \n-def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n-\n     response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    \n+    # Filename logic remains the same\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n     else:\n         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    # Encodage pour éviter les erreurs avec des navigateurs\n+    \n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n+    \n     # Configuration du PDF\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n+    \n     # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n-\n+    \n     # Contenu du document\n     elements = []\n-\n+    \n     # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    \n+    # Select color based on country\n+    country_color = COUNTRY_COLORS.get(dossier.pays, COUNTRY_COLORS['default'])\n+    \n+    # Titre et informations du dossier avec couleur du pays\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n+    \n+    # Create a custom title style with the country-specific color\n+    custom_title_style = ParagraphStyle(\n+        'CountryTitle',\n+        parent=title_style,\n+        textColor=country_color\n+    )\n+    \n+    elements.append(Paragraph(title_text, custom_title_style))\n     elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n+    \n+    # Rest of the code remains the same...\n+    \n+    # Modify table style to use country color\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('BACKGROUND', (0, 0), (-1, 0), country_color),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n@@ -270,21 +258,19 @@\n         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n-\n+    \n     # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n     elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n-\n+    \n     # Génération du PDF\n     doc.build(elements)\n-\n     return response\n \n \n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734439589107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,76 +181,88 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n+\n def generate_dossier_pdf(request, dossier_id):\n-    # Color mapping for different countries\n-    COUNTRY_COLORS = {\n-        'France': colors.blue,\n-        'United States': colors.red,\n-        'Germany': colors.green,\n-        'China': colors.yellow,\n-        'Brazil': colors.orange,\n-        'India': colors.purple,\n-        # Add more countries and their corresponding colors as needed\n-        'default': colors.grey\n-    }\n-\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n+\n     response = HttpResponse(content_type='application/pdf')\n-    \n-    # Filename logic remains the same\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n     else:\n         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-    \n+\n+    # Encodage pour éviter les erreurs avec des navigateurs\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-    \n+\n     # Configuration du PDF\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-    \n+\n     # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n-    \n+\n     # Contenu du document\n     elements = []\n-    \n+\n     # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n-    \n-    # Select color based on country\n-    country_color = COUNTRY_COLORS.get(dossier.pays, COUNTRY_COLORS['default'])\n-    \n-    # Titre et informations du dossier avec couleur du pays\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-    \n-    # Create a custom title style with the country-specific color\n-    custom_title_style = ParagraphStyle(\n-        'CountryTitle',\n-        parent=title_style,\n-        textColor=country_color\n-    )\n-    \n-    elements.append(Paragraph(title_text, custom_title_style))\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n     elements.append(Spacer(1, 0.1*inch))\n-    \n-    # Rest of the code remains the same...\n-    \n-    # Modify table style to use country color\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), country_color),\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n@@ -258,19 +270,21 @@\n         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n-    \n+\n     # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n     elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n-    \n+\n     # Génération du PDF\n     doc.build(elements)\n+\n     return response\n \n \n+\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734439654804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,86 +183,75 @@\n from django.conf import settings\n from urllib.parse import quote\n \n def generate_dossier_pdf(request, dossier_id):\n+    # Color mapping for different countries\n+    COUNTRY_COLORS = {\n+        'France': colors.blue,\n+        'United States': colors.red,\n+        'Germany': colors.green,\n+        'China': colors.yellow,\n+        'Brazil': colors.orange,\n+        'India': colors.purple,\n+        # Add more countries and their corresponding colors as needed\n+        'default': colors.grey\n+    }\n+\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n-\n     response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    \n+    # Filename logic remains the same\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n     else:\n         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    # Encodage pour éviter les erreurs avec des navigateurs\n+    \n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n+    \n     # Configuration du PDF\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n+    \n     # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n-\n+    \n     # Contenu du document\n     elements = []\n-\n+    \n     # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    \n+    # Select color based on country\n+    country_color = COUNTRY_COLORS.get(dossier.pays, COUNTRY_COLORS['default'])\n+    \n+    # Titre et informations du dossier avec couleur du pays\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n+    \n+    # Create a custom title style with the country-specific color\n+    custom_title_style = ParagraphStyle(\n+        'CountryTitle',\n+        parent=title_style,\n+        textColor=country_color\n+    )\n+    \n+    elements.append(Paragraph(title_text, custom_title_style))\n     elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n+    \n+    # Rest of the code remains the same...\n+    \n+    # Modify table style to use country color\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('BACKGROUND', (0, 0), (-1, 0), country_color),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n@@ -270,21 +259,19 @@\n         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n-\n+    \n     # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n     elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n-\n+    \n     # Génération du PDF\n     doc.build(elements)\n-\n     return response\n \n \n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734439708540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     response = HttpResponse(pdf_file, content_type='application/pdf')\n     response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n     return response\n \"\"\"\n- \n+from reportlab.lib.styles import ParagraphStyle\n from reportlab.lib import colors\n from reportlab.lib.units import inch\n from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n from reportlab.lib.styles import getSampleStyleSheet\n"
                },
                {
                    "date": 1734439719868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     \n     # Rest of the code remains the same...\n     \n     # Modify table style to use country color\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table = Table( colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), country_color),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n"
                },
                {
                    "date": 1734439747415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n \n def generate_dossier_pdf(request, dossier_id):\n     # Color mapping for different countries\n     COUNTRY_COLORS = {\n-        'France': colors.blue,\n+        'Côte d\\'Ivoire': colors.blue,\n         'United States': colors.red,\n         'Germany': colors.green,\n         'China': colors.yellow,\n         'Brazil': colors.orange,\n"
                },
                {
                    "date": 1734439761293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n def generate_dossier_pdf(request, dossier_id):\n     # Color mapping for different countries\n     COUNTRY_COLORS = {\n         'Côte d\\'Ivoire': colors.blue,\n-        'United States': colors.red,\n+        'Gabon': colors.red,\n         'Germany': colors.green,\n         'China': colors.yellow,\n         'Brazil': colors.orange,\n         'India': colors.purple,\n"
                },
                {
                    "date": 1734439812519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     response = HttpResponse(pdf_file, content_type='application/pdf')\n     response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n     return response\n \"\"\"\n-from reportlab.lib.styles import ParagraphStyle\n+ \n from reportlab.lib import colors\n from reportlab.lib.units import inch\n from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n from reportlab.lib.styles import getSampleStyleSheet\n@@ -183,75 +183,86 @@\n from django.conf import settings\n from urllib.parse import quote\n \n def generate_dossier_pdf(request, dossier_id):\n-    # Color mapping for different countries\n-    COUNTRY_COLORS = {\n-        'Côte d\\'Ivoire': colors.blue,\n-        'Gabon': colors.red,\n-        'Germany': colors.green,\n-        'China': colors.yellow,\n-        'Brazil': colors.orange,\n-        'India': colors.purple,\n-        # Add more countries and their corresponding colors as needed\n-        'default': colors.grey\n-    }\n-\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n+\n     response = HttpResponse(content_type='application/pdf')\n-    \n-    # Filename logic remains the same\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n     else:\n         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-    \n+\n+    # Encodage pour éviter les erreurs avec des navigateurs\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-    \n+\n     # Configuration du PDF\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-    \n+\n     # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n-    \n+\n     # Contenu du document\n     elements = []\n-    \n+\n     # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n-    \n-    # Select color based on country\n-    country_color = COUNTRY_COLORS.get(dossier.pays, COUNTRY_COLORS['default'])\n-    \n-    # Titre et informations du dossier avec couleur du pays\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-    \n-    # Create a custom title style with the country-specific color\n-    custom_title_style = ParagraphStyle(\n-        'CountryTitle',\n-        parent=title_style,\n-        textColor=country_color\n-    )\n-    \n-    elements.append(Paragraph(title_text, custom_title_style))\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n     elements.append(Spacer(1, 0.1*inch))\n-    \n-    # Rest of the code remains the same...\n-    \n-    # Modify table style to use country color\n-    table = Table( colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), country_color),\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n@@ -259,19 +270,21 @@\n         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n-    \n+\n     # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n     elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n-    \n+\n     # Génération du PDF\n     doc.build(elements)\n+\n     return response\n \n \n+\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734596841297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,52 +181,86 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n+from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n+from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from urllib.parse import quote\n+import os\n \n def generate_dossier_pdf(request, dossier_id):\n+    \"\"\"\n+    Génère un rapport PDF pour un dossier spécifique.\n+    \n+    Args:\n+        request: La requête HTTP\n+        dossier_id: L'identifiant du dossier\n+    \n+    Returns:\n+        HttpResponse: Le fichier PDF généré\n+    \"\"\"\n+    # --- Récupération des données ---\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n+    # --- Configuration de la réponse HTTP ---\n     response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    # Encodage pour éviter les erreurs avec des navigateurs\n+    filename = _generate_filename(dossier)\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # Configuration du PDF\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+    # --- Configuration du document PDF ---\n+    doc = SimpleDocTemplate(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.5*inch,\n+        leftMargin=0.5*inch,\n+        topMargin=0.5*inch,\n+        bottomMargin=0.5*inch\n+    )\n \n-    # Styles\n+    # --- Génération du contenu ---\n+    elements = []\n     styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n+    \n+    # Ajout du logo\n+    _add_logo(elements, styles['Normal'])\n+    \n+    # Ajout du titre et des informations\n+    _add_header_info(elements, dossier, styles)\n+    \n+    # Ajout du tableau des conteneurs\n+    _add_containers_table(elements, conteneurs, dossier)\n \n-    # Contenu du document\n-    elements = []\n+    # --- Génération finale du PDF ---\n+    doc.build(elements)\n+    return response\n \n-    # Logo\n+def _generate_filename(dossier):\n+    \"\"\"Génère le nom du fichier en fonction du type de conteneur.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"Ajoute le logo au document.\"\"\"\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n+def _add_header_info(elements, dossier, styles):\n+    \"\"\"Ajoute le titre et les informations du dossier.\"\"\"\n+    # Titre\n+    title_text = _generate_title(dossier)\n+    elements.append(Paragraph(title_text, styles['Heading1']))\n     elements.append(Spacer(1, 0.1*inch))\n \n+    # Informations du dossier\n     info_text = [\n         f\"Client: {dossier.client}\",\n         f\"TRD: {dossier.TRD}\",\n         f\"BOOKING: {dossier.booking}\",\n@@ -239,19 +273,27 @@\n         f\"POL: {dossier.port_de_chargement}\",\n         f\"Commodité: {dossier.commodite}\",\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n     ]\n \n     for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n+        elements.append(Paragraph(line, styles['Normal']))\n         elements.append(Spacer(1, 0.05*inch))\n-\n+    \n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Tableau des conteneurs\n+def _generate_title(dossier):\n+    \"\"\"Génère le titre du rapport en fonction du type de conteneur.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    return f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+def _add_containers_table(elements, conteneurs, dossier):\n+    \"\"\"Ajoute le tableau des conteneurs au document.\"\"\"\n     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    \n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n@@ -271,20 +313,12 @@\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n-    # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(Paragraph('<br/>', styles['Normal']))\n     elements.append(table)\n \n-    # Génération du PDF\n-    doc.build(elements)\n-\n-    return response\n-\n-\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734596977927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n     elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', styles['Normal']))\n+    elements.append(Paragraph('<br/>', ['Normal']))\n     elements.append(table)\n \n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n"
                },
                {
                    "date": 1734597088204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,86 +181,52 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from urllib.parse import quote\n-import os\n \n def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"\n-    Génère un rapport PDF pour un dossier spécifique.\n-    \n-    Args:\n-        request: La requête HTTP\n-        dossier_id: L'identifiant du dossier\n-    \n-    Returns:\n-        HttpResponse: Le fichier PDF généré\n-    \"\"\"\n-    # --- Récupération des données ---\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n-    # --- Configuration de la réponse HTTP ---\n     response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    # Encodage pour éviter les erreurs avec des navigateurs\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # --- Configuration du document PDF ---\n-    doc = SimpleDocTemplate(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.5*inch,\n-        leftMargin=0.5*inch,\n-        topMargin=0.5*inch,\n-        bottomMargin=0.5*inch\n-    )\n+    # Configuration du PDF\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-    # --- Génération du contenu ---\n-    elements = []\n+    # Styles\n     styles = getSampleStyleSheet()\n-    \n-    # Ajout du logo\n-    _add_logo(elements, styles['Normal'])\n-    \n-    # Ajout du titre et des informations\n-    _add_header_info(elements, dossier, styles)\n-    \n-    # Ajout du tableau des conteneurs\n-    _add_containers_table(elements, conteneurs, dossier)\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n \n-    # --- Génération finale du PDF ---\n-    doc.build(elements)\n-    return response\n+    # Contenu du document\n+    elements = []\n \n-def _generate_filename(dossier):\n-    \"\"\"Génère le nom du fichier en fonction du type de conteneur.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-def _add_logo(elements, normal_style):\n-    \"\"\"Ajoute le logo au document.\"\"\"\n+    # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n-def _add_header_info(elements, dossier, styles):\n-    \"\"\"Ajoute le titre et les informations du dossier.\"\"\"\n-    # Titre\n-    title_text = _generate_title(dossier)\n-    elements.append(Paragraph(title_text, styles['Heading1']))\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n     elements.append(Spacer(1, 0.1*inch))\n \n-    # Informations du dossier\n     info_text = [\n         f\"Client: {dossier.client}\",\n         f\"TRD: {dossier.TRD}\",\n         f\"BOOKING: {dossier.booking}\",\n@@ -273,27 +239,19 @@\n         f\"POL: {dossier.port_de_chargement}\",\n         f\"Commodité: {dossier.commodite}\",\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n     ]\n \n     for line in info_text:\n-        elements.append(Paragraph(line, styles['Normal']))\n+        elements.append(Paragraph(line, normal_style))\n         elements.append(Spacer(1, 0.05*inch))\n-    \n+\n     elements.append(Spacer(1, 0.2*inch))\n \n-def _generate_title(dossier):\n-    \"\"\"Génère le titre du rapport en fonction du type de conteneur.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    return f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-def _add_containers_table(elements, conteneurs, dossier):\n-    \"\"\"Ajoute le tableau des conteneurs au document.\"\"\"\n+    # Tableau des conteneurs\n     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    \n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n@@ -313,12 +271,20 @@\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n+    # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', ['Normal']))\n+    elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n \n+    # Génération du PDF\n+    doc.build(elements)\n+\n+    return response\n+\n+\n+\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734597226259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,88 +170,167 @@\n     response = HttpResponse(pdf_file, content_type='application/pdf')\n     response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n     return response\n \"\"\"\n- \n+\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n+from urllib.parse import quote\n import os\n-from django.conf import settings\n-from urllib.parse import quote\n \n def generate_dossier_pdf(request, dossier_id):\n+    \"\"\"\n+    Génère un rapport PDF pour un dossier spécifique.\n+    \n+    Args:\n+        request: La requête HTTP\n+        dossier_id: L'identifiant du dossier\n+    \n+    Returns:\n+        HttpResponse: Le fichier PDF généré\n+    \"\"\"\n+    # --- Récupération des données ---\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n+    # --- Configuration de la réponse HTTP ---\n     response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    # Encodage pour éviter les erreurs avec des navigateurs\n+    filename = _generate_filename(dossier)\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # Configuration du PDF\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+    # --- Configuration du document PDF ---\n+    doc = SimpleDocTemplate(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.5*inch,\n+        leftMargin=0.5*inch,\n+        topMargin=0.5*inch,\n+        bottomMargin=0.5*inch\n+    )\n \n-    # Styles\n+    # --- Génération du contenu ---\n+    elements = []\n     styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n+    \n+    # Création d'un style pour les sous-titres\n+    subtitle_style = ParagraphStyle(\n+        'SubTitle',\n+        parent=styles['Heading2'],\n+        fontSize=12,\n+        textColor=colors.grey,\n+        spaceAfter=6\n+    )\n+    \n+    # Ajout du logo\n+    _add_logo(elements, styles['Normal'])\n+    \n+    # Ajout du titre et des informations\n+    _add_header_info(elements, dossier, styles, subtitle_style)\n+    \n+    # Ajout du tableau des conteneurs\n+    _add_containers_table(elements, conteneurs, dossier, styles['Normal'])\n \n-    # Contenu du document\n-    elements = []\n+    # --- Génération finale du PDF ---\n+    doc.build(elements)\n+    return response\n \n-    # Logo\n+def _generate_filename(dossier):\n+    \"\"\"Génère le nom du fichier en fonction du type de conteneur.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"Ajoute le logo au document.\"\"\"\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+def _add_header_info(elements, dossier, styles, subtitle_style):\n+    \"\"\"Ajoute le titre et les informations catégorisées du dossier.\"\"\"\n+    # Titre principal\n+    title_text = _generate_title(dossier)\n+    elements.append(Paragraph(title_text, styles['Heading1']))\n+    elements.append(Spacer(1, 0.2*inch))\n \n-    elements.append(Paragraph(title_text, title_style))\n+    # Informations du Projet\n+    elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n+    project_info = [\n+        f\"Projet: {dossier.projet}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"Booking: {dossier.booking}\",\n+        f\"Client: {dossier.client}\"\n+    ]\n+    _add_info_section(elements, project_info, styles['Normal'])\n \n-    elements.append(Spacer(1, 0.1*inch))\n+    # Détails des Conteneurs\n+    elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n+    container_info = [\n+        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n+    ]\n+    _add_info_section(elements, container_info, styles['Normal'])\n \n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n+    # Localisation\n+    elements.append(Paragraph(\"Localisation\", subtitle_style))\n+    location_info = [\n         f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n+    ]\n+    _add_info_section(elements, location_info, styles['Normal'])\n+\n+    # Informations Maritimes\n+    elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n+    maritime_info = [\n         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n+        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n+        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n+    ]\n+    _add_info_section(elements, maritime_info, styles['Normal'])\n+\n+    # Agents et Clients\n+    elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n+    agent_info = [\n+        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n+        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n+    ]\n+    _add_info_section(elements, agent_info, styles['Normal'])\n+\n+    # Dates Importantes\n+    elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n+    date_info = [\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n     ]\n+    _add_info_section(elements, date_info, styles['Normal'])\n \n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n+def _add_info_section(elements, info_list, style):\n+    \"\"\"Ajoute une section d'informations avec l'espacement approprié.\"\"\"\n+    for line in info_list:\n+        elements.append(Paragraph(line, style))\n         elements.append(Spacer(1, 0.05*inch))\n+    elements.append(Spacer(1, 0.1*inch))\n \n-    elements.append(Spacer(1, 0.2*inch))\n+def _generate_title(dossier):\n+    \"\"\"Génère le titre du rapport en fonction du type de conteneur.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    return f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n-    # Tableau des conteneurs\n+def _add_containers_table(elements, conteneurs, dossier, normal_style):\n+    \"\"\"Ajoute le tableau des conteneurs au document.\"\"\"\n+    elements.append(Paragraph(\"Liste des Conteneurs\", normal_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    \n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n@@ -271,11 +350,8 @@\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n-    # Ajout du tableau au document\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n \n     # Génération du PDF\n     doc.build(elements)\n"
                },
                {
                    "date": 1734597248655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -352,15 +352,11 @@\n     ]))\n \n     elements.append(table)\n \n-    # Génération du PDF\n-    doc.build(elements)\n+ \n \n-    return response\n \n-\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734597427614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,99 +238,183 @@\n     # --- Génération finale du PDF ---\n     doc.build(elements)\n     return response\n \n-def _generate_filename(dossier):\n-    \"\"\"Génère le nom du fichier en fonction du type de conteneur.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n+from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n+from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.platypus.frames import Frame\n+from reportlab.platypus.doctemplate import PageTemplate\n+from urllib.parse import quote\n+import os\n \n-def _add_logo(elements, normal_style):\n-    \"\"\"Ajoute le logo au document.\"\"\"\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n+class TwoColumnTemplate(PageTemplate):\n+    def __init__(self, parent):\n+        page_width = parent.pagesize[0]\n+        page_height = parent.pagesize[1]\n+        left_margin = right_margin = 0.5*inch\n+        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n+        \n+        # Définition des frames (colonnes)\n+        frame1 = Frame(\n+            left_margin, \n+            inch,\n+            column_width,\n+            page_height - 2*inch,\n+            id='col1'\n+        )\n+        frame2 = Frame(\n+            left_margin + column_width + 0.5*inch,\n+            inch,\n+            column_width,\n+            page_height - 2*inch,\n+            id='col2'\n+        )\n+        \n+        frames = [frame1, frame2]\n+        PageTemplate.__init__(self, 'TwoColumn', frames=frames)\n \n-def _add_header_info(elements, dossier, styles, subtitle_style):\n-    \"\"\"Ajoute le titre et les informations catégorisées du dossier.\"\"\"\n-    # Titre principal\n+def generate_dossier_pdf(request, dossier_id):\n+    \"\"\"\n+    Génère un rapport PDF pour un dossier spécifique avec layout en deux colonnes.\n+    \"\"\"\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    filename = _generate_filename(dossier)\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    # Configuration du document\n+    doc = SimpleDocTemplate(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.5*inch,\n+        leftMargin=0.5*inch,\n+        topMargin=0.5*inch,\n+        bottomMargin=0.5*inch\n+    )\n+    \n+    # Ajout du template personnalisé\n+    doc.addPageTemplates(TwoColumnTemplate(doc))\n+\n+    styles = getSampleStyleSheet()\n+    subtitle_style = ParagraphStyle(\n+        'SubTitle',\n+        parent=styles['Heading2'],\n+        fontSize=12,\n+        textColor=colors.grey,\n+        spaceAfter=6\n+    )\n+\n+    # Création des éléments pour la colonne de gauche\n+    left_elements = []\n+    \n+    # En-tête (logo et titre)\n+    _add_logo(left_elements, styles['Normal'])\n     title_text = _generate_title(dossier)\n-    elements.append(Paragraph(title_text, styles['Heading1']))\n-    elements.append(Spacer(1, 0.2*inch))\n+    left_elements.append(Paragraph(title_text, styles['Heading1']))\n+    left_elements.append(Spacer(1, 0.2*inch))\n \n     # Informations du Projet\n-    elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n+    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n     project_info = [\n         f\"Projet: {dossier.projet}\",\n         f\"TRD: {dossier.TRD}\",\n         f\"Booking: {dossier.booking}\",\n         f\"Client: {dossier.client}\"\n     ]\n-    _add_info_section(elements, project_info, styles['Normal'])\n+    _add_info_section(left_elements, project_info, styles['Normal'])\n \n     # Détails des Conteneurs\n-    elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n+    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n     container_info = [\n         f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n         f\"Commodité: {dossier.commodite}\",\n         f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n     ]\n-    _add_info_section(elements, container_info, styles['Normal'])\n+    _add_info_section(left_elements, container_info, styles['Normal'])\n \n     # Localisation\n-    elements.append(Paragraph(\"Localisation\", subtitle_style))\n+    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n     location_info = [\n         f\"Site de sélection: {dossier.site}\",\n         f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n     ]\n-    _add_info_section(elements, location_info, styles['Normal'])\n+    _add_info_section(left_elements, location_info, styles['Normal'])\n \n+    # Création des éléments pour la colonne de droite\n+    right_elements = []\n+\n     # Informations Maritimes\n-    elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n+    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n     maritime_info = [\n         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n         f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n         f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n     ]\n-    _add_info_section(elements, maritime_info, styles['Normal'])\n+    _add_info_section(right_elements, maritime_info, styles['Normal'])\n \n     # Agents et Clients\n-    elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n+    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n     agent_info = [\n         f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n         f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n     ]\n-    _add_info_section(elements, agent_info, styles['Normal'])\n+    _add_info_section(right_elements, agent_info, styles['Normal'])\n \n     # Dates Importantes\n-    elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n+    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n     date_info = [\n         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n     ]\n-    _add_info_section(elements, date_info, styles['Normal'])\n+    _add_info_section(right_elements, date_info, styles['Normal'])\n \n+    # Table des conteneurs (sur toute la largeur en bas)\n+    table_elements = []\n+    _add_containers_table(table_elements, conteneurs, dossier, styles['Normal'])\n+\n+    # Combinaison de tous les éléments\n+    elements = []\n+    elements.extend(left_elements)\n+    elements.extend(right_elements)\n+    elements.extend(table_elements)\n+\n+    # Génération du PDF\n+    doc.build(elements)\n+    return response\n+\n+def _generate_filename(dossier):\n+    \"\"\"Génère le nom du fichier.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"Ajoute le logo.\"\"\"\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n def _add_info_section(elements, info_list, style):\n-    \"\"\"Ajoute une section d'informations avec l'espacement approprié.\"\"\"\n+    \"\"\"Ajoute une section d'informations.\"\"\"\n     for line in info_list:\n         elements.append(Paragraph(line, style))\n         elements.append(Spacer(1, 0.05*inch))\n     elements.append(Spacer(1, 0.1*inch))\n \n-def _generate_title(dossier):\n-    \"\"\"Génère le titre du rapport en fonction du type de conteneur.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    return f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n def _add_containers_table(elements, conteneurs, dossier, normal_style):\n-    \"\"\"Ajoute le tableau des conteneurs au document.\"\"\"\n+    \"\"\"Ajoute le tableau des conteneurs.\"\"\"\n     elements.append(Paragraph(\"Liste des Conteneurs\", normal_style))\n     elements.append(Spacer(1, 0.1*inch))\n \n     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    \n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n             i,\n             conteneur.reference or \"N/A\",\n@@ -352,11 +436,9 @@\n     ]))\n \n     elements.append(table)\n \n- \n \n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734597523142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,274 +171,120 @@\n     response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n     return response\n \"\"\"\n \n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from urllib.parse import quote\n-import os\n+# from reportlab.lib import colors\n+# from reportlab.lib.units import inch\n+# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+# from reportlab.lib.styles import getSampleStyleSheet\n+# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+# from django.http import HttpResponse\n+# from django.shortcuts import get_object_or_404\n+# import os\n+# from django.conf import settings\n+# from urllib.parse import quote\n \n-def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"\n-    Génère un rapport PDF pour un dossier spécifique.\n-    \n-    Args:\n-        request: La requête HTTP\n-        dossier_id: L'identifiant du dossier\n-    \n-    Returns:\n-        HttpResponse: Le fichier PDF généré\n-    \"\"\"\n-    # --- Récupération des données ---\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n+# def generate_dossier_pdf(request, dossier_id):\n+#     dossier = get_object_or_404(Dossier, id=dossier_id)\n+#     conteneurs = dossier.conteneurs.all()\n \n-    # --- Configuration de la réponse HTTP ---\n-    response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+#     response = HttpResponse(content_type='application/pdf')\n \n-    # --- Configuration du document PDF ---\n-    doc = SimpleDocTemplate(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.5*inch,\n-        leftMargin=0.5*inch,\n-        topMargin=0.5*inch,\n-        bottomMargin=0.5*inch\n-    )\n+#     # Condition pour le nom du fichier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+#     else:\n+#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n \n-    # --- Génération du contenu ---\n-    elements = []\n-    styles = getSampleStyleSheet()\n-    \n-    # Création d'un style pour les sous-titres\n-    subtitle_style = ParagraphStyle(\n-        'SubTitle',\n-        parent=styles['Heading2'],\n-        fontSize=12,\n-        textColor=colors.grey,\n-        spaceAfter=6\n-    )\n-    \n-    # Ajout du logo\n-    _add_logo(elements, styles['Normal'])\n-    \n-    # Ajout du titre et des informations\n-    _add_header_info(elements, dossier, styles, subtitle_style)\n-    \n-    # Ajout du tableau des conteneurs\n-    _add_containers_table(elements, conteneurs, dossier, styles['Normal'])\n+#     # Encodage pour éviter les erreurs avec des navigateurs\n+#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # --- Génération finale du PDF ---\n-    doc.build(elements)\n-    return response\n+#     # Configuration du PDF\n+#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n+#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.platypus.frames import Frame\n-from reportlab.platypus.doctemplate import PageTemplate\n-from urllib.parse import quote\n-import os\n+#     # Styles\n+#     styles = getSampleStyleSheet()\n+#     title_style = styles['Heading1']\n+#     normal_style = styles['Normal']\n \n-class TwoColumnTemplate(PageTemplate):\n-    def __init__(self, parent):\n-        page_width = parent.pagesize[0]\n-        page_height = parent.pagesize[1]\n-        left_margin = right_margin = 0.5*inch\n-        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n-        \n-        # Définition des frames (colonnes)\n-        frame1 = Frame(\n-            left_margin, \n-            inch,\n-            column_width,\n-            page_height - 2*inch,\n-            id='col1'\n-        )\n-        frame2 = Frame(\n-            left_margin + column_width + 0.5*inch,\n-            inch,\n-            column_width,\n-            page_height - 2*inch,\n-            id='col2'\n-        )\n-        \n-        frames = [frame1, frame2]\n-        PageTemplate.__init__(self, 'TwoColumn', frames=frames)\n+#     # Contenu du document\n+#     elements = []\n \n-def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"\n-    Génère un rapport PDF pour un dossier spécifique avec layout en deux colonnes.\n-    \"\"\"\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n+#     # Logo\n+#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+#     elements.append(Spacer(1, 0.2*inch))\n \n-    response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+#     # Titre et informations du dossier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+#     else:\n+#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n-    # Configuration du document\n-    doc = SimpleDocTemplate(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.5*inch,\n-        leftMargin=0.5*inch,\n-        topMargin=0.5*inch,\n-        bottomMargin=0.5*inch\n-    )\n-    \n-    # Ajout du template personnalisé\n-    doc.addPageTemplates(TwoColumnTemplate(doc))\n+#     elements.append(Paragraph(title_text, title_style))\n \n-    styles = getSampleStyleSheet()\n-    subtitle_style = ParagraphStyle(\n-        'SubTitle',\n-        parent=styles['Heading2'],\n-        fontSize=12,\n-        textColor=colors.grey,\n-        spaceAfter=6\n-    )\n+#     elements.append(Spacer(1, 0.1*inch))\n \n-    # Création des éléments pour la colonne de gauche\n-    left_elements = []\n-    \n-    # En-tête (logo et titre)\n-    _add_logo(left_elements, styles['Normal'])\n-    title_text = _generate_title(dossier)\n-    left_elements.append(Paragraph(title_text, styles['Heading1']))\n-    left_elements.append(Spacer(1, 0.2*inch))\n+#     info_text = [\n+#         f\"Client: {dossier.client}\",\n+#         f\"TRD: {dossier.TRD}\",\n+#         f\"BOOKING: {dossier.booking}\",\n+#         f\"Site de sélection: {dossier.site}\",\n+#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+#         f\"POD: {dossier.port_de_dechargement}\",\n+#         f\"POL: {dossier.port_de_chargement}\",\n+#         f\"Commodité: {dossier.commodite}\",\n+#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n+#     ]\n \n-    # Informations du Projet\n-    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n-    project_info = [\n-        f\"Projet: {dossier.projet}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"Booking: {dossier.booking}\",\n-        f\"Client: {dossier.client}\"\n-    ]\n-    _add_info_section(left_elements, project_info, styles['Normal'])\n+#     for line in info_text:\n+#         elements.append(Paragraph(line, normal_style))\n+#         elements.append(Spacer(1, 0.05*inch))\n \n-    # Détails des Conteneurs\n-    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n-    container_info = [\n-        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n-    ]\n-    _add_info_section(left_elements, container_info, styles['Normal'])\n+#     elements.append(Spacer(1, 0.2*inch))\n \n-    # Localisation\n-    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n-    location_info = [\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n-    ]\n-    _add_info_section(left_elements, location_info, styles['Normal'])\n+#     # Tableau des conteneurs\n+#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+#     for i, conteneur in enumerate(conteneurs, start=1):\n+#         data.append([\n+#             i,\n+#             conteneur.reference or \"N/A\",\n+#             conteneur.etat or \"N/A\",\n+#             dossier.get_type_conteneur_display()\n+#         ])\n \n-    # Création des éléments pour la colonne de droite\n-    right_elements = []\n+#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+#     table.setStyle(TableStyle([\n+#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n+#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+#     ]))\n \n-    # Informations Maritimes\n-    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n-    maritime_info = [\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n-        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n-    ]\n-    _add_info_section(right_elements, maritime_info, styles['Normal'])\n+#     # Ajout du tableau au document\n+#     elements.append(Spacer(1, 0.2*inch))\n+#     elements.append(Paragraph('<br/>', normal_style))\n+#     elements.append(table)\n \n-    # Agents et Clients\n-    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n-    agent_info = [\n-        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n-        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n-    ]\n-    _add_info_section(right_elements, agent_info, styles['Normal'])\n+#     # Génération du PDF\n+#     doc.build(elements)\n \n-    # Dates Importantes\n-    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n-    date_info = [\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n-    ]\n-    _add_info_section(right_elements, date_info, styles['Normal'])\n+#     return response\n \n-    # Table des conteneurs (sur toute la largeur en bas)\n-    table_elements = []\n-    _add_containers_table(table_elements, conteneurs, dossier, styles['Normal'])\n \n-    # Combinaison de tous les éléments\n-    elements = []\n-    elements.extend(left_elements)\n-    elements.extend(right_elements)\n-    elements.extend(table_elements)\n \n-    # Génération du PDF\n-    doc.build(elements)\n-    return response\n-\n-def _generate_filename(dossier):\n-    \"\"\"Génère le nom du fichier.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-def _add_logo(elements, normal_style):\n-    \"\"\"Ajoute le logo.\"\"\"\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-def _add_info_section(elements, info_list, style):\n-    \"\"\"Ajoute une section d'informations.\"\"\"\n-    for line in info_list:\n-        elements.append(Paragraph(line, style))\n-        elements.append(Spacer(1, 0.05*inch))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-def _add_containers_table(elements, conteneurs, dossier, normal_style):\n-    \"\"\"Ajoute le tableau des conteneurs.\"\"\"\n-    elements.append(Paragraph(\"Liste des Conteneurs\", normal_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(table)\n-\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734597535375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,10 +281,206 @@\n #     doc.build(elements)\n \n #     return response\n \n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n+from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n+from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.platypus.frames import Frame\n+from reportlab.platypus.doctemplate import PageTemplate\n+from urllib.parse import quote\n+import os\n \n+class TwoColumnTemplate(PageTemplate):\n+    def __init__(self, parent):\n+        page_width = parent.pagesize[0]\n+        page_height = parent.pagesize[1]\n+        left_margin = right_margin = 0.5*inch\n+        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n+        \n+        # Définition des frames (colonnes)\n+        frame1 = Frame(\n+            left_margin, \n+            inch,\n+            column_width,\n+            page_height - 2*inch,\n+            id='col1'\n+        )\n+        frame2 = Frame(\n+            left_margin + column_width + 0.5*inch,\n+            inch,\n+            column_width,\n+            page_height - 2*inch,\n+            id='col2'\n+        )\n+        \n+        frames = [frame1, frame2]\n+        PageTemplate.__init__(self, 'TwoColumn', frames=frames)\n \n+def generate_dossier_pdf(request, dossier_id):\n+    \"\"\"\n+    Génère un rapport PDF pour un dossier spécifique avec layout en deux colonnes.\n+    \"\"\"\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    filename = _generate_filename(dossier)\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    # Configuration du document\n+    doc = SimpleDocTemplate(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.5*inch,\n+        leftMargin=0.5*inch,\n+        topMargin=0.5*inch,\n+        bottomMargin=0.5*inch\n+    )\n+    \n+    # Ajout du template personnalisé\n+    doc.addPageTemplates(TwoColumnTemplate(doc))\n+\n+    styles = getSampleStyleSheet()\n+    subtitle_style = ParagraphStyle(\n+        'SubTitle',\n+        parent=styles['Heading2'],\n+        fontSize=12,\n+        textColor=colors.grey,\n+        spaceAfter=6\n+    )\n+\n+    # Création des éléments pour la colonne de gauche\n+    left_elements = []\n+    \n+    # En-tête (logo et titre)\n+    _add_logo(left_elements, styles['Normal'])\n+    title_text = _generate_title(dossier)\n+    left_elements.append(Paragraph(title_text, styles['Heading1']))\n+    left_elements.append(Spacer(1, 0.2*inch))\n+\n+    # Informations du Projet\n+    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n+    project_info = [\n+        f\"Projet: {dossier.projet}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"Booking: {dossier.booking}\",\n+        f\"Client: {dossier.client}\"\n+    ]\n+    _add_info_section(left_elements, project_info, styles['Normal'])\n+\n+    # Détails des Conteneurs\n+    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n+    container_info = [\n+        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n+    ]\n+    _add_info_section(left_elements, container_info, styles['Normal'])\n+\n+    # Localisation\n+    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n+    location_info = [\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n+    ]\n+    _add_info_section(left_elements, location_info, styles['Normal'])\n+\n+    # Création des éléments pour la colonne de droite\n+    right_elements = []\n+\n+    # Informations Maritimes\n+    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n+    maritime_info = [\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n+        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n+    ]\n+    _add_info_section(right_elements, maritime_info, styles['Normal'])\n+\n+    # Agents et Clients\n+    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n+    agent_info = [\n+        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n+        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n+    ]\n+    _add_info_section(right_elements, agent_info, styles['Normal'])\n+\n+    # Dates Importantes\n+    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n+    date_info = [\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n+    ]\n+    _add_info_section(right_elements, date_info, styles['Normal'])\n+\n+    # Table des conteneurs (sur toute la largeur en bas)\n+    table_elements = []\n+    _add_containers_table(table_elements, conteneurs, dossier, styles['Normal'])\n+\n+    # Combinaison de tous les éléments\n+    elements = []\n+    elements.extend(left_elements)\n+    elements.extend(right_elements)\n+    elements.extend(table_elements)\n+\n+    # Génération du PDF\n+    doc.build(elements)\n+    return response\n+\n+def _generate_filename(dossier):\n+    \"\"\"Génère le nom du fichier.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"Ajoute le logo.\"\"\"\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+def _add_info_section(elements, info_list, style):\n+    \"\"\"Ajoute une section d'informations.\"\"\"\n+    for line in info_list:\n+        elements.append(Paragraph(line, style))\n+        elements.append(Spacer(1, 0.05*inch))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+def _add_containers_table(elements, conteneurs, dossier, normal_style):\n+    \"\"\"Ajoute le tableau des conteneurs.\"\"\"\n+    elements.append(Paragraph(\"Liste des Conteneurs\", normal_style))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(table)\n+\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734597600998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,9 +319,25 @@\n         )\n         \n         frames = [frame1, frame2]\n         PageTemplate.__init__(self, 'TwoColumn', frames=frames)\n-\n+def _generate_title(dossier):\n+    \"\"\"\n+    Génère le titre du rapport en fonction du type de conteneur.\n+    \n+    Args:\n+        dossier: L'objet dossier contenant les informations\n+    \n+    Returns:\n+        str: Le titre formaté du rapport\n+    \"\"\"\n+    base_title = \"Rapport de sélection\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        container_type = \"des ISO TANKS\"\n+    else:\n+        container_type = \"des Conteneurs\"\n+    \n+    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n def generate_dossier_pdf(request, dossier_id):\n     \"\"\"\n     Génère un rapport PDF pour un dossier spécifique avec layout en deux colonnes.\n     \"\"\"\n"
                },
                {
                    "date": 1734598245887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,39 +288,89 @@\n from reportlab.lib import colors\n from reportlab.lib.pagesizes import letter, landscape\n from reportlab.lib.units import inch\n from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n from reportlab.platypus.frames import Frame\n-from reportlab.platypus.doctemplate import PageTemplate\n+from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n from urllib.parse import quote\n import os\n \n-class TwoColumnTemplate(PageTemplate):\n+class ContainerReportTemplate(PageTemplate):\n     def __init__(self, parent):\n         page_width = parent.pagesize[0]\n         page_height = parent.pagesize[1]\n         left_margin = right_margin = 0.5*inch\n         column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n         \n-        # Définition des frames (colonnes)\n+        # Frame pour les colonnes d'information (partie supérieure)\n         frame1 = Frame(\n             left_margin, \n-            inch,\n+            page_height * 0.4,  # Réserve 40% de la page pour le tableau\n             column_width,\n-            page_height - 2*inch,\n+            page_height * 0.6 - inch,  # Hauteur ajustée\n             id='col1'\n         )\n         frame2 = Frame(\n             left_margin + column_width + 0.5*inch,\n-            inch,\n+            page_height * 0.4,  # Réserve 40% de la page pour le tableau\n             column_width,\n-            page_height - 2*inch,\n+            page_height * 0.6 - inch,  # Hauteur ajustée\n             id='col2'\n         )\n         \n-        frames = [frame1, frame2]\n-        PageTemplate.__init__(self, 'TwoColumn', frames=frames)\n+        # Frame pour le tableau (partie inférieure)\n+        table_frame = Frame(\n+            left_margin,\n+            inch,  # Marge du bas\n+            page_width - 2*left_margin,\n+            page_height * 0.35,  # 35% de la hauteur pour le tableau\n+            id='table'\n+        )\n+        \n+        frames = [frame1, frame2, table_frame]\n+        PageTemplate.__init__(self, 'ThreePartLayout', frames=frames)\n+\n+class ContainerReportDocument(BaseDocTemplate):\n+    def __init__(self, filename, **kwargs):\n+        super().__init__(filename, **kwargs)\n+        self.addPageTemplates(ContainerReportTemplate(self))\n+\n+    def build(self, left_elements, right_elements, table_elements):\n+        \"\"\"Construit le document avec les éléments dans leurs frames respectives.\"\"\"\n+        story = []\n+        \n+        # Encapsule les éléments de gauche et de droite dans KeepInFrame\n+        story.append(KeepInFrame(\n+            content=left_elements,\n+            maxWidth=self._calc_frame_width('col1'),\n+            maxHeight=self._calc_frame_height('col1')\n+        ))\n+        story.append(KeepInFrame(\n+            content=right_elements,\n+            maxWidth=self._calc_frame_width('col2'),\n+            maxHeight=self._calc_frame_height('col2')\n+        ))\n+        story.append(KeepInFrame(\n+            content=table_elements,\n+            maxWidth=self._calc_frame_width('table'),\n+            maxHeight=self._calc_frame_height('table')\n+        ))\n+        \n+        BaseDocTemplate.build(self, story)\n+\n+    def _calc_frame_width(self, frame_id):\n+        \"\"\"Calcule la largeur du frame spécifié.\"\"\"\n+        template = self.pageTemplates[0]\n+        frame = next(f for f in template.frames if f.id == frame_id)\n+        return frame._width\n+\n+    def _calc_frame_height(self, frame_id):\n+        \"\"\"Calcule la hauteur du frame spécifié.\"\"\"\n+        template = self.pageTemplates[0]\n+        frame = next(f for f in template.frames if f.id == frame_id)\n+        return frame._height\n+\n def _generate_title(dossier):\n     \"\"\"\n     Génère le titre du rapport en fonction du type de conteneur.\n     \n@@ -336,31 +386,72 @@\n     else:\n         container_type = \"des Conteneurs\"\n     \n     return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n+\n+def _generate_filename(dossier):\n+    \"\"\"Génère le nom du fichier.\"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"Ajoute le logo.\"\"\"\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+def _add_info_section(elements, info_list, style):\n+    \"\"\"Ajoute une section d'informations.\"\"\"\n+    for line in info_list:\n+        elements.append(Paragraph(line, style))\n+        elements.append(Spacer(1, 0.05*inch))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+def _create_containers_table(conteneurs, dossier, normal_style):\n+    \"\"\"Crée le tableau des conteneurs.\"\"\"\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+    \n+    return table\n+\n def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"\n-    Génère un rapport PDF pour un dossier spécifique avec layout en deux colonnes.\n-    \"\"\"\n+    \"\"\"Génère un rapport PDF pour un dossier spécifique avec layout fixe.\"\"\"\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n     filename = _generate_filename(dossier)\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # Configuration du document\n-    doc = SimpleDocTemplate(\n+    # Configuration du document avec la nouvelle classe\n+    doc = ContainerReportDocument(\n         response,\n         pagesize=landscape(letter),\n         rightMargin=0.5*inch,\n         leftMargin=0.5*inch,\n         topMargin=0.5*inch,\n         bottomMargin=0.5*inch\n     )\n-    \n-    # Ajout du template personnalisé\n-    doc.addPageTemplates(TwoColumnTemplate(doc))\n \n     styles = getSampleStyleSheet()\n     subtitle_style = ParagraphStyle(\n         'SubTitle',\n@@ -433,70 +524,18 @@\n         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n     ]\n     _add_info_section(right_elements, date_info, styles['Normal'])\n \n-    # Table des conteneurs (sur toute la largeur en bas)\n+    # Création des éléments pour le tableau\n     table_elements = []\n-    _add_containers_table(table_elements, conteneurs, dossier, styles['Normal'])\n+    table_elements.append(Paragraph(\"Liste des Conteneurs\", styles['Heading2']))\n+    table_elements.append(Spacer(1, 0.1*inch))\n+    table_elements.append(_create_containers_table(conteneurs, dossier, styles['Normal']))\n \n-    # Combinaison de tous les éléments\n-    elements = []\n-    elements.extend(left_elements)\n-    elements.extend(right_elements)\n-    elements.extend(table_elements)\n-\n-    # Génération du PDF\n-    doc.build(elements)\n+    # Génération du PDF avec les éléments séparés\n+    doc.build(left_elements, right_elements, table_elements)\n     return response\n \n-def _generate_filename(dossier):\n-    \"\"\"Génère le nom du fichier.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-def _add_logo(elements, normal_style):\n-    \"\"\"Ajoute le logo.\"\"\"\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-def _add_info_section(elements, info_list, style):\n-    \"\"\"Ajoute une section d'informations.\"\"\"\n-    for line in info_list:\n-        elements.append(Paragraph(line, style))\n-        elements.append(Spacer(1, 0.05*inch))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-def _add_containers_table(elements, conteneurs, dossier, normal_style):\n-    \"\"\"Ajoute le tableau des conteneurs.\"\"\"\n-    elements.append(Paragraph(\"Liste des Conteneurs\", normal_style))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(table)\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734598593183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,43 +293,54 @@\n from reportlab.platypus.frames import Frame\n from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n from urllib.parse import quote\n import os\n-\n class ContainerReportTemplate(PageTemplate):\n     def __init__(self, parent):\n         page_width = parent.pagesize[0]\n         page_height = parent.pagesize[1]\n         left_margin = right_margin = 0.5*inch\n+        \n+        # Frame pour le titre (en haut, pleine largeur)\n+        title_frame = Frame(\n+            left_margin,\n+            page_height * 0.8,  # Les 20% supérieurs de la page\n+            page_width - 2*left_margin,\n+            page_height * 0.2 - inch,\n+            id='title'\n+        )\n+\n+        # Calcul de la largeur des colonnes pour les informations\n         column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n         \n-        # Frame pour les colonnes d'information (partie supérieure)\n-        frame1 = Frame(\n+        # Frames pour les informations (deux colonnes au milieu)\n+        left_info_frame = Frame(\n             left_margin, \n-            page_height * 0.4,  # Réserve 40% de la page pour le tableau\n+            page_height * 0.3,  # 30% du bas réservé pour le tableau\n             column_width,\n-            page_height * 0.6 - inch,  # Hauteur ajustée\n-            id='col1'\n+            page_height * 0.5,  # 50% du milieu pour les informations\n+            id='left_info'\n         )\n-        frame2 = Frame(\n+        \n+        right_info_frame = Frame(\n             left_margin + column_width + 0.5*inch,\n-            page_height * 0.4,  # Réserve 40% de la page pour le tableau\n+            page_height * 0.3,\n             column_width,\n-            page_height * 0.6 - inch,  # Hauteur ajustée\n-            id='col2'\n+            page_height * 0.5,\n+            id='right_info'\n         )\n         \n-        # Frame pour le tableau (partie inférieure)\n+        # Frame pour le tableau (en bas, pleine largeur)\n         table_frame = Frame(\n             left_margin,\n             inch,  # Marge du bas\n             page_width - 2*left_margin,\n-            page_height * 0.35,  # 35% de la hauteur pour le tableau\n+            page_height * 0.25,  # 25% du bas pour le tableau\n             id='table'\n         )\n         \n-        frames = [frame1, frame2, table_frame]\n-        PageTemplate.__init__(self, 'ThreePartLayout', frames=frames)\n+        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n+        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n \n class ContainerReportDocument(BaseDocTemplate):\n     def __init__(self, filename, **kwargs):\n         super().__init__(filename, **kwargs)\n"
                },
                {
                    "date": 1734598704254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,272 +281,9 @@\n #     doc.build(elements)\n \n #     return response\n \n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n-from reportlab.platypus.frames import Frame\n-from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n-from urllib.parse import quote\n-import os\n-class ContainerReportTemplate(PageTemplate):\n-    def __init__(self, parent):\n-        page_width = parent.pagesize[0]\n-        page_height = parent.pagesize[1]\n-        left_margin = right_margin = 0.5*inch\n-        \n-        # Frame pour le titre (en haut, pleine largeur)\n-        title_frame = Frame(\n-            left_margin,\n-            page_height * 0.8,  # Les 20% supérieurs de la page\n-            page_width - 2*left_margin,\n-            page_height * 0.2 - inch,\n-            id='title'\n-        )\n \n-        # Calcul de la largeur des colonnes pour les informations\n-        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n-        \n-        # Frames pour les informations (deux colonnes au milieu)\n-        left_info_frame = Frame(\n-            left_margin, \n-            page_height * 0.3,  # 30% du bas réservé pour le tableau\n-            column_width,\n-            page_height * 0.5,  # 50% du milieu pour les informations\n-            id='left_info'\n-        )\n-        \n-        right_info_frame = Frame(\n-            left_margin + column_width + 0.5*inch,\n-            page_height * 0.3,\n-            column_width,\n-            page_height * 0.5,\n-            id='right_info'\n-        )\n-        \n-        # Frame pour le tableau (en bas, pleine largeur)\n-        table_frame = Frame(\n-            left_margin,\n-            inch,  # Marge du bas\n-            page_width - 2*left_margin,\n-            page_height * 0.25,  # 25% du bas pour le tableau\n-            id='table'\n-        )\n-        \n-        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n-        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n-\n-class ContainerReportDocument(BaseDocTemplate):\n-    def __init__(self, filename, **kwargs):\n-        super().__init__(filename, **kwargs)\n-        self.addPageTemplates(ContainerReportTemplate(self))\n-\n-    def build(self, left_elements, right_elements, table_elements):\n-        \"\"\"Construit le document avec les éléments dans leurs frames respectives.\"\"\"\n-        story = []\n-        \n-        # Encapsule les éléments de gauche et de droite dans KeepInFrame\n-        story.append(KeepInFrame(\n-            content=left_elements,\n-            maxWidth=self._calc_frame_width('col1'),\n-            maxHeight=self._calc_frame_height('col1')\n-        ))\n-        story.append(KeepInFrame(\n-            content=right_elements,\n-            maxWidth=self._calc_frame_width('col2'),\n-            maxHeight=self._calc_frame_height('col2')\n-        ))\n-        story.append(KeepInFrame(\n-            content=table_elements,\n-            maxWidth=self._calc_frame_width('table'),\n-            maxHeight=self._calc_frame_height('table')\n-        ))\n-        \n-        BaseDocTemplate.build(self, story)\n-\n-    def _calc_frame_width(self, frame_id):\n-        \"\"\"Calcule la largeur du frame spécifié.\"\"\"\n-        template = self.pageTemplates[0]\n-        frame = next(f for f in template.frames if f.id == frame_id)\n-        return frame._width\n-\n-    def _calc_frame_height(self, frame_id):\n-        \"\"\"Calcule la hauteur du frame spécifié.\"\"\"\n-        template = self.pageTemplates[0]\n-        frame = next(f for f in template.frames if f.id == frame_id)\n-        return frame._height\n-\n-def _generate_title(dossier):\n-    \"\"\"\n-    Génère le titre du rapport en fonction du type de conteneur.\n-    \n-    Args:\n-        dossier: L'objet dossier contenant les informations\n-    \n-    Returns:\n-        str: Le titre formaté du rapport\n-    \"\"\"\n-    base_title = \"Rapport de sélection\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        container_type = \"des ISO TANKS\"\n-    else:\n-        container_type = \"des Conteneurs\"\n-    \n-    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n-\n-def _generate_filename(dossier):\n-    \"\"\"Génère le nom du fichier.\"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n-\n-def _add_logo(elements, normal_style):\n-    \"\"\"Ajoute le logo.\"\"\"\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-def _add_info_section(elements, info_list, style):\n-    \"\"\"Ajoute une section d'informations.\"\"\"\n-    for line in info_list:\n-        elements.append(Paragraph(line, style))\n-        elements.append(Spacer(1, 0.05*inch))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-def _create_containers_table(conteneurs, dossier, normal_style):\n-    \"\"\"Crée le tableau des conteneurs.\"\"\"\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-    \n-    return table\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"Génère un rapport PDF pour un dossier spécifique avec layout fixe.\"\"\"\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    # Configuration du document avec la nouvelle classe\n-    doc = ContainerReportDocument(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.5*inch,\n-        leftMargin=0.5*inch,\n-        topMargin=0.5*inch,\n-        bottomMargin=0.5*inch\n-    )\n-\n-    styles = getSampleStyleSheet()\n-    subtitle_style = ParagraphStyle(\n-        'SubTitle',\n-        parent=styles['Heading2'],\n-        fontSize=12,\n-        textColor=colors.grey,\n-        spaceAfter=6\n-    )\n-\n-    # Création des éléments pour la colonne de gauche\n-    left_elements = []\n-    \n-    # En-tête (logo et titre)\n-    _add_logo(left_elements, styles['Normal'])\n-    title_text = _generate_title(dossier)\n-    left_elements.append(Paragraph(title_text, styles['Heading1']))\n-    left_elements.append(Spacer(1, 0.2*inch))\n-\n-    # Informations du Projet\n-    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n-    project_info = [\n-        f\"Projet: {dossier.projet}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"Booking: {dossier.booking}\",\n-        f\"Client: {dossier.client}\"\n-    ]\n-    _add_info_section(left_elements, project_info, styles['Normal'])\n-\n-    # Détails des Conteneurs\n-    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n-    container_info = [\n-        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n-    ]\n-    _add_info_section(left_elements, container_info, styles['Normal'])\n-\n-    # Localisation\n-    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n-    location_info = [\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n-    ]\n-    _add_info_section(left_elements, location_info, styles['Normal'])\n-\n-    # Création des éléments pour la colonne de droite\n-    right_elements = []\n-\n-    # Informations Maritimes\n-    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n-    maritime_info = [\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n-        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n-    ]\n-    _add_info_section(right_elements, maritime_info, styles['Normal'])\n-\n-    # Agents et Clients\n-    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n-    agent_info = [\n-        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n-        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n-    ]\n-    _add_info_section(right_elements, agent_info, styles['Normal'])\n-\n-    # Dates Importantes\n-    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n-    date_info = [\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n-    ]\n-    _add_info_section(right_elements, date_info, styles['Normal'])\n-\n-    # Création des éléments pour le tableau\n-    table_elements = []\n-    table_elements.append(Paragraph(\"Liste des Conteneurs\", styles['Heading2']))\n-    table_elements.append(Spacer(1, 0.1*inch))\n-    table_elements.append(_create_containers_table(conteneurs, dossier, styles['Normal']))\n-\n-    # Génération du PDF avec les éléments séparés\n-    doc.build(left_elements, right_elements, table_elements)\n-    return response\n-\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734598730299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,570 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+# from reportlab.lib import colors\n+# from reportlab.lib.units import inch\n+# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+# from reportlab.lib.styles import getSampleStyleSheet\n+# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+# from django.http import HttpResponse\n+# from django.shortcuts import get_object_or_404\n+# import os\n+# from django.conf import settings\n+# from urllib.parse import quote\n+\n+# def generate_dossier_pdf(request, dossier_id):\n+#     dossier = get_object_or_404(Dossier, id=dossier_id)\n+#     conteneurs = dossier.conteneurs.all()\n+\n+#     response = HttpResponse(content_type='application/pdf')\n+\n+#     # Condition pour le nom du fichier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+#     else:\n+#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+#     # Encodage pour éviter les erreurs avec des navigateurs\n+#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+#     # Configuration du PDF\n+#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n+#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+#     # Styles\n+#     styles = getSampleStyleSheet()\n+#     title_style = styles['Heading1']\n+#     normal_style = styles['Normal']\n+\n+#     # Contenu du document\n+#     elements = []\n+\n+#     # Logo\n+#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+#     elements.append(Spacer(1, 0.2*inch))\n+\n+#     # Titre et informations du dossier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+#     else:\n+#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+#     elements.append(Paragraph(title_text, title_style))\n+\n+#     elements.append(Spacer(1, 0.1*inch))\n+\n+#     info_text = [\n+#         f\"Client: {dossier.client}\",\n+#         f\"TRD: {dossier.TRD}\",\n+#         f\"BOOKING: {dossier.booking}\",\n+#         f\"Site de sélection: {dossier.site}\",\n+#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+#         f\"POD: {dossier.port_de_dechargement}\",\n+#         f\"POL: {dossier.port_de_chargement}\",\n+#         f\"Commodité: {dossier.commodite}\",\n+#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n+#     ]\n+\n+#     for line in info_text:\n+#         elements.append(Paragraph(line, normal_style))\n+#         elements.append(Spacer(1, 0.05*inch))\n+\n+#     elements.append(Spacer(1, 0.2*inch))\n+\n+#     # Tableau des conteneurs\n+#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+#     for i, conteneur in enumerate(conteneurs, start=1):\n+#         data.append([\n+#             i,\n+#             conteneur.reference or \"N/A\",\n+#             conteneur.etat or \"N/A\",\n+#             dossier.get_type_conteneur_display()\n+#         ])\n+\n+#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+#     table.setStyle(TableStyle([\n+#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n+#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+#     ]))\n+\n+#     # Ajout du tableau au document\n+#     elements.append(Spacer(1, 0.2*inch))\n+#     elements.append(Paragraph('<br/>', normal_style))\n+#     elements.append(table)\n+\n+#     # Génération du PDF\n+#     doc.build(elements)\n+\n+#     return response\n+\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n+from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n+from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n+from reportlab.platypus.frames import Frame\n+from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n+from urllib.parse import quote\n+import os\n+\n+class ContainerReportTemplate(PageTemplate):\n+    def __init__(self, parent):\n+        page_width = parent.pagesize[0]\n+        page_height = parent.pagesize[1]\n+        left_margin = right_margin = 0.5*inch\n+        \n+        # Frame pour le titre (en haut, pleine largeur)\n+        title_frame = Frame(\n+            left_margin,\n+            page_height * 0.8,  # Les 20% supérieurs de la page\n+            page_width - 2*left_margin,\n+            page_height * 0.2 - inch,\n+            id='title'\n+        )\n+\n+        # Calcul de la largeur des colonnes pour les informations\n+        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n+        \n+        # Frames pour les informations (deux colonnes au milieu)\n+        left_info_frame = Frame(\n+            left_margin, \n+            page_height * 0.3,  # 30% du bas réservé pour le tableau\n+            column_width,\n+            page_height * 0.5,  # 50% du milieu pour les informations\n+            id='left_info'\n+        )\n+        \n+        right_info_frame = Frame(\n+            left_margin + column_width + 0.5*inch,\n+            page_height * 0.3,\n+            column_width,\n+            page_height * 0.5,\n+            id='right_info'\n+        )\n+        \n+        # Frame pour le tableau (en bas, pleine largeur)\n+        table_frame = Frame(\n+            left_margin,\n+            inch,  # Marge du bas\n+            page_width - 2*left_margin,\n+            page_height * 0.25,  # 25% du bas pour le tableau\n+            id='table'\n+        )\n+        \n+        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n+        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n+\n+class ContainerReportDocument(BaseDocTemplate):\n+    def __init__(self, filename, **kwargs):\n+        super().__init__(filename, **kwargs)\n+        self.addPageTemplates(ContainerReportTemplate(self))\n+\n+    def build(self, title_elements, left_elements, right_elements, table_elements):\n+        \"\"\"Construit le document avec les éléments dans leurs frames respectives.\"\"\"\n+        story = []\n+        \n+        # Encapsule chaque section dans KeepInFrame\n+        story.append(KeepInFrame(\n+            content=title_elements,\n+            maxWidth=self._calc_frame_width('title'),\n+            maxHeight=self._calc_frame_height('title')\n+        ))\n+        story.append(KeepInFrame(\n+            content=left_elements,\n+            maxWidth=self._calc_frame_width('left_info'),\n+            maxHeight=self._calc_frame_height('left_info')\n+        ))\n+        story.append(KeepInFrame(\n+            content=right_elements,\n+            maxWidth=self._calc_frame_width('right_info'),\n+            maxHeight=self._calc_frame_height('right_info')\n+        ))\n+        story.append(KeepInFrame(\n+            content=table_elements,\n+            maxWidth=self._calc_frame_width('table'),\n+            maxHeight=self._calc_frame_height('table')\n+        ))\n+        \n+        BaseDocTemplate.build(self, story)\n+\n+    def _calc_frame_width(self, frame_id):\n+        \"\"\"Calcule la largeur du frame spécifié.\"\"\"\n+        template = self.pageTemplates[0]\n+        frame = next(f for f in template.frames if f.id == frame_id)\n+        return frame._width\n+\n+    def _calc_frame_height(self, frame_id):\n+        \"\"\"Calcule la hauteur du frame spécifié.\"\"\"\n+        template = self.pageTemplates[0]\n+        frame = next(f for f in template.frames if f.id == frame_id)\n+        return frame._height\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    \"\"\"Génère un rapport PDF pour un dossier spécifique avec la nouvelle mise en page.\"\"\"\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    filename = _generate_filename(dossier)\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    # Configuration du document\n+    doc = ContainerReportDocument(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.5*inch,\n+        leftMargin=0.5*inch,\n+        topMargin=0.5*inch,\n+        bottomMargin=0.5*inch\n+    )\n+\n+    styles = getSampleStyleSheet()\n+    subtitle_style = ParagraphStyle(\n+        'SubTitle',\n+        parent=styles['Heading2'],\n+        fontSize=12,\n+        textColor=colors.grey,\n+        spaceAfter=6\n+    )\n+\n+    # Éléments du titre (en haut, pleine largeur)\n+    title_elements = []\n+    _add_logo(title_elements, styles['Normal'])\n+    title_text = _generate_title(dossier)\n+    title_elements.append(Paragraph(title_text, styles['Heading1']))\n+    title_elements.append(Spacer(1, 0.2*inch))\n+\n+    # Éléments de la colonne gauche\n+    left_elements = []\n+    \n+    # Informations du Projet\n+    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n+    project_info = [\n+        f\"Projet: {dossier.projet}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"Booking: {dossier.booking}\",\n+        f\"Client: {dossier.client}\"\n+    ]\n+    _add_info_section(left_elements, project_info, styles['Normal'])\n+\n+    # Détails des Conteneurs\n+    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n+    container_info = [\n+        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n+    ]\n+    _add_info_section(left_elements, container_info, styles['Normal'])\n+\n+    # Localisation\n+    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n+    location_info = [\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n+    ]\n+    _add_info_section(left_elements, location_info, styles['Normal'])\n+\n+    # Éléments de la colonne droite\n+    right_elements = []\n+\n+    # Informations Maritimes\n+    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n+    maritime_info = [\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n+        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n+    ]\n+    _add_info_section(right_elements, maritime_info, styles['Normal'])\n+\n+    # Agents et Clients\n+    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n+    agent_info = [\n+        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n+        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n+    ]\n+    _add_info_section(right_elements, agent_info, styles['Normal'])\n+\n+    # Dates Importantes\n+    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n+    date_info = [\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n+    ]\n+    _add_info_section(right_elements, date_info, styles['Normal'])\n+\n+    # Éléments du tableau (en bas, pleine largeur)\n+    table_elements = []\n+    table_elements.append(Paragraph(\"Liste des Conteneurs\", styles['Heading2']))\n+    table_elements.append(Spacer(1, 0.1*inch))\n+    table_elements.append(_create_containers_table(conteneurs, dossier, styles['Normal']))\n+\n+    # Génération du PDF\n+    doc.build(title_elements, left_elements, right_elements, table_elements)\n+    return response\n+\n+# Les fonctions auxiliaires (_generate_title, _generate_filename, _add_logo, \n+# _add_info_section, _create_containers_table) restent identiques\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734598811735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,9 +350,8 @@\n     def build(self, title_elements, left_elements, right_elements, table_elements):\n         \"\"\"Construit le document avec les éléments dans leurs frames respectives.\"\"\"\n         story = []\n         \n-        # Encapsule chaque section dans KeepInFrame\n         story.append(KeepInFrame(\n             content=title_elements,\n             maxWidth=self._calc_frame_width('title'),\n             maxHeight=self._calc_frame_height('title')\n@@ -386,10 +385,75 @@\n         template = self.pageTemplates[0]\n         frame = next(f for f in template.frames if f.id == frame_id)\n         return frame._height\n \n+def _generate_title(dossier):\n+    \"\"\"\n+    Génère le titre du rapport en fonction du type de conteneur.\n+    \"\"\"\n+    base_title = \"Rapport de sélection\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        container_type = \"des ISO TANKS\"\n+    else:\n+        container_type = \"des Conteneurs\"\n+    \n+    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n+\n+def _generate_filename(dossier):\n+    \"\"\"\n+    Génère le nom du fichier PDF.\n+    \"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n+\n+def _add_logo(elements, normal_style):\n+    \"\"\"\n+    Ajoute le logo au document.\n+    \"\"\"\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+def _add_info_section(elements, info_list, style):\n+    \"\"\"\n+    Ajoute une section d'informations au document.\n+    \"\"\"\n+    for line in info_list:\n+        elements.append(Paragraph(line, style))\n+        elements.append(Spacer(1, 0.05*inch))\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+def _create_containers_table(conteneurs, dossier, normal_style):\n+    \"\"\"\n+    Crée le tableau des conteneurs.\n+    \"\"\"\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+    \n+    return table\n+\n def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"Génère un rapport PDF pour un dossier spécifique avec la nouvelle mise en page.\"\"\"\n+    \"\"\"Génère un rapport PDF pour un dossier spécifique avec layout fixe.\"\"\"\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n@@ -488,11 +552,8 @@\n \n     # Génération du PDF\n     doc.build(title_elements, left_elements, right_elements, table_elements)\n     return response\n-\n-# Les fonctions auxiliaires (_generate_title, _generate_filename, _add_logo, \n-# _add_info_section, _create_containers_table) restent identiques\n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734599535598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,567 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+# from reportlab.lib import colors\n+# from reportlab.lib.units import inch\n+# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+# from reportlab.lib.styles import getSampleStyleSheet\n+# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+# from django.http import HttpResponse\n+# from django.shortcuts import get_object_or_404\n+# import os\n+# from django.conf import settings\n+# from urllib.parse import quote\n+\n+# def generate_dossier_pdf(request, dossier_id):\n+#     dossier = get_object_or_404(Dossier, id=dossier_id)\n+#     conteneurs = dossier.conteneurs.all()\n+\n+#     response = HttpResponse(content_type='application/pdf')\n+\n+#     # Condition pour le nom du fichier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+#     else:\n+#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+#     # Encodage pour éviter les erreurs avec des navigateurs\n+#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+#     # Configuration du PDF\n+#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n+#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+#     # Styles\n+#     styles = getSampleStyleSheet()\n+#     title_style = styles['Heading1']\n+#     normal_style = styles['Normal']\n+\n+#     # Contenu du document\n+#     elements = []\n+\n+#     # Logo\n+#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+#     elements.append(Spacer(1, 0.2*inch))\n+\n+#     # Titre et informations du dossier\n+#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+#     else:\n+#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+#     elements.append(Paragraph(title_text, title_style))\n+\n+#     elements.append(Spacer(1, 0.1*inch))\n+\n+#     info_text = [\n+#         f\"Client: {dossier.client}\",\n+#         f\"TRD: {dossier.TRD}\",\n+#         f\"BOOKING: {dossier.booking}\",\n+#         f\"Site de sélection: {dossier.site}\",\n+#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+#         f\"POD: {dossier.port_de_dechargement}\",\n+#         f\"POL: {dossier.port_de_chargement}\",\n+#         f\"Commodité: {dossier.commodite}\",\n+#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n+#     ]\n+\n+#     for line in info_text:\n+#         elements.append(Paragraph(line, normal_style))\n+#         elements.append(Spacer(1, 0.05*inch))\n+\n+#     elements.append(Spacer(1, 0.2*inch))\n+\n+#     # Tableau des conteneurs\n+#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+#     for i, conteneur in enumerate(conteneurs, start=1):\n+#         data.append([\n+#             i,\n+#             conteneur.reference or \"N/A\",\n+#             conteneur.etat or \"N/A\",\n+#             dossier.get_type_conteneur_display()\n+#         ])\n+\n+#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+#     table.setStyle(TableStyle([\n+#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n+#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+#     ]))\n+\n+#     # Ajout du tableau au document\n+#     elements.append(Spacer(1, 0.2*inch))\n+#     elements.append(Paragraph('<br/>', normal_style))\n+#     elements.append(table)\n+\n+#     # Génération du PDF\n+#     doc.build(elements)\n+\n+#     return response\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from django.conf import settings\n+from reportlab.lib import colors\n+from reportlab.lib.pagesizes import letter, landscape\n+from reportlab.lib.units import inch\n+from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n+from reportlab.platypus.frames import Frame\n+from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n+from urllib.parse import quote\n+import os\n+\n+class ContainerReportTemplate(PageTemplate):\n+    def __init__(self, parent):\n+        page_width = parent.pagesize[0]\n+        page_height = parent.pagesize[1]\n+        margin = 0.75*inch  # Increased margins for better spacing\n+        \n+        # Title frame (top 15% of page)\n+        title_frame = Frame(\n+            margin,\n+            page_height * 0.85,\n+            page_width - 2*margin,\n+            page_height * 0.15 - margin/2,\n+            id='title',\n+            showBoundary=0  # Set to 1 for debugging\n+        )\n+\n+        # Info section (middle 45% of page)\n+        col_width = (page_width - 3*margin) / 2\n+        left_info_frame = Frame(\n+            margin,\n+            page_height * 0.4,\n+            col_width,\n+            page_height * 0.45,\n+            id='left_info',\n+            showBoundary=0\n+        )\n+        \n+        right_info_frame = Frame(\n+            margin * 2 + col_width,\n+            page_height * 0.4,\n+            col_width,\n+            page_height * 0.45,\n+            id='right_info',\n+            showBoundary=0\n+        )\n+        \n+        # Table frame (bottom 40% of page)\n+        table_frame = Frame(\n+            margin,\n+            margin,\n+            page_width - 2*margin,\n+            page_height * 0.35,\n+            id='table',\n+            showBoundary=0\n+        )\n+        \n+        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n+        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n+\n+class ContainerReportDocument(BaseDocTemplate):\n+    def __init__(self, filename, **kwargs):\n+        super().__init__(filename, **kwargs)\n+        self.addPageTemplates(ContainerReportTemplate(self))\n+\n+    def build(self, title_elements, left_elements, right_elements, table_elements):\n+        story = []\n+        \n+        # Add padding and spacing between elements\n+        for elements_list in [title_elements, left_elements, right_elements]:\n+            elements_list.append(Spacer(1, 0.3*inch))\n+        \n+        story.extend([\n+            KeepInFrame(0, 0, content=title_elements),\n+            KeepInFrame(0, 0, content=left_elements),\n+            KeepInFrame(0, 0, content=right_elements),\n+            KeepInFrame(0, 0, content=table_elements)\n+        ])\n+        \n+        BaseDocTemplate.build(self, story)\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+    filename = _generate_filename(dossier)\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    # Document setup with increased margins\n+    doc = ContainerReportDocument(\n+        response,\n+        pagesize=landscape(letter),\n+        rightMargin=0.75*inch,\n+        leftMargin=0.75*inch,\n+        topMargin=0.75*inch,\n+        bottomMargin=0.75*inch\n+    )\n+\n+    # Enhanced styles\n+    styles = getSampleStyleSheet()\n+    title_style = ParagraphStyle(\n+        'CustomTitle',\n+        parent=styles['Heading1'],\n+        fontSize=16,\n+        spaceAfter=30,\n+        alignment=1  # Center alignment\n+    )\n+    \n+    subtitle_style = ParagraphStyle(\n+        'CustomSubTitle',\n+        parent=styles['Heading2'],\n+        fontSize=14,\n+        textColor=colors.HexColor('#444444'),\n+        spaceBefore=15,\n+        spaceAfter=10\n+    )\n+    \n+    normal_style = ParagraphStyle(\n+        'CustomNormal',\n+        parent=styles['Normal'],\n+        fontSize=11,\n+        leading=14\n+    )\n+\n+    # Title section with centered logo and text\n+    title_elements = []\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    title_elements.extend([\n+        Paragraph(f'<img src=\"{logo_path}\" width=\"60\" height=\"60\" />', \n+                 ParagraphStyle('Logo', alignment=1)),\n+        Spacer(1, 0.2*inch),\n+        Paragraph(_generate_title(dossier), title_style)\n+    ])\n+\n+    # Left column with enhanced spacing\n+    left_elements = []\n+    left_elements.extend([\n+        Paragraph(\"Informations du Projet\", subtitle_style),\n+        *[Paragraph(info, normal_style) for info in [\n+            f\"Projet: {dossier.projet}\",\n+            f\"TRD: {dossier.TRD}\",\n+            f\"Booking: {dossier.booking}\",\n+            f\"Client: {dossier.client}\"\n+        ]],\n+        Spacer(1, 0.2*inch),\n+        Paragraph(\"Détails des Conteneurs\", subtitle_style),\n+        *[Paragraph(info, normal_style) for info in [\n+            f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n+            f\"Commodité: {dossier.commodite}\",\n+            f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n+        ]]\n+    ])\n+\n+    # Right column with enhanced spacing\n+    right_elements = []\n+    right_elements.extend([\n+        Paragraph(\"Localisation\", subtitle_style),\n+        *[Paragraph(info, normal_style) for info in [\n+            f\"Site de sélection: {dossier.site}\",\n+            f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n+        ]],\n+        Spacer(1, 0.2*inch),\n+        Paragraph(\"Dates Importantes\", subtitle_style),\n+        *[Paragraph(info, normal_style) for info in [\n+            f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+            f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n+        ]]\n+    ])\n+\n+    # Table section with improved styling\n+    table_elements = []\n+    table_elements.extend([\n+        Paragraph(\"Liste des Conteneurs\", subtitle_style),\n+        Spacer(1, 0.15*inch)\n+    ])\n+    \n+    # Enhanced table styling\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            str(i),\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    table = Table(data, colWidths=[1*inch, 3*inch, 3*inch, 3*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2C3E50')),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#EBECF0')),\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+        ('ROWHEIGHT', (0, 0), (-1, -1), 30)\n+    ]))\n+    \n+    table_elements.append(table)\n+\n+    # Generate PDF\n+    doc.build(title_elements, left_elements, right_elements, table_elements)\n+    return response\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734599603738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,8 +293,28 @@\n from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n from urllib.parse import quote\n import os\n \n+def _generate_title(dossier):\n+    \"\"\"\n+    Génère le titre du rapport en fonction du type de conteneur.\n+    \"\"\"\n+    base_title = \"Rapport de sélection\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        container_type = \"des ISO TANKS\"\n+    else:\n+        container_type = \"des Conteneurs\"\n+    \n+    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n+\n+def _generate_filename(dossier):\n+    \"\"\"\n+    Génère le nom du fichier PDF.\n+    \"\"\"\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n+\n class ContainerReportTemplate(PageTemplate):\n     def __init__(self, parent):\n         page_width = parent.pagesize[0]\n         page_height = parent.pagesize[1]\n"
                },
                {
                    "date": 1734599638504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,345 +171,118 @@\n     response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n     return response\n \"\"\"\n \n-# from reportlab.lib import colors\n-# from reportlab.lib.units import inch\n-# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-# from reportlab.lib.styles import getSampleStyleSheet\n-# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-# from django.http import HttpResponse\n-# from django.shortcuts import get_object_or_404\n-# import os\n-# from django.conf import settings\n-# from urllib.parse import quote\n-\n-# def generate_dossier_pdf(request, dossier_id):\n-#     dossier = get_object_or_404(Dossier, id=dossier_id)\n-#     conteneurs = dossier.conteneurs.all()\n-\n-#     response = HttpResponse(content_type='application/pdf')\n-\n-#     # Condition pour le nom du fichier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-#     else:\n-#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-#     # Encodage pour éviter les erreurs avec des navigateurs\n-#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-#     # Configuration du PDF\n-#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n-#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-#     # Styles\n-#     styles = getSampleStyleSheet()\n-#     title_style = styles['Heading1']\n-#     normal_style = styles['Normal']\n-\n-#     # Contenu du document\n-#     elements = []\n-\n-#     # Logo\n-#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Titre et informations du dossier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-#     else:\n-#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-#     elements.append(Paragraph(title_text, title_style))\n-\n-#     elements.append(Spacer(1, 0.1*inch))\n-\n-#     info_text = [\n-#         f\"Client: {dossier.client}\",\n-#         f\"TRD: {dossier.TRD}\",\n-#         f\"BOOKING: {dossier.booking}\",\n-#         f\"Site de sélection: {dossier.site}\",\n-#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-#         f\"POD: {dossier.port_de_dechargement}\",\n-#         f\"POL: {dossier.port_de_chargement}\",\n-#         f\"Commodité: {dossier.commodite}\",\n-#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n-#     ]\n-\n-#     for line in info_text:\n-#         elements.append(Paragraph(line, normal_style))\n-#         elements.append(Spacer(1, 0.05*inch))\n-\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Tableau des conteneurs\n-#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-#     for i, conteneur in enumerate(conteneurs, start=1):\n-#         data.append([\n-#             i,\n-#             conteneur.reference or \"N/A\",\n-#             conteneur.etat or \"N/A\",\n-#             dossier.get_type_conteneur_display()\n-#         ])\n-\n-#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-#     table.setStyle(TableStyle([\n-#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n-#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-#     ]))\n-\n-#     # Ajout du tableau au document\n-#     elements.append(Spacer(1, 0.2*inch))\n-#     elements.append(Paragraph('<br/>', normal_style))\n-#     elements.append(table)\n-\n-#     # Génération du PDF\n-#     doc.build(elements)\n-\n-#     return response\n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n from django.http import HttpResponse\n from django.shortcuts import get_object_or_404\n+import os\n from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n-from reportlab.platypus.frames import Frame\n-from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n from urllib.parse import quote\n-import os\n \n-def _generate_title(dossier):\n-    \"\"\"\n-    Génère le titre du rapport en fonction du type de conteneur.\n-    \"\"\"\n-    base_title = \"Rapport de sélection\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        container_type = \"des ISO TANKS\"\n-    else:\n-        container_type = \"des Conteneurs\"\n-    \n-    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n-\n-def _generate_filename(dossier):\n-    \"\"\"\n-    Génère le nom du fichier PDF.\n-    \"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n-\n-class ContainerReportTemplate(PageTemplate):\n-    def __init__(self, parent):\n-        page_width = parent.pagesize[0]\n-        page_height = parent.pagesize[1]\n-        margin = 0.75*inch  # Increased margins for better spacing\n-        \n-        # Title frame (top 15% of page)\n-        title_frame = Frame(\n-            margin,\n-            page_height * 0.85,\n-            page_width - 2*margin,\n-            page_height * 0.15 - margin/2,\n-            id='title',\n-            showBoundary=0  # Set to 1 for debugging\n-        )\n-\n-        # Info section (middle 45% of page)\n-        col_width = (page_width - 3*margin) / 2\n-        left_info_frame = Frame(\n-            margin,\n-            page_height * 0.4,\n-            col_width,\n-            page_height * 0.45,\n-            id='left_info',\n-            showBoundary=0\n-        )\n-        \n-        right_info_frame = Frame(\n-            margin * 2 + col_width,\n-            page_height * 0.4,\n-            col_width,\n-            page_height * 0.45,\n-            id='right_info',\n-            showBoundary=0\n-        )\n-        \n-        # Table frame (bottom 40% of page)\n-        table_frame = Frame(\n-            margin,\n-            margin,\n-            page_width - 2*margin,\n-            page_height * 0.35,\n-            id='table',\n-            showBoundary=0\n-        )\n-        \n-        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n-        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n-\n-class ContainerReportDocument(BaseDocTemplate):\n-    def __init__(self, filename, **kwargs):\n-        super().__init__(filename, **kwargs)\n-        self.addPageTemplates(ContainerReportTemplate(self))\n-\n-    def build(self, title_elements, left_elements, right_elements, table_elements):\n-        story = []\n-        \n-        # Add padding and spacing between elements\n-        for elements_list in [title_elements, left_elements, right_elements]:\n-            elements_list.append(Spacer(1, 0.3*inch))\n-        \n-        story.extend([\n-            KeepInFrame(0, 0, content=title_elements),\n-            KeepInFrame(0, 0, content=left_elements),\n-            KeepInFrame(0, 0, content=right_elements),\n-            KeepInFrame(0, 0, content=table_elements)\n-        ])\n-        \n-        BaseDocTemplate.build(self, story)\n-\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    # Encodage pour éviter les erreurs avec des navigateurs\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # Document setup with increased margins\n-    doc = ContainerReportDocument(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.75*inch,\n-        leftMargin=0.75*inch,\n-        topMargin=0.75*inch,\n-        bottomMargin=0.75*inch\n-    )\n+    # Configuration du PDF\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-    # Enhanced styles\n+    # Styles\n     styles = getSampleStyleSheet()\n-    title_style = ParagraphStyle(\n-        'CustomTitle',\n-        parent=styles['Heading1'],\n-        fontSize=16,\n-        spaceAfter=30,\n-        alignment=1  # Center alignment\n-    )\n-    \n-    subtitle_style = ParagraphStyle(\n-        'CustomSubTitle',\n-        parent=styles['Heading2'],\n-        fontSize=14,\n-        textColor=colors.HexColor('#444444'),\n-        spaceBefore=15,\n-        spaceAfter=10\n-    )\n-    \n-    normal_style = ParagraphStyle(\n-        'CustomNormal',\n-        parent=styles['Normal'],\n-        fontSize=11,\n-        leading=14\n-    )\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n \n-    # Title section with centered logo and text\n-    title_elements = []\n+    # Contenu du document\n+    elements = []\n+\n+    # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    title_elements.extend([\n-        Paragraph(f'<img src=\"{logo_path}\" width=\"60\" height=\"60\" />', \n-                 ParagraphStyle('Logo', alignment=1)),\n-        Spacer(1, 0.2*inch),\n-        Paragraph(_generate_title(dossier), title_style)\n-    ])\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n \n-    # Left column with enhanced spacing\n-    left_elements = []\n-    left_elements.extend([\n-        Paragraph(\"Informations du Projet\", subtitle_style),\n-        *[Paragraph(info, normal_style) for info in [\n-            f\"Projet: {dossier.projet}\",\n-            f\"TRD: {dossier.TRD}\",\n-            f\"Booking: {dossier.booking}\",\n-            f\"Client: {dossier.client}\"\n-        ]],\n-        Spacer(1, 0.2*inch),\n-        Paragraph(\"Détails des Conteneurs\", subtitle_style),\n-        *[Paragraph(info, normal_style) for info in [\n-            f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n-            f\"Commodité: {dossier.commodite}\",\n-            f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n-        ]]\n-    ])\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n-    # Right column with enhanced spacing\n-    right_elements = []\n-    right_elements.extend([\n-        Paragraph(\"Localisation\", subtitle_style),\n-        *[Paragraph(info, normal_style) for info in [\n-            f\"Site de sélection: {dossier.site}\",\n-            f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n-        ]],\n-        Spacer(1, 0.2*inch),\n-        Paragraph(\"Dates Importantes\", subtitle_style),\n-        *[Paragraph(info, normal_style) for info in [\n-            f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-            f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n-        ]]\n-    ])\n+    elements.append(Paragraph(title_text, title_style))\n \n-    # Table section with improved styling\n-    table_elements = []\n-    table_elements.extend([\n-        Paragraph(\"Liste des Conteneurs\", subtitle_style),\n-        Spacer(1, 0.15*inch)\n-    ])\n-    \n-    # Enhanced table styling\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n     for i, conteneur in enumerate(conteneurs, start=1):\n         data.append([\n-            str(i),\n+            i,\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n \n-    table = Table(data, colWidths=[1*inch, 3*inch, 3*inch, 3*inch])\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2C3E50')),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#EBECF0')),\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-        ('ROWHEIGHT', (0, 0), (-1, -1), 30)\n     ]))\n-    \n-    table_elements.append(table)\n \n-    # Generate PDF\n-    doc.build(title_elements, left_elements, right_elements, table_elements)\n+    # Ajout du tableau au document\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    # Génération du PDF\n+    doc.build(elements)\n+\n     return response\n+ \n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734599774796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,44 +181,54 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n+def get_country_color(pays):\n+    \"\"\"\n+    Retourne une couleur en fonction du pays.\n+    Vous pouvez personnaliser les couleurs selon vos besoins.\n+    \"\"\"\n+    country_colors = {\n+        'France': colors.lightblue,\n+        'Belgique': colors.yellow,\n+        'Suisse': colors.pink,\n+        'Allemagne': colors.lightgreen,\n+        # Ajoutez d'autres pays selon vos besoins\n+    }\n+    # Couleur par défaut si le pays n'est pas dans la liste\n+    return country_colors.get(pays, colors.beige)\n \n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n     response = HttpResponse(content_type='application/pdf')\n \n     # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n     else:\n         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n \n-    # Encodage pour éviter les erreurs avec des navigateurs\n     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n \n-    # Configuration du PDF\n     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n \n-    # Styles\n     styles = getSampleStyleSheet()\n     title_style = styles['Heading1']\n     normal_style = styles['Normal']\n \n-    # Contenu du document\n     elements = []\n \n     # Logo\n     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n     elements.append(Spacer(1, 0.2*inch))\n \n     # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n     else:\n         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n \n@@ -258,31 +268,31 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n \n+    # Obtenir la couleur en fonction du pays\n+    country_color = get_country_color(dossier.pays)\n+\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n+        ('BACKGROUND', (0, 1), (-1, -1), country_color),  # Utilisation de la couleur du pays\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n-    # Ajout du tableau au document\n     elements.append(Spacer(1, 0.2*inch))\n     elements.append(Paragraph('<br/>', normal_style))\n     elements.append(table)\n \n-    # Génération du PDF\n     doc.build(elements)\n \n     return response\n- \n def soumettre_dossier(request, dossier_id):\n     # Récupérer le dossier\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n \n"
                },
                {
                    "date": 1734599795918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         'Allemagne': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n     }\n     # Couleur par défaut si le pays n'est pas dans la liste\n-    return country_colors.get(pays, colors.beige)\n+    return country_colors.get(pays, colors.pink)\n \n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n@@ -366,997 +366,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-# from reportlab.lib import colors\n-# from reportlab.lib.units import inch\n-# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-# from reportlab.lib.styles import getSampleStyleSheet\n-# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-# from django.http import HttpResponse\n-# from django.shortcuts import get_object_or_404\n-# import os\n-# from django.conf import settings\n-# from urllib.parse import quote\n-\n-# def generate_dossier_pdf(request, dossier_id):\n-#     dossier = get_object_or_404(Dossier, id=dossier_id)\n-#     conteneurs = dossier.conteneurs.all()\n-\n-#     response = HttpResponse(content_type='application/pdf')\n-\n-#     # Condition pour le nom du fichier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-#     else:\n-#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-#     # Encodage pour éviter les erreurs avec des navigateurs\n-#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-#     # Configuration du PDF\n-#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n-#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-#     # Styles\n-#     styles = getSampleStyleSheet()\n-#     title_style = styles['Heading1']\n-#     normal_style = styles['Normal']\n-\n-#     # Contenu du document\n-#     elements = []\n-\n-#     # Logo\n-#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Titre et informations du dossier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-#     else:\n-#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-#     elements.append(Paragraph(title_text, title_style))\n-\n-#     elements.append(Spacer(1, 0.1*inch))\n-\n-#     info_text = [\n-#         f\"Client: {dossier.client}\",\n-#         f\"TRD: {dossier.TRD}\",\n-#         f\"BOOKING: {dossier.booking}\",\n-#         f\"Site de sélection: {dossier.site}\",\n-#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-#         f\"POD: {dossier.port_de_dechargement}\",\n-#         f\"POL: {dossier.port_de_chargement}\",\n-#         f\"Commodité: {dossier.commodite}\",\n-#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n-#     ]\n-\n-#     for line in info_text:\n-#         elements.append(Paragraph(line, normal_style))\n-#         elements.append(Spacer(1, 0.05*inch))\n-\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Tableau des conteneurs\n-#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-#     for i, conteneur in enumerate(conteneurs, start=1):\n-#         data.append([\n-#             i,\n-#             conteneur.reference or \"N/A\",\n-#             conteneur.etat or \"N/A\",\n-#             dossier.get_type_conteneur_display()\n-#         ])\n-\n-#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-#     table.setStyle(TableStyle([\n-#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n-#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-#     ]))\n-\n-#     # Ajout du tableau au document\n-#     elements.append(Spacer(1, 0.2*inch))\n-#     elements.append(Paragraph('<br/>', normal_style))\n-#     elements.append(table)\n-\n-#     # Génération du PDF\n-#     doc.build(elements)\n-\n-#     return response\n-\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-from django.conf import settings\n-from reportlab.lib import colors\n-from reportlab.lib.pagesizes import letter, landscape\n-from reportlab.lib.units import inch\n-from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, KeepInFrame\n-from reportlab.platypus.frames import Frame\n-from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate\n-from urllib.parse import quote\n-import os\n-\n-class ContainerReportTemplate(PageTemplate):\n-    def __init__(self, parent):\n-        page_width = parent.pagesize[0]\n-        page_height = parent.pagesize[1]\n-        left_margin = right_margin = 0.5*inch\n-        \n-        # Frame pour le titre (en haut, pleine largeur)\n-        title_frame = Frame(\n-            left_margin,\n-            page_height * 0.8,  # Les 20% supérieurs de la page\n-            page_width - 2*left_margin,\n-            page_height * 0.2 - inch,\n-            id='title'\n-        )\n-\n-        # Calcul de la largeur des colonnes pour les informations\n-        column_width = (page_width - left_margin - right_margin - 0.5*inch) / 2\n-        \n-        # Frames pour les informations (deux colonnes au milieu)\n-        left_info_frame = Frame(\n-            left_margin, \n-            page_height * 0.3,  # 30% du bas réservé pour le tableau\n-            column_width,\n-            page_height * 0.5,  # 50% du milieu pour les informations\n-            id='left_info'\n-        )\n-        \n-        right_info_frame = Frame(\n-            left_margin + column_width + 0.5*inch,\n-            page_height * 0.3,\n-            column_width,\n-            page_height * 0.5,\n-            id='right_info'\n-        )\n-        \n-        # Frame pour le tableau (en bas, pleine largeur)\n-        table_frame = Frame(\n-            left_margin,\n-            inch,  # Marge du bas\n-            page_width - 2*left_margin,\n-            page_height * 0.25,  # 25% du bas pour le tableau\n-            id='table'\n-        )\n-        \n-        frames = [title_frame, left_info_frame, right_info_frame, table_frame]\n-        PageTemplate.__init__(self, 'FourPartLayout', frames=frames)\n-\n-class ContainerReportDocument(BaseDocTemplate):\n-    def __init__(self, filename, **kwargs):\n-        super().__init__(filename, **kwargs)\n-        self.addPageTemplates(ContainerReportTemplate(self))\n-\n-    def build(self, title_elements, left_elements, right_elements, table_elements):\n-        \"\"\"Construit le document avec les éléments dans leurs frames respectives.\"\"\"\n-        story = []\n-        \n-        story.append(KeepInFrame(\n-            content=title_elements,\n-            maxWidth=self._calc_frame_width('title'),\n-            maxHeight=self._calc_frame_height('title')\n-        ))\n-        story.append(KeepInFrame(\n-            content=left_elements,\n-            maxWidth=self._calc_frame_width('left_info'),\n-            maxHeight=self._calc_frame_height('left_info')\n-        ))\n-        story.append(KeepInFrame(\n-            content=right_elements,\n-            maxWidth=self._calc_frame_width('right_info'),\n-            maxHeight=self._calc_frame_height('right_info')\n-        ))\n-        story.append(KeepInFrame(\n-            content=table_elements,\n-            maxWidth=self._calc_frame_width('table'),\n-            maxHeight=self._calc_frame_height('table')\n-        ))\n-        \n-        BaseDocTemplate.build(self, story)\n-\n-    def _calc_frame_width(self, frame_id):\n-        \"\"\"Calcule la largeur du frame spécifié.\"\"\"\n-        template = self.pageTemplates[0]\n-        frame = next(f for f in template.frames if f.id == frame_id)\n-        return frame._width\n-\n-    def _calc_frame_height(self, frame_id):\n-        \"\"\"Calcule la hauteur du frame spécifié.\"\"\"\n-        template = self.pageTemplates[0]\n-        frame = next(f for f in template.frames if f.id == frame_id)\n-        return frame._height\n-\n-def _generate_title(dossier):\n-    \"\"\"\n-    Génère le titre du rapport en fonction du type de conteneur.\n-    \"\"\"\n-    base_title = \"Rapport de sélection\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        container_type = \"des ISO TANKS\"\n-    else:\n-        container_type = \"des Conteneurs\"\n-    \n-    return f\"{base_title} {container_type} Du Dossier: {dossier.projet} ({dossier.pays})\"\n-\n-def _generate_filename(dossier):\n-    \"\"\"\n-    Génère le nom du fichier PDF.\n-    \"\"\"\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        return f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    return f\"Rapport de selection des Conteneurs Du Dossier {dossier.projet}.pdf\"\n-\n-def _add_logo(elements, normal_style):\n-    \"\"\"\n-    Ajoute le logo au document.\n-    \"\"\"\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-def _add_info_section(elements, info_list, style):\n-    \"\"\"\n-    Ajoute une section d'informations au document.\n-    \"\"\"\n-    for line in info_list:\n-        elements.append(Paragraph(line, style))\n-        elements.append(Spacer(1, 0.05*inch))\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-def _create_containers_table(conteneurs, dossier, normal_style):\n-    \"\"\"\n-    Crée le tableau des conteneurs.\n-    \"\"\"\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-    \n-    return table\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    \"\"\"Génère un rapport PDF pour un dossier spécifique avec layout fixe.\"\"\"\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-    filename = _generate_filename(dossier)\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    # Configuration du document\n-    doc = ContainerReportDocument(\n-        response,\n-        pagesize=landscape(letter),\n-        rightMargin=0.5*inch,\n-        leftMargin=0.5*inch,\n-        topMargin=0.5*inch,\n-        bottomMargin=0.5*inch\n-    )\n-\n-    styles = getSampleStyleSheet()\n-    subtitle_style = ParagraphStyle(\n-        'SubTitle',\n-        parent=styles['Heading2'],\n-        fontSize=12,\n-        textColor=colors.grey,\n-        spaceAfter=6\n-    )\n-\n-    # Éléments du titre (en haut, pleine largeur)\n-    title_elements = []\n-    _add_logo(title_elements, styles['Normal'])\n-    title_text = _generate_title(dossier)\n-    title_elements.append(Paragraph(title_text, styles['Heading1']))\n-    title_elements.append(Spacer(1, 0.2*inch))\n-\n-    # Éléments de la colonne gauche\n-    left_elements = []\n-    \n-    # Informations du Projet\n-    left_elements.append(Paragraph(\"Informations du Projet\", subtitle_style))\n-    project_info = [\n-        f\"Projet: {dossier.projet}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"Booking: {dossier.booking}\",\n-        f\"Client: {dossier.client}\"\n-    ]\n-    _add_info_section(left_elements, project_info, styles['Normal'])\n-\n-    # Détails des Conteneurs\n-    left_elements.append(Paragraph(\"Détails des Conteneurs\", subtitle_style))\n-    container_info = [\n-        f\"Type de Conteneur: {dossier.get_type_conteneur_display()}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Nombre de conteneurs: {dossier.conteneurs.count()}\"\n-    ]\n-    _add_info_section(left_elements, container_info, styles['Normal'])\n-\n-    # Localisation\n-    left_elements.append(Paragraph(\"Localisation\", subtitle_style))\n-    location_info = [\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\"\n-    ]\n-    _add_info_section(left_elements, location_info, styles['Normal'])\n-\n-    # Éléments de la colonne droite\n-    right_elements = []\n-\n-    # Informations Maritimes\n-    right_elements.append(Paragraph(\"Informations Maritimes\", subtitle_style))\n-    maritime_info = [\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"Port de chargement (POL): {dossier.port_de_chargement}\",\n-        f\"Port de déchargement (POD): {dossier.port_de_dechargement}\"\n-    ]\n-    _add_info_section(right_elements, maritime_info, styles['Normal'])\n-\n-    # Agents et Clients\n-    right_elements.append(Paragraph(\"Agents et Clients\", subtitle_style))\n-    agent_info = [\n-        f\"Agent de sélection: Mr {dossier.agent_selection} - Tel: {dossier.agent_selection.Contact}\",\n-        f\"Agent d'habillage et empotage: Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - Tel: {dossier.agent_acconage.Contact}\"\n-    ]\n-    _add_info_section(right_elements, agent_info, styles['Normal'])\n-\n-    # Dates Importantes\n-    right_elements.append(Paragraph(\"Dates Importantes\", subtitle_style))\n-    date_info = [\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\"\n-    ]\n-    _add_info_section(right_elements, date_info, styles['Normal'])\n-\n-    # Éléments du tableau (en bas, pleine largeur)\n-    table_elements = []\n-    table_elements.append(Paragraph(\"Liste des Conteneurs\", styles['Heading2']))\n-    table_elements.append(Spacer(1, 0.1*inch))\n-    table_elements.append(_create_containers_table(conteneurs, dossier, styles['Normal']))\n-\n-    # Génération du PDF\n-    doc.build(title_elements, left_elements, right_elements, table_elements)\n-    return response\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-# from reportlab.lib import colors\n-# from reportlab.lib.units import inch\n-# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-# from reportlab.lib.styles import getSampleStyleSheet\n-# from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-# from django.http import HttpResponse\n-# from django.shortcuts import get_object_or_404\n-# import os\n-# from django.conf import settings\n-# from urllib.parse import quote\n-\n-# def generate_dossier_pdf(request, dossier_id):\n-#     dossier = get_object_or_404(Dossier, id=dossier_id)\n-#     conteneurs = dossier.conteneurs.all()\n-\n-#     response = HttpResponse(content_type='application/pdf')\n-\n-#     # Condition pour le nom du fichier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-#     else:\n-#         filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-#     # Encodage pour éviter les erreurs avec des navigateurs\n-#     response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-#     # Configuration du PDF\n-#     doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-#                             rightMargin=0.5*inch, leftMargin=0.5*inch,\n-#                             topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-#     # Styles\n-#     styles = getSampleStyleSheet()\n-#     title_style = styles['Heading1']\n-#     normal_style = styles['Normal']\n-\n-#     # Contenu du document\n-#     elements = []\n-\n-#     # Logo\n-#     logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-#     elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Titre et informations du dossier\n-#     if dossier.type_conteneur == 'ISO_20_pieds':  # Condition pour type ISO\n-#         title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-#     else:\n-#         title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-#     elements.append(Paragraph(title_text, title_style))\n-\n-#     elements.append(Spacer(1, 0.1*inch))\n-\n-#     info_text = [\n-#         f\"Client: {dossier.client}\",\n-#         f\"TRD: {dossier.TRD}\",\n-#         f\"BOOKING: {dossier.booking}\",\n-#         f\"Site de sélection: {dossier.site}\",\n-#         f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-#         f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-#         f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-#         f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-#         f\"POD: {dossier.port_de_dechargement}\",\n-#         f\"POL: {dossier.port_de_chargement}\",\n-#         f\"Commodité: {dossier.commodite}\",\n-#         f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-#         f\"Nombre de conteneurs: {conteneurs.count()}\"\n-#     ]\n-\n-#     for line in info_text:\n-#         elements.append(Paragraph(line, normal_style))\n-#         elements.append(Spacer(1, 0.05*inch))\n-\n-#     elements.append(Spacer(1, 0.2*inch))\n-\n-#     # Tableau des conteneurs\n-#     data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-#     for i, conteneur in enumerate(conteneurs, start=1):\n-#         data.append([\n-#             i,\n-#             conteneur.reference or \"N/A\",\n-#             conteneur.etat or \"N/A\",\n-#             dossier.get_type_conteneur_display()\n-#         ])\n-\n-#     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-#     table.setStyle(TableStyle([\n-#         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-#         ('FONTSIZE', (0, 0), (-1, 0), 12),\n-#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-#         ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n-#         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-#         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-#     ]))\n-\n-#     # Ajout du tableau au document\n-#     elements.append(Spacer(1, 0.2*inch))\n-#     elements.append(Paragraph('<br/>', normal_style))\n-#     elements.append(table)\n-\n-#     # Génération du PDF\n-#     doc.build(elements)\n-\n-#     return response\n-\n-\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734599811709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         'Allemagne': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n     }\n     # Couleur par défaut si le pays n'est pas dans la liste\n-    return country_colors.get(pays, colors.pink)\n+    return country_colors.get(pays, colors.beige)\n \n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n"
                },
                {
                    "date": 1734599846705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,12 +187,12 @@\n     Retourne une couleur en fonction du pays.\n     Vous pouvez personnaliser les couleurs selon vos besoins.\n     \"\"\"\n     country_colors = {\n-        'France': colors.lightblue,\n-        'Belgique': colors.yellow,\n+        'C': colors.lightblue,\n+        'Gabon': colors.yellow,\n         'Suisse': colors.pink,\n-        'Allemagne': colors.lightgreen,\n+        'Nigeria': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n     }\n     # Couleur par défaut si le pays n'est pas dans la liste\n     return country_colors.get(pays, colors.beige)\n"
                },
                {
                    "date": 1734599904609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     Retourne une couleur en fonction du pays.\n     Vous pouvez personnaliser les couleurs selon vos besoins.\n     \"\"\"\n     country_colors = {\n-        'C': colors.lightblue,\n+        'Côte d\\'Ivoire': colors.orange,\n         'Gabon': colors.yellow,\n         'Suisse': colors.pink,\n         'Nigeria': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n"
                },
                {
                    "date": 1734600110169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         'Nigeria': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n     }\n     # Couleur par défaut si le pays n'est pas dans la liste\n-    return country_colors.get(pays, colors.beige)\n+    return country_colors\n \n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n"
                },
                {
                    "date": 1734600262374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     Retourne une couleur en fonction du pays.\n     Vous pouvez personnaliser les couleurs selon vos besoins.\n     \"\"\"\n     country_colors = {\n-        'Côte d\\'Ivoire': colors.orange,\n+        'Côte d\\'Ivoire': colors.beige,\n         'Gabon': colors.yellow,\n         'Suisse': colors.pink,\n         'Nigeria': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n"
                },
                {
                    "date": 1734600395628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,23 +181,10 @@\n from django.shortcuts import get_object_or_404\n import os\n from django.conf import settings\n from urllib.parse import quote\n-def get_country_color(pays):\n-    \"\"\"\n-    Retourne une couleur en fonction du pays.\n-    Vous pouvez personnaliser les couleurs selon vos besoins.\n-    \"\"\"\n-    country_colors = {\n-        'Côte d\\'Ivoire': colors.beige,\n-        'Gabon': colors.yellow,\n-        'Suisse': colors.pink,\n-        'Nigeria': colors.lightgreen,\n-        # Ajoutez d'autres pays selon vos besoins\n-    }\n-    # Couleur par défaut si le pays n'est pas dans la liste\n-    return country_colors\n \n+\n def generate_dossier_pdf(request, dossier_id):\n     dossier = get_object_or_404(Dossier, id=dossier_id)\n     conteneurs = dossier.conteneurs.all()\n \n@@ -267,12 +254,13 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n-\n+    if dossier.pays=='Gabon':\n+        country_color=colors.lightgreen\n+    \n     # Obtenir la couleur en fonction du pays\n-    country_color = get_country_color(dossier.pays)\n-\n+   \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734600493746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n     if dossier.pays=='Gabon':\n-        country_color=colors.lightgreen\n+        country_color=lightgreen\n     \n     # Obtenir la couleur en fonction du pays\n    \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n"
                },
                {
                    "date": 1734600501190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n     if dossier.pays=='Gabon':\n-        country_color=lightgreen\n+        country_color=\"lightgreen\"\n     \n     # Obtenir la couleur en fonction du pays\n    \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n"
                },
                {
                    "date": 1734600549493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,12 +254,16 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n-    if dossier.pays=='Gabon':\n-        country_color=\"lightgreen\"\n-    \n-    # Obtenir la couleur en fonction du pays\n+    def generate_dossier_pdf(request, dossier_id):\n+        country_color = None  # Initialize the variable before using it.\n+        # Some code logic\n+        if some_condition:\n+            country_color = 'some_value'  # Assign value if the condition is met\n+        # More code where country_color is used\n+\n+        # Obtenir la couleur en fonction du pays\n    \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n"
                },
                {
                    "date": 1734600585027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,14 +254,9 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n-    def generate_dossier_pdf(request, dossier_id):\n-        country_color = None  # Initialize the variable before using it.\n-        # Some code logic\n-        if some_condition:\n-            country_color = 'some_value'  # Assign value if the condition is met\n-        # More code where country_color is used\n+ \n \n         # Obtenir la couleur en fonction du pays\n    \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n@@ -271,9 +266,9 @@\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), country_color),  # Utilisation de la couleur du pays\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.azure),  # Utilisation de la couleur du pays\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n"
                },
                {
                    "date": 1734600684433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n  \n-\n+    contry_color = colors.darkorange\n         # Obtenir la couleur en fonction du pays\n    \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n@@ -266,9 +266,9 @@\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), colors.azure),  # Utilisation de la couleur du pays\n+        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n"
                },
                {
                    "date": 1734600715601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,12 +254,12 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n- \n+\n     contry_color = colors.darkorange\n-        # Obtenir la couleur en fonction du pays\n-   \n+    \n+\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734600743261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,359 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+from urllib.parse import quote\n+\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+   \n+    if dossier.pays == 'Gabn':\n+        contry_color = colors.darkorange\n+    \n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    doc.build(elements)\n+\n+    return response\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734600773588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n             dossier.get_type_conteneur_display()\n         ])\n \n    \n-    if dossier.pays == 'Gabn':\n+    if dossier.pays == 'Gabon':\n         contry_color = colors.darkorange\n     \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n"
                },
                {
                    "date": 1734601064587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,9 @@\n \n    \n     if dossier.pays == 'Gabon':\n         contry_color = colors.darkorange\n+        pass\n     \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n"
                },
                {
                    "date": 1734601083935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,10 +258,9 @@\n \n    \n     if dossier.pays == 'Gabon':\n         contry_color = colors.darkorange\n-        pass\n-    \n+       \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n"
                },
                {
                    "date": 1734601149527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,11 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n \n-   \n+     # Initialiser contry_color avec une couleur par défaut\n+    contry_color = colors.white  # Ou toute autre couleur par défaut\n+    \n     if dossier.pays == 'Gabon':\n         contry_color = colors.darkorange\n        \n \n@@ -355,362 +357,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-from urllib.parse import quote\n-\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    contry_color = colors.darkorange\n-    \n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n-    elements.append(table)\n-\n-    doc.build(elements)\n-\n-    return response\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734601374813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,8 +259,9 @@\n      # Initialiser contry_color avec une couleur par défaut\n     contry_color = colors.white  # Ou toute autre couleur par défaut\n     \n     if dossier.pays == 'Gabon':\n+        print('bonjour le gabon ')\n         contry_color = colors.darkorange\n        \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n"
                },
                {
                    "date": 1734602941165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,15 +255,26 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n \n-     # Initialiser contry_color avec une couleur par défaut\n-    contry_color = colors.white  # Ou toute autre couleur par défaut\n-    \n+    contry_color = colors.white  # Couleur par défaut\n+\n+    # Logic pour changer la couleur en fonction du pays\n     if dossier.pays == 'Gabon':\n-        print('bonjour le gabon ')\n+        print('Bonjour le Gabon')\n         contry_color = colors.darkorange\n-       \n+    elif dossier.pays == 'France':\n+        print('Bonjour la France')\n+        contry_color = colors.blue\n+    elif dossier.pays == 'Canada':\n+        print('Bonjour le Canada')\n+        contry_color = colors.red\n+    elif dossier.pays == 'Brazil':\n+        print('Olá Brasil')\n+        contry_color = colors.green\n+    elif dossier.pays == 'Japan':\n+        print('こんにちは日本')\n+        contry_color = colors.red  \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n"
                },
                {
                    "date": 1734603115897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,10 +261,10 @@\n     # Logic pour changer la couleur en fonction du pays\n     if dossier.pays == 'Gabon':\n         print('Bonjour le Gabon')\n         contry_color = colors.darkorange\n-    elif dossier.pays == 'France':\n-        print('Bonjour la France')\n+    elif dossier.pays == 'Côte d\\'Ivoire':\n+        print('Bonjour la Côte d\\'Ivoire')\n         contry_color = colors.blue\n     elif dossier.pays == 'Canada':\n         print('Bonjour le Canada')\n         contry_color = colors.red\n"
                },
                {
                    "date": 1734603138319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,368 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+from urllib.parse import quote\n+\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+\n+    contry_color = colors.white  # Couleur par défaut\n+\n+    # Logic pour changer la couleur en fonction du pays\n+    if dossier.pays == 'Gabon':\n+        print('Bonjour le Gabon')\n+        contry_color = colors.darkorange\n+    elif dossier.pays == 'Côte d\\'Ivoire':\n+        print('Bonjour la Côte d\\'Ivoire')\n+        contry_color = colors.blue\n+    elif dossier.pays == 'Nigeria':\n+        print('Bonjour le Nigeria')\n+        contry_color = colors.red\n+     \n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    doc.build(elements)\n+\n+    return response\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734603518571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,9 +259,9 @@\n     contry_color = colors.white  # Couleur par défaut\n \n     # Logic pour changer la couleur en fonction du pays\n     if dossier.pays == 'Gabon':\n-        print('Bonjour le Gabon')\n+        print('Bonjour le Gabon ')\n         contry_color = colors.darkorange\n     elif dossier.pays == 'Côte d\\'Ivoire':\n         print('Bonjour la Côte d\\'Ivoire')\n         contry_color = colors.blue\n@@ -364,378 +364,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-from urllib.parse import quote\n-\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-\n-    contry_color = colors.white  # Couleur par défaut\n-\n-    # Logic pour changer la couleur en fonction du pays\n-    if dossier.pays == 'Gabon':\n-        print('Bonjour le Gabon')\n-        contry_color = colors.darkorange\n-    elif dossier.pays == 'Côte d\\'Ivoire':\n-        print('Bonjour la Côte d\\'Ivoire')\n-        contry_color = colors.blue\n-    elif dossier.pays == 'Canada':\n-        print('Bonjour le Canada')\n-        contry_color = colors.red\n-    elif dossier.pays == 'Brazil':\n-        print('Olá Brasil')\n-        contry_color = colors.green\n-    elif dossier.pays == 'Japan':\n-        print('こんにちは日本')\n-        contry_color = colors.red  \n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n-    elements.append(table)\n-\n-    doc.build(elements)\n-\n-    return response\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734603546503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,15 +259,15 @@\n     contry_color = colors.white  # Couleur par défaut\n \n     # Logic pour changer la couleur en fonction du pays\n     if dossier.pays == 'Gabon':\n-        print('Bonjour le Gabon ')\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.darkorange\n     elif dossier.pays == 'Côte d\\'Ivoire':\n-        print('Bonjour la Côte d\\'Ivoire')\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.blue\n     elif dossier.pays == 'Nigeria':\n-        print('Bonjour le Nigeria')\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.red\n      \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n"
                },
                {
                    "date": 1734603696901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,9 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n+    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n \n     contry_color = colors.white  # Couleur par défaut\n \n     # Logic pour changer la couleur en fonction du pays\n"
                },
                {
                    "date": 1734603848560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n     # Logic pour changer la couleur en fonction du pays\n     if dossier.pays == 'Gabon':\n         print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.darkorange\n-    elif dossier.pays == 'Côte d\\'Ivoire':\n+    elif dossier.pays == \"Côte d'Ivoire\":\n         print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.blue\n     elif dossier.pays == 'Nigeria':\n         print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n"
                },
                {
                    "date": 1734604062032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,22 +256,24 @@\n             dossier.get_type_conteneur_display()\n         ])\n     print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n \n-    contry_color = colors.white  # Couleur par défaut\n+    if isinstance(dossier.pays, str):\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérifie si dossier.pays est une chaîne de caractères\n+        dossier_pays_clean = dossier.pays.strip().lower()\n \n-    # Logic pour changer la couleur en fonction du pays\n-    if dossier.pays == 'Gabon':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.darkorange\n-    elif dossier.pays == \"Côte d'Ivoire\":\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.blue\n-    elif dossier.pays == 'Nigeria':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.red\n-     \n+        if dossier_pays_clean == 'gabon':\n+            contry_color = colors.darkorange\n+        elif dossier_pays_clean == 'côte d\\'ivoire':\n+            contry_color = colors.blue\n+        elif dossier_pays_clean == 'nigeria':\n+            contry_color = colors.red\n+        else:\n+            print(f\"Pays non reconnu: {dossier.pays}\")\n+    else:\n+        print(f\"Valeur inattendue pour dossier.pays: {dossier.pays}\")\n \n+\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734604155808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,26 +254,28 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n-    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n+    print(f\"Pays sélectionné: '{dossier.pays}'\")  # Affiche la valeur exacte avec les guillemets pour repérer les espaces\n \n-    if isinstance(dossier.pays, str):\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérifie si dossier.pays est une chaîne de caractères\n-        dossier_pays_clean = dossier.pays.strip().lower()\n+    # Suppression des espaces avant et après\n+    dossier_pays_clean = dossier.pays.strip()\n \n-        if dossier_pays_clean == 'gabon':\n-            contry_color = colors.darkorange\n-        elif dossier_pays_clean == 'côte d\\'ivoire':\n-            contry_color = colors.blue\n-        elif dossier_pays_clean == 'nigeria':\n-            contry_color = colors.red\n-        else:\n-            print(f\"Pays non reconnu: {dossier.pays}\")\n+    # Vérification avec la version nettoyée\n+    if dossier_pays_clean == 'Gabon':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+        contry_color = colors.darkorange\n+    elif dossier_pays_clean == 'Côte d\\'Ivoire':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+        contry_color = colors.blue\n+    elif dossier_pays_clean == 'Nigeria':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+        contry_color = colors.red\n     else:\n-        print(f\"Valeur inattendue pour dossier.pays: {dossier.pays}\")\n+        print(f\"Pays non reconnu: {dossier.pays}\")  # Pour vérifier si d'autres pays sont considérés\n \n \n+\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734604301217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,28 +254,24 @@\n             conteneur.reference or \"N/A\",\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n-    print(f\"Pays sélectionné: '{dossier.pays}'\")  # Affiche la valeur exacte avec les guillemets pour repérer les espaces\n+    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n \n-    # Suppression des espaces avant et après\n-    dossier_pays_clean = dossier.pays.strip()\n+    contry_color = colors.white  # Couleur par défaut\n \n-    # Vérification avec la version nettoyée\n-    if dossier_pays_clean == 'Gabon':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+    # Logic pour changer la couleur en fonction du pays\n+    if dossier.pays == 'Gabon':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.darkorange\n-    elif dossier_pays_clean == 'Côte d\\'Ivoire':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+    elif dossier.pays == \"Côte d'Ivoire\":\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.blue\n-    elif dossier_pays_clean == 'Nigeria':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Cela devrait maintenant correspondre\n+    elif dossier.pays == 'Nigeria':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n         contry_color = colors.red\n-    else:\n-        print(f\"Pays non reconnu: {dossier.pays}\")  # Pour vérifier si d'autres pays sont considérés\n+     \n \n-\n-\n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n         ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n"
                },
                {
                    "date": 1734604387847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,383 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+from urllib.parse import quote\n+\n+def get_country_color(pays):\n+    \"\"\"\n+    Retourne une couleur en fonction du pays.\n+    Vous pouvez personnaliser les couleurs selon vos besoins.\n+    \"\"\"\n+    country_colors = {\n+        'France': colors.lightblue,\n+        'Belgique': colors.yellow,\n+        'Suisse': colors.pink,\n+        'Allemagne': colors.lightgreen,\n+        # Ajoutez d'autres pays selon vos besoins\n+    }\n+    # Couleur par défaut si le pays n'est pas dans la liste\n+    return country_colors.get(pays, colors.beige)\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n+\n+    contry_color = colors.white  # Couleur par défaut\n+\n+    # Logic pour changer la couleur en fonction du pays\n+    if dossier.pays == 'Gabon':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n+        contry_color = colors.darkorange\n+    elif dossier.pays == \"Côte d'Ivoire\":\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n+        contry_color = colors.blue\n+    elif dossier.pays == 'Nigeria':\n+        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n+        contry_color = colors.red\n+     \n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    doc.build(elements)\n+\n+    return response\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734604449341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,20 +270,8 @@\n             dossier.get_type_conteneur_display()\n         ])\n     print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n \n-    contry_color = colors.white  # Couleur par défaut\n-\n-    # Logic pour changer la couleur en fonction du pays\n-    if dossier.pays == 'Gabon':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.darkorange\n-    elif dossier.pays == \"Côte d'Ivoire\":\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.blue\n-    elif dossier.pays == 'Nigeria':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.red\n      \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n@@ -292,9 +280,9 @@\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n+        ('BACKGROUND', (0, 1), (-1, -1), get_country_color),  # Utilisation de la couleur du pays\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n@@ -379,374 +367,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-from urllib.parse import quote\n-\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-\n-    contry_color = colors.white  # Couleur par défaut\n-\n-    # Logic pour changer la couleur en fonction du pays\n-    if dossier.pays == 'Gabon':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.darkorange\n-    elif dossier.pays == \"Côte d'Ivoire\":\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.blue\n-    elif dossier.pays == 'Nigeria':\n-        print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-        contry_color = colors.red\n-     \n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), contry_color),  # Utilisation de la couleur du pays\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n-    elements.append(table)\n-\n-    doc.build(elements)\n-\n-    return response\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734604597850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n     Retourne une couleur en fonction du pays.\n     Vous pouvez personnaliser les couleurs selon vos besoins.\n     \"\"\"\n     country_colors = {\n-        'France': colors.lightblue,\n+        'db22fd0ba3344d87a85600fb24f6ccc5': colors.lightblue,\n         'Belgique': colors.yellow,\n         'Suisse': colors.pink,\n         'Allemagne': colors.lightgreen,\n         # Ajoutez d'autres pays selon vos besoins\n"
                },
                {
                    "date": 1734604680135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,388 @@\n+#from django.http import HttpRequest, HttpResponseRedirect\n+from django.db import IntegrityError\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n+from conteneurs.models import *\n+from conteneurs.forms import ConteneurForm, ConteneurFormSet\n+from django.contrib import messages\n+from django.shortcuts import render, get_object_or_404, redirect\n+from django.views.generic.edit import FormView\n+from django.forms import modelformset_factory\n+from django.urls import reverse_lazy\n+from django.contrib.auth.mixins import LoginRequiredMixin\n+from reportlab.pdfgen import canvas\n+from reportlab.lib.utils import ImageReader\n+from django.templatetags.static import static\n+from io import BytesIO\n+from reportlab.lib.pagesizes import letter\n+from reportlab.pdfgen import canvas\n+from django.core.mail import EmailMessage\n+from django.template.loader import render_to_string\n+from django.conf import settings\n+from django.core.mail import EmailMultiAlternatives\n+from django.utils import timezone\n+from django.http import HttpResponse\n+from django.template.loader import get_template\n+from weasyprint import HTML\n+from django.templatetags.static import static\n+\n+class DossierSelectionListView(LoginRequiredMixin, ListView):\n+    model = Dossier\n+    template_name = 'pages/Dossier_selection/dossier_list.html'\n+    context_object_name = 'dossiers'\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Retourne les dossiers où l'agent de sélection connecté est associé,\n+        excluant ceux en 'Aconage_en_cours'.\n+        \"\"\"\n+        user = self.request.user\n+        if user.username == 'Responsable':\n+            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+        else:\n+            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n+\n+    def get_context_data(self, **kwargs):\n+        \"\"\"\n+        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n+        \"\"\"\n+        context = super().get_context_data(**kwargs)\n+        user = self.request.user\n+\n+        if user.username == 'Responsable':\n+            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n+        else:\n+            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n+            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n+\n+        return context\n+\n+def view_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n+\n+    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n+        'conteneurs': conteneurs,\n+        'dossier': dossier\n+    })\n+\n+\n+def manage_conteneurs(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    ConteneurFormSet = modelformset_factory(\n+        Conteneur,\n+        form=ConteneurForm,\n+        extra=1,\n+        can_delete=True\n+    )\n+\n+    if request.method == 'POST':\n+        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n+        if formset.is_valid():\n+            conteneurs = formset.save(commit=False)\n+            for form in formset.deleted_forms:\n+                if form.instance.pk:\n+                    form.instance.delete()\n+            for conteneur in conteneurs:\n+                conteneur.dossier = dossier\n+                conteneur.agent_selection = request.user\n+                conteneur.save()\n+            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n+            return redirect('view_conteneurs', dossier_id=dossier_id)\n+        else:\n+            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n+    else:\n+        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n+        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n+\n+\n+    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n+        'formset': formset,\n+        'dossier': dossier\n+    })\n+\n+\n+\n+class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n+    model = Conteneur\n+    form_class = ConteneurForm\n+    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n+\n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+    \n+\n+class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n+    model = Conteneur\n+    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n+    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n+    \n+    def get_success_url(self):\n+        # Obtenir le conteneur mis à jour\n+        conteneur = self.object\n+        dossier_id = conteneur.dossier.id\n+        # Rediriger vers la vue des conteneurs du dossier\n+        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n+\n+    def get_object(self, queryset=None):\n+        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n+\n+\n+\n+\n+\"\"\"def generate_dossier_pdf(request, dossier_id):\n+    dossier = Dossier.objects.get(id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    # URL absolue du logo\n+    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n+\n+    # Charger le template HTML\n+    template = get_template('pages/Dossier_selection/pdf_selection.html')\n+    html_content = template.render({\n+        'projet': dossier.projet,\n+        'client': dossier.client,\n+        'TRD': dossier.TRD,\n+        'compagnie_maritime': dossier.compagnie_maritime,\n+        'port_de_dechargement': dossier.port_de_dechargement,\n+        'port_de_chargement': dossier.port_de_chargement,\n+        'commodite': dossier.commodite,\n+        'conteneurs': conteneurs,\n+        'site': dossier.site,\n+        'Site_empotage': dossier.Site_empotage,\n+        'agent_selection': dossier.agent_selection,\n+        'agent_acconage': dossier.agent_acconage,\n+        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n+    })\n+\n+    # Convertir en PDF\n+    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n+\n+    # Retourner le fichier PDF en réponse HTTP\n+    response = HttpResponse(pdf_file, content_type='application/pdf')\n+    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n+    return response\n+\"\"\"\n+\n+from reportlab.lib import colors\n+from reportlab.lib.units import inch\n+from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n+from reportlab.lib.styles import getSampleStyleSheet\n+from reportlab.lib.pagesizes import landscape, letter  # Add this line\n+from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+import os\n+from django.conf import settings\n+from urllib.parse import quote\n+\n+# def get_country_color(pays):\n+#     \"\"\"\n+#     Retourne une couleur en fonction du pays.\n+#     Vous pouvez personnaliser les couleurs selon vos besoins.\n+#     \"\"\"\n+#     country_colors = {\n+#         'db22fd0ba3344d87a85600fb24f6ccc5': colors.lightblue,\n+#         'Belgique': colors.yellow,\n+#         'Suisse': colors.pink,\n+#         'Allemagne': colors.lightgreen,\n+#         # Ajoutez d'autres pays selon vos besoins\n+#     }\n+#     # Couleur par défaut si le pays n'est pas dans la liste\n+#     return country_colors.get(pays, colors.beige)\n+\n+def generate_dossier_pdf(request, dossier_id):\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+    conteneurs = dossier.conteneurs.all()\n+\n+    response = HttpResponse(content_type='application/pdf')\n+\n+    # Condition pour le nom du fichier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n+    else:\n+        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n+\n+    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n+\n+    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n+                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n+                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n+\n+    styles = getSampleStyleSheet()\n+    title_style = styles['Heading1']\n+    normal_style = styles['Normal']\n+\n+    elements = []\n+\n+    # Logo\n+    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n+    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Titre et informations du dossier\n+    if dossier.type_conteneur == 'ISO_20_pieds':\n+        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n+    else:\n+        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n+\n+    elements.append(Paragraph(title_text, title_style))\n+\n+    elements.append(Spacer(1, 0.1*inch))\n+\n+    info_text = [\n+        f\"Client: {dossier.client}\",\n+        f\"TRD: {dossier.TRD}\",\n+        f\"BOOKING: {dossier.booking}\",\n+        f\"Site de sélection: {dossier.site}\",\n+        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n+        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n+        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n+        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n+        f\"POD: {dossier.port_de_dechargement}\",\n+        f\"POL: {dossier.port_de_chargement}\",\n+        f\"Commodité: {dossier.commodite}\",\n+        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n+        f\"Nombre de conteneurs: {conteneurs.count()}\"\n+    ]\n+\n+    for line in info_text:\n+        elements.append(Paragraph(line, normal_style))\n+        elements.append(Spacer(1, 0.05*inch))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+\n+    # Tableau des conteneurs\n+    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n+    for i, conteneur in enumerate(conteneurs, start=1):\n+        data.append([\n+            i,\n+            conteneur.reference or \"N/A\",\n+            conteneur.etat or \"N/A\",\n+            dossier.get_type_conteneur_display()\n+        ])\n+ \n+        # Vérification de l'ID du pays\n+    print(f\"ID pays sélectionné: {dossier.pays_id}\")  # Vérification de la valeur\n+\n+    country_color = colors.white  # Couleur par défaut\n+\n+    # Logic pour changer la couleur en fonction de l'ID du pays\n+    if dossier.pays_id == :  # Supposons que l'ID du Gabon soit 1\n+        print(f\"Pays sélectionné: Gabon (ID: {dossier.pays_id})\")  # Vérification de la valeur\n+        country_color = colors.darkorange\n+    elif dossier.pays_id == \"db22fd0ba3344d87a85600fb24f6ccc5\":  # Supposons que l'ID de la Côte d'Ivoire soit 2\n+        print(f\"Pays sélectionné: Côte d'Ivoire (ID: {dossier.pays_id})\")  # Vérification de la valeur\n+        country_color = colors.blue\n+    elif dossier.pays_id == 3:  # Supposons que l'ID du Nigeria soit 3\n+        print(f\"Pays sélectionné: Nigeria (ID: {dossier.pays_id})\")  # Vérification de la valeur\n+        country_color = colors.red\n+    else:\n+        print(\"Pays non reconnu\")\n+\n+     \n+\n+    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n+    table.setStyle(TableStyle([\n+        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n+        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n+        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n+        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n+        ('FONTSIZE', (0, 0), (-1, 0), 12),\n+        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n+        ('BACKGROUND', (0, 1), (-1, -1), country_color),  # Utilisation de la couleur du pays\n+        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n+        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n+    ]))\n+\n+    elements.append(Spacer(1, 0.2*inch))\n+    elements.append(Paragraph('<br/>', normal_style))\n+    elements.append(table)\n+\n+    doc.build(elements)\n+\n+    return response\n+def soumettre_dossier(request, dossier_id):\n+    # Récupérer le dossier\n+    dossier = get_object_or_404(Dossier, id=dossier_id)\n+\n+    # Vérifier le statut du dossier\n+    if dossier.statut == 'selection_en_cours':\n+        # Changer le statut du dossier\n+        dossier.statut = 'Aconage_en_cours'\n+        dossier.statut_date = timezone.now()\n+        dossier.save()\n+\n+        # Récupérer les emails des personnes concernées\n+        emails = []\n+        if dossier.agent_acconage:\n+            emails.append(dossier.agent_acconage.email)\n+        if dossier.secretaire:\n+            emails.append(dossier.secretaire.email)\n+\n+        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n+        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n+        emails += chefs_emails\n+\n+        # Emails à mettre en copie (CC)\n+        cc_emails = [\n+            'alice.tuo@oils-of-africa.ci',\n+            'appro.stock@oils-of-africa.ci',\n+            'fitting.loadingassistance1@oils-of-africa.ci',\n+            'ops@africa-newportlogistics.ci',\n+            'import.export@africa-newportlogistics.ci',\n+            'stagiaireoils@gmail.com'\n+        ]\n+\n+        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n+        from_email = request.user.email\n+\n+        # Générer le PDF\n+        pdf_response = generate_dossier_pdf(request, dossier_id)\n+        pdf_content = pdf_response.content\n+\n+        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n+        email = EmailMultiAlternatives(\n+            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n+            body=(\n+                f\"<html>\"\n+                f\"<body>\"\n+                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n+                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n+                f\"détails du dossier et des conteneurs.</p>\"\n+                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n+                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n+                f\"</body>\"\n+                f\"</html>\"\n+            ),\n+            from_email=from_email,\n+            to=emails,\n+            cc=cc_emails\n+        )\n+        \n+        # Joindre le PDF\n+        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n+\n+        # Indiquer que l'email est en HTML\n+        email.content_subtype = 'html'\n+\n+        # Envoyer l'email\n+        try:\n+            email.send()\n+            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n+        except Exception as e:\n+            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n+    else:\n+        # Si le dossier n'est pas dans le bon état, afficher une erreur\n+        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n+\n+    # Redirection vers la liste des dossiers\n+    return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734604698452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n \n     country_color = colors.white  # Couleur par défaut\n \n     # Logic pour changer la couleur en fonction de l'ID du pays\n-    if dossier.pays_id == :  # Supposons que l'ID du Gabon soit 1\n+    if dossier.pays_id == \"45245cc38bc045d5bc4c33cb585e3437\":  # Supposons que l'ID du Gabon soit 1\n         print(f\"Pays sélectionné: Gabon (ID: {dossier.pays_id})\")  # Vérification de la valeur\n         country_color = colors.darkorange\n     elif dossier.pays_id == \"db22fd0ba3344d87a85600fb24f6ccc5\":  # Supposons que l'ID de la Côte d'Ivoire soit 2\n         print(f\"Pays sélectionné: Côte d'Ivoire (ID: {dossier.pays_id})\")  # Vérification de la valeur\n@@ -384,376 +384,5 @@\n         # Si le dossier n'est pas dans le bon état, afficher une erreur\n         messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n \n     # Redirection vers la liste des dossiers\n-    return redirect('dossier_list_selction')\n-#from django.http import HttpRequest, HttpResponseRedirect\n-from django.db import IntegrityError\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView\n-from conteneurs.models import *\n-from conteneurs.forms import ConteneurForm, ConteneurFormSet\n-from django.contrib import messages\n-from django.shortcuts import render, get_object_or_404, redirect\n-from django.views.generic.edit import FormView\n-from django.forms import modelformset_factory\n-from django.urls import reverse_lazy\n-from django.contrib.auth.mixins import LoginRequiredMixin\n-from reportlab.pdfgen import canvas\n-from reportlab.lib.utils import ImageReader\n-from django.templatetags.static import static\n-from io import BytesIO\n-from reportlab.lib.pagesizes import letter\n-from reportlab.pdfgen import canvas\n-from django.core.mail import EmailMessage\n-from django.template.loader import render_to_string\n-from django.conf import settings\n-from django.core.mail import EmailMultiAlternatives\n-from django.utils import timezone\n-from django.http import HttpResponse\n-from django.template.loader import get_template\n-from weasyprint import HTML\n-from django.templatetags.static import static\n-\n-class DossierSelectionListView(LoginRequiredMixin, ListView):\n-    model = Dossier\n-    template_name = 'pages/Dossier_selection/dossier_list.html'\n-    context_object_name = 'dossiers'\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Retourne les dossiers où l'agent de sélection connecté est associé,\n-        excluant ceux en 'Aconage_en_cours'.\n-        \"\"\"\n-        user = self.request.user\n-        if user.username == 'Responsable':\n-            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-        else:\n-            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n-    def get_context_data(self, **kwargs):\n-        \"\"\"\n-        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n-        \"\"\"\n-        context = super().get_context_data(**kwargs)\n-        user = self.request.user\n-\n-        if user.username == 'Responsable':\n-            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n-        else:\n-            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n-            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n-\n-        return context\n-\n-def view_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n-\n-    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n-        'conteneurs': conteneurs,\n-        'dossier': dossier\n-    })\n-\n-\n-def manage_conteneurs(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    ConteneurFormSet = modelformset_factory(\n-        Conteneur,\n-        form=ConteneurForm,\n-        extra=1,\n-        can_delete=True\n-    )\n-\n-    if request.method == 'POST':\n-        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n-        if formset.is_valid():\n-            conteneurs = formset.save(commit=False)\n-            for form in formset.deleted_forms:\n-                if form.instance.pk:\n-                    form.instance.delete()\n-            for conteneur in conteneurs:\n-                conteneur.dossier = dossier\n-                conteneur.agent_selection = request.user\n-                conteneur.save()\n-            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n-            return redirect('view_conteneurs', dossier_id=dossier_id)\n-        else:\n-            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n-    else:\n-        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n-        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n-\n-\n-    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n-        'formset': formset,\n-        'dossier': dossier\n-    })\n-\n-\n-\n-class ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n-    model = Conteneur\n-    form_class = ConteneurForm\n-    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n-\n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-    \n-\n-class ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n-    model = Conteneur\n-    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n-    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n-    \n-    def get_success_url(self):\n-        # Obtenir le conteneur mis à jour\n-        conteneur = self.object\n-        dossier_id = conteneur.dossier.id\n-        # Rediriger vers la vue des conteneurs du dossier\n-        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n-\n-    def get_object(self, queryset=None):\n-        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n-\n-\n-\n-\n-\"\"\"def generate_dossier_pdf(request, dossier_id):\n-    dossier = Dossier.objects.get(id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    # URL absolue du logo\n-    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n-\n-    # Charger le template HTML\n-    template = get_template('pages/Dossier_selection/pdf_selection.html')\n-    html_content = template.render({\n-        'projet': dossier.projet,\n-        'client': dossier.client,\n-        'TRD': dossier.TRD,\n-        'compagnie_maritime': dossier.compagnie_maritime,\n-        'port_de_dechargement': dossier.port_de_dechargement,\n-        'port_de_chargement': dossier.port_de_chargement,\n-        'commodite': dossier.commodite,\n-        'conteneurs': conteneurs,\n-        'site': dossier.site,\n-        'Site_empotage': dossier.Site_empotage,\n-        'agent_selection': dossier.agent_selection,\n-        'agent_acconage': dossier.agent_acconage,\n-        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n-    })\n-\n-    # Convertir en PDF\n-    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n-\n-    # Retourner le fichier PDF en réponse HTTP\n-    response = HttpResponse(pdf_file, content_type='application/pdf')\n-    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n-    return response\n-\"\"\"\n-\n-from reportlab.lib import colors\n-from reportlab.lib.units import inch\n-from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n-from reportlab.lib.styles import getSampleStyleSheet\n-from reportlab.lib.pagesizes import landscape, letter  # Add this line\n-from django.http import HttpResponse\n-from django.shortcuts import get_object_or_404\n-import os\n-from django.conf import settings\n-from urllib.parse import quote\n-\n-def get_country_color(pays):\n-    \"\"\"\n-    Retourne une couleur en fonction du pays.\n-    Vous pouvez personnaliser les couleurs selon vos besoins.\n-    \"\"\"\n-    country_colors = {\n-        'db22fd0ba3344d87a85600fb24f6ccc5': colors.lightblue,\n-        'Belgique': colors.yellow,\n-        'Suisse': colors.pink,\n-        'Allemagne': colors.lightgreen,\n-        # Ajoutez d'autres pays selon vos besoins\n-    }\n-    # Couleur par défaut si le pays n'est pas dans la liste\n-    return country_colors.get(pays, colors.beige)\n-\n-def generate_dossier_pdf(request, dossier_id):\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-    conteneurs = dossier.conteneurs.all()\n-\n-    response = HttpResponse(content_type='application/pdf')\n-\n-    # Condition pour le nom du fichier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        filename = f\"Rapport de selection des ISOTANKS Du Dossier {dossier.projet}.pdf\"\n-    else:\n-        filename = f\"Rapport de selection des Conteneurs Du Dossier{dossier.projet}.pdf\"\n-\n-    response['Content-Disposition'] = f'attachment; filename=\"{quote(filename)}\"'\n-\n-    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n-                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n-                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n-\n-    styles = getSampleStyleSheet()\n-    title_style = styles['Heading1']\n-    normal_style = styles['Normal']\n-\n-    elements = []\n-\n-    # Logo\n-    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n-    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Titre et informations du dossier\n-    if dossier.type_conteneur == 'ISO_20_pieds':\n-        title_text = f\"Rapport de sélection des ISO TANKS Du Dossier: {dossier.projet}({dossier.pays})\"\n-    else:\n-        title_text = f\"Rapport de sélection des Conteneurs Du Dossier: {dossier.projet}({dossier.pays})\"\n-\n-    elements.append(Paragraph(title_text, title_style))\n-\n-    elements.append(Spacer(1, 0.1*inch))\n-\n-    info_text = [\n-        f\"Client: {dossier.client}\",\n-        f\"TRD: {dossier.TRD}\",\n-        f\"BOOKING: {dossier.booking}\",\n-        f\"Site de sélection: {dossier.site}\",\n-        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n-        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n-        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n-        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n-        f\"POD: {dossier.port_de_dechargement}\",\n-        f\"POL: {dossier.port_de_chargement}\",\n-        f\"Commodité: {dossier.commodite}\",\n-        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n-        f\"Nombre de conteneurs: {conteneurs.count()}\"\n-    ]\n-\n-    for line in info_text:\n-        elements.append(Paragraph(line, normal_style))\n-        elements.append(Spacer(1, 0.05*inch))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-\n-    # Tableau des conteneurs\n-    data = [[\"N°\", \"Réf\", \"État\", \"Type\"]]\n-    for i, conteneur in enumerate(conteneurs, start=1):\n-        data.append([\n-            i,\n-            conteneur.reference or \"N/A\",\n-            conteneur.etat or \"N/A\",\n-            dossier.get_type_conteneur_display()\n-        ])\n-    print(f\"Pays sélectionné: {dossier.pays}\")  # Vérification de la valeur\n-\n-     \n-\n-    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n-    table.setStyle(TableStyle([\n-        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n-        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n-        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n-        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n-        ('FONTSIZE', (0, 0), (-1, 0), 12),\n-        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), get_country_color),  # Utilisation de la couleur du pays\n-        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n-        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n-    ]))\n-\n-    elements.append(Spacer(1, 0.2*inch))\n-    elements.append(Paragraph('<br/>', normal_style))\n-    elements.append(table)\n-\n-    doc.build(elements)\n-\n-    return response\n-def soumettre_dossier(request, dossier_id):\n-    # Récupérer le dossier\n-    dossier = get_object_or_404(Dossier, id=dossier_id)\n-\n-    # Vérifier le statut du dossier\n-    if dossier.statut == 'selection_en_cours':\n-        # Changer le statut du dossier\n-        dossier.statut = 'Aconage_en_cours'\n-        dossier.statut_date = timezone.now()\n-        dossier.save()\n-\n-        # Récupérer les emails des personnes concernées\n-        emails = []\n-        if dossier.agent_acconage:\n-            emails.append(dossier.agent_acconage.email)\n-        if dossier.secretaire:\n-            emails.append(dossier.secretaire.email)\n-\n-        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n-        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n-        emails += chefs_emails\n-\n-        # Emails à mettre en copie (CC)\n-        cc_emails = [\n-            'alice.tuo@oils-of-africa.ci',\n-            'appro.stock@oils-of-africa.ci',\n-            'fitting.loadingassistance1@oils-of-africa.ci',\n-            'ops@africa-newportlogistics.ci',\n-            'import.export@africa-newportlogistics.ci',\n-            'stagiaireoils@gmail.com'\n-        ]\n-\n-        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n-        from_email = request.user.email\n-\n-        # Générer le PDF\n-        pdf_response = generate_dossier_pdf(request, dossier_id)\n-        pdf_content = pdf_response.content\n-\n-        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n-        email = EmailMultiAlternatives(\n-            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n-            body=(\n-                f\"<html>\"\n-                f\"<body>\"\n-                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n-                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n-                f\"détails du dossier et des conteneurs.</p>\"\n-                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n-                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n-                f\"</body>\"\n-                f\"</html>\"\n-            ),\n-            from_email=from_email,\n-            to=emails,\n-            cc=cc_emails\n-        )\n-        \n-        # Joindre le PDF\n-        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n-\n-        # Indiquer que l'email est en HTML\n-        email.content_subtype = 'html'\n-\n-        # Envoyer l'email\n-        try:\n-            email.send()\n-            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n-        except Exception as e:\n-            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n-    else:\n-        # Si le dossier n'est pas dans le bon état, afficher une erreur\n-        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n-\n-    # Redirection vers la liste des dossiers\n     return redirect('dossier_list_selction')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734604733338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,9 @@\n         country_color = colors.darkorange\n     elif dossier.pays_id == \"db22fd0ba3344d87a85600fb24f6ccc5\":  # Supposons que l'ID de la Côte d'Ivoire soit 2\n         print(f\"Pays sélectionné: Côte d'Ivoire (ID: {dossier.pays_id})\")  # Vérification de la valeur\n         country_color = colors.blue\n-    elif dossier.pays_id == 3:  # Supposons que l'ID du Nigeria soit 3\n+    elif dossier.pays_id == \"357dd1b4509b4199aa55b8c49c53638d\":  # Supposons que l'ID du Nigeria soit 3\n         print(f\"Pays sélectionné: Nigeria (ID: {dossier.pays_id})\")  # Vérification de la valeur\n         country_color = colors.red\n     else:\n         print(\"Pays non reconnu\")\n"
                },
                {
                    "date": 1734604755503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,13 +269,10 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n  \n-        # Vérification de l'ID du pays\n-    print(f\"ID pays sélectionné: {dossier.pays_id}\")  # Vérification de la valeur\n+   \n \n-    country_color = colors.white  # Couleur par défaut\n-\n     # Logic pour changer la couleur en fonction de l'ID du pays\n     if dossier.pays_id == \"45245cc38bc045d5bc4c33cb585e3437\":  # Supposons que l'ID du Gabon soit 1\n         print(f\"Pays sélectionné: Gabon (ID: {dossier.pays_id})\")  # Vérification de la valeur\n         country_color = colors.darkorange\n"
                },
                {
                    "date": 1734604913304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n         if user.username == 'Responsable':\n             return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n         else:\n             return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n-\n+    \n     def get_context_data(self, **kwargs):\n         \"\"\"\n         Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n         \"\"\"\n@@ -269,23 +269,10 @@\n             conteneur.etat or \"N/A\",\n             dossier.get_type_conteneur_display()\n         ])\n  \n-   \n+     \n \n-    # Logic pour changer la couleur en fonction de l'ID du pays\n-    if dossier.pays_id == \"45245cc38bc045d5bc4c33cb585e3437\":  # Supposons que l'ID du Gabon soit 1\n-        print(f\"Pays sélectionné: Gabon (ID: {dossier.pays_id})\")  # Vérification de la valeur\n-        country_color = colors.darkorange\n-    elif dossier.pays_id == \"db22fd0ba3344d87a85600fb24f6ccc5\":  # Supposons que l'ID de la Côte d'Ivoire soit 2\n-        print(f\"Pays sélectionné: Côte d'Ivoire (ID: {dossier.pays_id})\")  # Vérification de la valeur\n-        country_color = colors.blue\n-    elif dossier.pays_id == \"357dd1b4509b4199aa55b8c49c53638d\":  # Supposons que l'ID du Nigeria soit 3\n-        print(f\"Pays sélectionné: Nigeria (ID: {dossier.pays_id})\")  # Vérification de la valeur\n-        country_color = colors.red\n-    else:\n-        print(\"Pays non reconnu\")\n-\n      \n \n     table = Table(data, colWidths=[1*inch, 2*inch, 2*inch, 2*inch])\n     table.setStyle(TableStyle([\n@@ -294,9 +281,9 @@\n         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n         ('FONTSIZE', (0, 0), (-1, 0), 12),\n         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n-        ('BACKGROUND', (0, 1), (-1, -1), country_color),  # Utilisation de la couleur du pays\n+        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),  # Utilisation de la couleur du pays\n         ('GRID', (0, 0), (-1, -1), 1, colors.black),\n         ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n     ]))\n \n"
                }
            ],
            "date": 1734390365379,
            "name": "Commit-0",
            "content": "#from django.http import HttpRequest, HttpResponseRedirect\nfrom django.db import IntegrityError\nfrom django.views.generic import ListView, CreateView,UpdateView,DeleteView\nfrom conteneurs.models import *\nfrom conteneurs.forms import ConteneurForm, ConteneurFormSet\nfrom django.contrib import messages\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views.generic.edit import FormView\nfrom django.forms import modelformset_factory\nfrom django.urls import reverse_lazy\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.utils import ImageReader\nfrom django.templatetags.static import static\nfrom io import BytesIO\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\nfrom django.core.mail import EmailMessage\nfrom django.template.loader import render_to_string\nfrom django.conf import settings\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.utils import timezone\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\nfrom weasyprint import HTML\nfrom django.templatetags.static import static\n\nclass DossierSelectionListView(LoginRequiredMixin, ListView):\n    model = Dossier\n    template_name = 'pages/Dossier_selection/dossier_list.html'\n    context_object_name = 'dossiers'\n\n    def get_queryset(self):\n        \"\"\"\n        Retourne les dossiers où l'agent de sélection connecté est associé,\n        excluant ceux en 'Aconage_en_cours'.\n        \"\"\"\n        user = self.request.user\n        if user.username == 'Responsable':\n            return Dossier.objects.exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n        else:\n            return Dossier.objects.filter(agent_selection=user).exclude(statut='Aconage_en_cours').order_by('-Date_ajout')\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Ajoute les contextes supplémentaires pour les dossiers en attente et en cours de sélection.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        user = self.request.user\n\n        if user.username == 'Responsable':\n            context['dossiers_en_attente'] = Dossier.objects.filter(statut='en_attente').order_by('-Date_ajout')\n            context['dossiers_en_cours'] = Dossier.objects.filter(statut='selection_en_cours').order_by('-Date_ajout')\n        else:\n            context['dossiers_en_attente'] = Dossier.objects.filter(agent_selection=user, statut='en_attente').order_by('-Date_ajout')\n            context['dossiers_en_cours'] = Dossier.objects.filter(agent_selection=user, statut='selection_en_cours').order_by('-Date_ajout')\n\n        return context\n\ndef view_conteneurs(request, dossier_id):\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n    conteneurs = Conteneur.objects.filter(dossier=dossier).order_by('-Date_ajout')\n\n    return render(request, 'pages/Dossier_selection/view_conteneur.html', {\n        'conteneurs': conteneurs,\n        'dossier': dossier\n    })\n\n\ndef manage_conteneurs(request, dossier_id):\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n\n    ConteneurFormSet = modelformset_factory(\n        Conteneur,\n        form=ConteneurForm,\n        extra=1,\n        can_delete=True\n    )\n\n    if request.method == 'POST':\n        formset = ConteneurFormSet(request.POST, request.FILES, queryset=Conteneur.objects.filter(dossier=dossier))\n        if formset.is_valid():\n            conteneurs = formset.save(commit=False)\n            for form in formset.deleted_forms:\n                if form.instance.pk:\n                    form.instance.delete()\n            for conteneur in conteneurs:\n                conteneur.dossier = dossier\n                conteneur.agent_selection = request.user\n                conteneur.save()\n            dossier.envoyer_pour_selection()  # Met à jour le statut du dossier si nécessaire\n            return redirect('view_conteneurs', dossier_id=dossier_id)\n        else:\n            print(formset.errors)  # Affiche les erreurs de validation pour le débogage\n    else:\n        # Assurez-vous d'obtenir uniquement les conteneurs qui ne sont pas liés au dossier\n        formset = ConteneurFormSet(queryset=Conteneur.objects.none())\n\n\n    return render(request, 'pages/Dossier_selection/conteneur_create.html', {\n        'formset': formset,\n        'dossier': dossier\n    })\n\n\n\nclass ConteneurUpdateView(LoginRequiredMixin, UpdateView):\n    model = Conteneur\n    form_class = ConteneurForm\n    template_name = 'pages/Dossier_selection/modifier_conteneur.html'\n\n    def get_success_url(self):\n        # Obtenir le conteneur mis à jour\n        conteneur = self.object\n        dossier_id = conteneur.dossier.id\n        # Rediriger vers la vue des conteneurs du dossier\n        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n\n    def get_object(self, queryset=None):\n        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n    \n\nclass ConteneurDeleteView(LoginRequiredMixin, DeleteView):\n    model = Conteneur\n    template_name = 'pages/Dossier_selection/conteneur_confirm_delete.html'\n    success_url = reverse_lazy('dossier_list_selction')  # Ou une URL spécifique à ta vue\n    \n    def get_success_url(self):\n        # Obtenir le conteneur mis à jour\n        conteneur = self.object\n        dossier_id = conteneur.dossier.id\n        # Rediriger vers la vue des conteneurs du dossier\n        return reverse_lazy('view_conteneurs', kwargs={'dossier_id': dossier_id})\n\n    def get_object(self, queryset=None):\n        return get_object_or_404(Conteneur, id=self.kwargs['pk'])\n\n\n\n\n\"\"\"def generate_dossier_pdf(request, dossier_id):\n    dossier = Dossier.objects.get(id=dossier_id)\n    conteneurs = dossier.conteneurs.all()\n\n    # URL absolue du logo\n    logo_url = request.build_absolute_uri(static('img/logo.jpg'))  # Utiliser une URL absolue\n\n    # Charger le template HTML\n    template = get_template('pages/Dossier_selection/pdf_selection.html')\n    html_content = template.render({\n        'projet': dossier.projet,\n        'client': dossier.client,\n        'TRD': dossier.TRD,\n        'compagnie_maritime': dossier.compagnie_maritime,\n        'port_de_dechargement': dossier.port_de_dechargement,\n        'port_de_chargement': dossier.port_de_chargement,\n        'commodite': dossier.commodite,\n        'conteneurs': conteneurs,\n        'site': dossier.site,\n        'Site_empotage': dossier.Site_empotage,\n        'agent_selection': dossier.agent_selection,\n        'agent_acconage': dossier.agent_acconage,\n        'logo_url': logo_url  # Passer l'URL absolue du logo au template\n    })\n\n    # Convertir en PDF\n    pdf_file = HTML(string=html_content, base_url=request.build_absolute_uri()).write_pdf()\n\n    # Retourner le fichier PDF en réponse HTTP\n    response = HttpResponse(pdf_file, content_type='application/pdf')\n    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection {dossier.projet}.pdf\"'\n    return response\n\"\"\"\n \nfrom reportlab.lib import colors\nfrom reportlab.lib.units import inch\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.lib.pagesizes import landscape, letter  # Add this line\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\nimport os\nfrom django.conf import settings\ndef generate_dossier_pdf(request, dossier_id):\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n    conteneurs = dossier.conteneurs.all()\n\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = f'attachment; filename=\"Rapport de selection  {dossier.projet}.pdf\"'\n\n    doc = SimpleDocTemplate(response, pagesize=landscape(letter),\n                            rightMargin=0.5*inch, leftMargin=0.5*inch,\n                            topMargin=0.5*inch, bottomMargin=0.5*inch)\n\n    # Styles\n    styles = getSampleStyleSheet()\n    title_style = styles['Heading1']\n    normal_style = styles['Normal']\n\n    # Contenu du document\n    elements = []\n\n    # Logo\n    logo_path = os.path.join(settings.STATIC_ROOT, 'img/logo.jpg')\n    elements.append(Paragraph(f'<img src=\"{logo_path}\" width=\"70\" height=\"70\" />', normal_style))\n    elements.append(Spacer(1, 0.2*inch))\n\n    # Titre et informations du dossier\n    elements.append(Paragraph(f\"Rapport de selection Du Dossier: {dossier.projet}\", title_style))\n    elements.append(Spacer(1, 0.1*inch))\n\n    info_text = [\n        f\"Client: {dossier.client}\",\n        f\"TRD: {dossier.TRD}\",\n        f\"BOOKING: {dossier.booking}\",\n        f\"Site de sélection: {dossier.site}\",\n        f\"Site d'habillage & empotage: {dossier.Site_empotage}\",\n        f\"Nom de l'agent de sélection: Mr {dossier.agent_selection} - tel :{dossier.agent_selection.Contact}\",\n        f\"Nom de l'agent d'habillage et empotage: ({dossier.agent_acconage}) Mr {dossier.agent_acconage.first_name} {dossier.agent_acconage.last_name} - tel :{dossier.agent_acconage.Contact}\",\n        f\"Compagnie maritime: {dossier.compagnie_maritime}\",\n        f\"POD: {dossier.port_de_dechargement}\",\n        f\"POL: {dossier.port_de_chargement}\",\n        f\"Commodité: {dossier.commodite}\",\n        f\"pays: {dossier.pays}\",\n        f\"Date d'ajout: {dossier.Date_ajout.strftime('%Y-%m-%d %H:%M')}\",\n        f\"Date de sélection: {dossier.Date_selection.strftime('%Y-%m-%d %H:%M')}\",\n        f\"Nombre de conteneurs: {conteneurs.count()}\"\n    ]\n\n    for line in info_text:\n        elements.append(Paragraph(line, normal_style))\n        elements.append(Spacer(1, 0.05*inch))\n\n    elements.append(Spacer(1, 0.2*inch))\n\n    # Tableau des conteneurs\n    data = [[\"N°\", \"Réf\", \"État\"]]\n    for i, conteneur in enumerate(conteneurs, start=1):\n        data.append([\n            i,\n            conteneur.reference or \"N/A\",\n            conteneur.etat or \"N/A\",\n        ])\n\n    table = Table(data, colWidths=[1*inch, 2*inch, 2*inch])  # Set specific column widths\n    table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, 0), 12),\n        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n    ]))\n\n    # Centering the table in the document\n    elements.append(Spacer(1, 0.2*inch))\n    elements.append(Paragraph('<br/>', normal_style))  # Adding a break for spacing\n    elements.append(table)\n\n    # Générer le PDF\n    doc.build(elements)\n\n    return response\n\n\n\ndef soumettre_dossier(request, dossier_id):\n    # Récupérer le dossier\n    dossier = get_object_or_404(Dossier, id=dossier_id)\n\n    # Vérifier le statut du dossier\n    if dossier.statut == 'selection_en_cours':\n        # Changer le statut du dossier\n        dossier.statut = 'Aconage_en_cours'\n        dossier.statut_date = timezone.now()\n        dossier.save()\n\n        # Récupérer les emails des personnes concernées\n        emails = []\n        if dossier.agent_acconage:\n            emails.append(dossier.agent_acconage.email)\n        if dossier.secretaire:\n            emails.append(dossier.secretaire.email)\n\n        # Récupérer les emails de tous les personnels ayant le statut 'chef'\n        chefs_emails = [chef.email for chef in Personnel.objects.filter(Personnel_type='chef')]\n        emails += chefs_emails\n\n        # Emails à mettre en copie (CC)\n        cc_emails = [\n            'alice.tuo@oils-of-africa.ci',\n            'appro.stock@oils-of-africa.ci',\n            'fitting.loadingassistance1@oils-of-africa.ci',\n            'ops@africa-newportlogistics.ci',\n            'import.export@africa-newportlogistics.ci',\n            'stagiaireoils@gmail.com'\n        ]\n\n        # Utiliser l'email de l'utilisateur connecté comme expéditeur\n        from_email = request.user.email\n\n        # Générer le PDF\n        pdf_response = generate_dossier_pdf(request, dossier_id)\n        pdf_content = pdf_response.content\n\n        # Créer et envoyer l'e-mail avec le PDF en pièce jointe\n        email = EmailMultiAlternatives(\n            subject=f\"Dossier {dossier.projet} - Prêt pour l'habillage & l'empotage\",\n            body=(\n                f\"<html>\"\n                f\"<body>\"\n                f\"<p>Le dossier <strong>{dossier.projet}</strong> (TRD: {dossier.TRD}) a été envoyé par \"\n                f\"l'agent de sélection : {request.user.username}. Veuillez trouver ci-joint le PDF avec les \"\n                f\"détails du dossier et des conteneurs.</p>\"\n                f\"<p>Pour plus de détails, veuillez visiter le lien suivant : \"\n                f\"<a href='https://empotage-oils-of-africa.net/login/'>Cliquez ici pour vous connecter</a>.</p>\"\n                f\"</body>\"\n                f\"</html>\"\n            ),\n            from_email=from_email,\n            to=emails,\n            cc=cc_emails\n        )\n        \n        # Joindre le PDF\n        email.attach('dossier_details.pdf', pdf_content, 'application/pdf')\n\n        # Indiquer que l'email est en HTML\n        email.content_subtype = 'html'\n\n        # Envoyer l'email\n        try:\n            email.send()\n            messages.success(request, f\"Dossier {dossier.projet} soumis avec succès à l'agent d'empotage.\")\n        except Exception as e:\n            messages.error(request, f\"Erreur lors de l'envoi de l'email : {str(e)}\")\n    else:\n        # Si le dossier n'est pas dans le bon état, afficher une erreur\n        messages.error(request, \"Le dossier n'est pas dans un état valide pour être soumis.\")\n\n    # Redirection vers la liste des dossiers\n    return redirect('dossier_list_selction')"
        }
    ]
}